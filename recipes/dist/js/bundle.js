!function(t){var n={};function e(r){if(n[r])return n[r].exports;var i=n[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,e),i.l=!0,i.exports}e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var i in t)e.d(r,i,function(n){return t[n]}.bind(null,i));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=136)}([function(t,n,e){var r=e(2),i=e(19),o=e(11),u=e(12),c=e(20),a=function(t,n,e){var s,f,l,h,p=t&a.F,v=t&a.G,d=t&a.S,g=t&a.P,y=t&a.B,m=v?r:d?r[n]||(r[n]={}):(r[n]||{}).prototype,_=v?i:i[n]||(i[n]={}),b=_.prototype||(_.prototype={});for(s in v&&(e=n),e)l=((f=!p&&m&&void 0!==m[s])?m:e)[s],h=y&&f?c(l,r):g&&"function"==typeof l?c(Function.call,l):l,m&&u(m,s,l,t&a.U),_[s]!=l&&o(_,s,h),g&&b[s]!=l&&(b[s]=l)};r.core=i,a.F=1,a.G=2,a.S=4,a.P=8,a.B=16,a.W=32,a.U=64,a.R=128,t.exports=a},function(t,n,e){var r=e(4);t.exports=function(t){if(!r(t))throw TypeError(t+" is not an object!");return t}},function(t,n){var e=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=e)},function(t,n){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,n){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,n,e){var r=e(51)("wks"),i=e(34),o=e(2).Symbol,u="function"==typeof o;(t.exports=function(t){return r[t]||(r[t]=u&&o[t]||(u?o:i)("Symbol."+t))}).store=r},function(t,n,e){t.exports=!e(3)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(t,n,e){var r=e(1),i=e(94),o=e(23),u=Object.defineProperty;n.f=e(6)?Object.defineProperty:function(t,n,e){if(r(t),n=o(n,!0),r(e),i)try{return u(t,n,e)}catch(t){}if("get"in e||"set"in e)throw TypeError("Accessors not supported!");return"value"in e&&(t[n]=e.value),t}},function(t,n,e){var r=e(25),i=Math.min;t.exports=function(t){return t>0?i(r(t),9007199254740991):0}},function(t,n,e){var r=e(24);t.exports=function(t){return Object(r(t))}},function(t,n){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,n,e){var r=e(7),i=e(33);t.exports=e(6)?function(t,n,e){return r.f(t,n,i(1,e))}:function(t,n,e){return t[n]=e,t}},function(t,n,e){var r=e(2),i=e(11),o=e(14),u=e(34)("src"),c=Function.toString,a=(""+c).split("toString");e(19).inspectSource=function(t){return c.call(t)},(t.exports=function(t,n,e,c){var s="function"==typeof e;s&&(o(e,"name")||i(e,"name",n)),t[n]!==e&&(s&&(o(e,u)||i(e,u,t[n]?""+t[n]:a.join(String(n)))),t===r?t[n]=e:c?t[n]?t[n]=e:i(t,n,e):(delete t[n],i(t,n,e)))})(Function.prototype,"toString",function(){return"function"==typeof this&&this[u]||c.call(this)})},function(t,n,e){var r=e(0),i=e(3),o=e(24),u=/"/g,c=function(t,n,e,r){var i=String(o(t)),c="<"+n;return""!==e&&(c+=" "+e+'="'+String(r).replace(u,"&quot;")+'"'),c+">"+i+"</"+n+">"};t.exports=function(t,n){var e={};e[t]=n(c),r(r.P+r.F*i(function(){var n=""[t]('"');return n!==n.toLowerCase()||n.split('"').length>3}),"String",e)}},function(t,n){var e={}.hasOwnProperty;t.exports=function(t,n){return e.call(t,n)}},function(t,n,e){var r=e(47),i=e(24);t.exports=function(t){return r(i(t))}},function(t,n,e){var r=e(48),i=e(33),o=e(15),u=e(23),c=e(14),a=e(94),s=Object.getOwnPropertyDescriptor;n.f=e(6)?s:function(t,n){if(t=o(t),n=u(n,!0),a)try{return s(t,n)}catch(t){}if(c(t,n))return i(!r.f.call(t,n),t[n])}},function(t,n,e){var r=e(14),i=e(9),o=e(68)("IE_PROTO"),u=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=i(t),r(t,o)?t[o]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?u:null}},function(t,n,e){"use strict";var r=e(129),i=e(342),o=Object.prototype.toString;function u(t){return"[object Array]"===o.call(t)}function c(t){return null!==t&&"object"==typeof t}function a(t){return"[object Function]"===o.call(t)}function s(t,n){if(null!==t&&void 0!==t)if("object"!=typeof t&&(t=[t]),u(t))for(var e=0,r=t.length;e<r;e++)n.call(null,t[e],e,t);else for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&n.call(null,t[i],i,t)}t.exports={isArray:u,isArrayBuffer:function(t){return"[object ArrayBuffer]"===o.call(t)},isBuffer:i,isFormData:function(t){return"undefined"!=typeof FormData&&t instanceof FormData},isArrayBufferView:function(t){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(t):t&&t.buffer&&t.buffer instanceof ArrayBuffer},isString:function(t){return"string"==typeof t},isNumber:function(t){return"number"==typeof t},isObject:c,isUndefined:function(t){return void 0===t},isDate:function(t){return"[object Date]"===o.call(t)},isFile:function(t){return"[object File]"===o.call(t)},isBlob:function(t){return"[object Blob]"===o.call(t)},isFunction:a,isStream:function(t){return c(t)&&a(t.pipe)},isURLSearchParams:function(t){return"undefined"!=typeof URLSearchParams&&t instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:s,merge:function t(){var n={};function e(e,r){"object"==typeof n[r]&&"object"==typeof e?n[r]=t(n[r],e):n[r]=e}for(var r=0,i=arguments.length;r<i;r++)s(arguments[r],e);return n},extend:function(t,n,e){return s(n,function(n,i){t[i]=e&&"function"==typeof n?r(n,e):n}),t},trim:function(t){return t.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(t,n){var e=t.exports={version:"2.5.7"};"number"==typeof __e&&(__e=e)},function(t,n,e){var r=e(10);t.exports=function(t,n,e){if(r(t),void 0===n)return t;switch(e){case 1:return function(e){return t.call(n,e)};case 2:return function(e,r){return t.call(n,e,r)};case 3:return function(e,r,i){return t.call(n,e,r,i)}}return function(){return t.apply(n,arguments)}}},function(t,n){var e={}.toString;t.exports=function(t){return e.call(t).slice(8,-1)}},function(t,n,e){"use strict";var r=e(3);t.exports=function(t,n){return!!t&&r(function(){n?t.call(null,function(){},1):t.call(null)})}},function(t,n,e){var r=e(4);t.exports=function(t,n){if(!r(t))return t;var e,i;if(n&&"function"==typeof(e=t.toString)&&!r(i=e.call(t)))return i;if("function"==typeof(e=t.valueOf)&&!r(i=e.call(t)))return i;if(!n&&"function"==typeof(e=t.toString)&&!r(i=e.call(t)))return i;throw TypeError("Can't convert object to primitive value")}},function(t,n){t.exports=function(t){if(void 0==t)throw TypeError("Can't call method on  "+t);return t}},function(t,n){var e=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:e)(t)}},function(t,n,e){var r=e(0),i=e(19),o=e(3);t.exports=function(t,n){var e=(i.Object||{})[t]||Object[t],u={};u[t]=n(e),r(r.S+r.F*o(function(){e(1)}),"Object",u)}},function(t,n,e){var r=e(20),i=e(47),o=e(9),u=e(8),c=e(85);t.exports=function(t,n){var e=1==t,a=2==t,s=3==t,f=4==t,l=6==t,h=5==t||l,p=n||c;return function(n,c,v){for(var d,g,y=o(n),m=i(y),_=r(c,v,3),b=u(m.length),w=0,x=e?p(n,b):a?p(n,0):void 0;b>w;w++)if((h||w in m)&&(g=_(d=m[w],w,y),t))if(e)x[w]=g;else if(g)switch(t){case 3:return!0;case 5:return d;case 6:return w;case 2:x.push(d)}else if(f)return!1;return l?-1:s||f?f:x}}},function(t,n,e){"use strict";if(e(6)){var r=e(31),i=e(2),o=e(3),u=e(0),c=e(62),a=e(91),s=e(20),f=e(40),l=e(33),h=e(11),p=e(42),v=e(25),d=e(8),g=e(120),y=e(36),m=e(23),_=e(14),b=e(49),w=e(4),x=e(9),S=e(82),E=e(37),O=e(17),k=e(38).f,M=e(84),P=e(34),F=e(5),I=e(27),j=e(52),L=e(59),A=e(87),R=e(45),T=e(56),N=e(39),C=e(86),D=e(110),B=e(7),q=e(16),U=B.f,W=q.f,G=i.RangeError,V=i.TypeError,z=i.Uint8Array,H=Array.prototype,J=a.ArrayBuffer,Y=a.DataView,K=I(0),X=I(2),$=I(3),Q=I(4),Z=I(5),tt=I(6),nt=j(!0),et=j(!1),rt=A.values,it=A.keys,ot=A.entries,ut=H.lastIndexOf,ct=H.reduce,at=H.reduceRight,st=H.join,ft=H.sort,lt=H.slice,ht=H.toString,pt=H.toLocaleString,vt=F("iterator"),dt=F("toStringTag"),gt=P("typed_constructor"),yt=P("def_constructor"),mt=c.CONSTR,_t=c.TYPED,bt=c.VIEW,wt=I(1,function(t,n){return kt(L(t,t[yt]),n)}),xt=o(function(){return 1===new z(new Uint16Array([1]).buffer)[0]}),St=!!z&&!!z.prototype.set&&o(function(){new z(1).set({})}),Et=function(t,n){var e=v(t);if(e<0||e%n)throw G("Wrong offset!");return e},Ot=function(t){if(w(t)&&_t in t)return t;throw V(t+" is not a typed array!")},kt=function(t,n){if(!(w(t)&&gt in t))throw V("It is not a typed array constructor!");return new t(n)},Mt=function(t,n){return Pt(L(t,t[yt]),n)},Pt=function(t,n){for(var e=0,r=n.length,i=kt(t,r);r>e;)i[e]=n[e++];return i},Ft=function(t,n,e){U(t,n,{get:function(){return this._d[e]}})},It=function(t){var n,e,r,i,o,u,c=x(t),a=arguments.length,f=a>1?arguments[1]:void 0,l=void 0!==f,h=M(c);if(void 0!=h&&!S(h)){for(u=h.call(c),r=[],n=0;!(o=u.next()).done;n++)r.push(o.value);c=r}for(l&&a>2&&(f=s(f,arguments[2],2)),n=0,e=d(c.length),i=kt(this,e);e>n;n++)i[n]=l?f(c[n],n):c[n];return i},jt=function(){for(var t=0,n=arguments.length,e=kt(this,n);n>t;)e[t]=arguments[t++];return e},Lt=!!z&&o(function(){pt.call(new z(1))}),At=function(){return pt.apply(Lt?lt.call(Ot(this)):Ot(this),arguments)},Rt={copyWithin:function(t,n){return D.call(Ot(this),t,n,arguments.length>2?arguments[2]:void 0)},every:function(t){return Q(Ot(this),t,arguments.length>1?arguments[1]:void 0)},fill:function(t){return C.apply(Ot(this),arguments)},filter:function(t){return Mt(this,X(Ot(this),t,arguments.length>1?arguments[1]:void 0))},find:function(t){return Z(Ot(this),t,arguments.length>1?arguments[1]:void 0)},findIndex:function(t){return tt(Ot(this),t,arguments.length>1?arguments[1]:void 0)},forEach:function(t){K(Ot(this),t,arguments.length>1?arguments[1]:void 0)},indexOf:function(t){return et(Ot(this),t,arguments.length>1?arguments[1]:void 0)},includes:function(t){return nt(Ot(this),t,arguments.length>1?arguments[1]:void 0)},join:function(t){return st.apply(Ot(this),arguments)},lastIndexOf:function(t){return ut.apply(Ot(this),arguments)},map:function(t){return wt(Ot(this),t,arguments.length>1?arguments[1]:void 0)},reduce:function(t){return ct.apply(Ot(this),arguments)},reduceRight:function(t){return at.apply(Ot(this),arguments)},reverse:function(){for(var t,n=Ot(this).length,e=Math.floor(n/2),r=0;r<e;)t=this[r],this[r++]=this[--n],this[n]=t;return this},some:function(t){return $(Ot(this),t,arguments.length>1?arguments[1]:void 0)},sort:function(t){return ft.call(Ot(this),t)},subarray:function(t,n){var e=Ot(this),r=e.length,i=y(t,r);return new(L(e,e[yt]))(e.buffer,e.byteOffset+i*e.BYTES_PER_ELEMENT,d((void 0===n?r:y(n,r))-i))}},Tt=function(t,n){return Mt(this,lt.call(Ot(this),t,n))},Nt=function(t){Ot(this);var n=Et(arguments[1],1),e=this.length,r=x(t),i=d(r.length),o=0;if(i+n>e)throw G("Wrong length!");for(;o<i;)this[n+o]=r[o++]},Ct={entries:function(){return ot.call(Ot(this))},keys:function(){return it.call(Ot(this))},values:function(){return rt.call(Ot(this))}},Dt=function(t,n){return w(t)&&t[_t]&&"symbol"!=typeof n&&n in t&&String(+n)==String(n)},Bt=function(t,n){return Dt(t,n=m(n,!0))?l(2,t[n]):W(t,n)},qt=function(t,n,e){return!(Dt(t,n=m(n,!0))&&w(e)&&_(e,"value"))||_(e,"get")||_(e,"set")||e.configurable||_(e,"writable")&&!e.writable||_(e,"enumerable")&&!e.enumerable?U(t,n,e):(t[n]=e.value,t)};mt||(q.f=Bt,B.f=qt),u(u.S+u.F*!mt,"Object",{getOwnPropertyDescriptor:Bt,defineProperty:qt}),o(function(){ht.call({})})&&(ht=pt=function(){return st.call(this)});var Ut=p({},Rt);p(Ut,Ct),h(Ut,vt,Ct.values),p(Ut,{slice:Tt,set:Nt,constructor:function(){},toString:ht,toLocaleString:At}),Ft(Ut,"buffer","b"),Ft(Ut,"byteOffset","o"),Ft(Ut,"byteLength","l"),Ft(Ut,"length","e"),U(Ut,dt,{get:function(){return this[_t]}}),t.exports=function(t,n,e,a){var s=t+((a=!!a)?"Clamped":"")+"Array",l="get"+t,p="set"+t,v=i[s],y=v||{},m=v&&O(v),_=!v||!c.ABV,x={},S=v&&v.prototype,M=function(t,e){U(t,e,{get:function(){return function(t,e){var r=t._d;return r.v[l](e*n+r.o,xt)}(this,e)},set:function(t){return function(t,e,r){var i=t._d;a&&(r=(r=Math.round(r))<0?0:r>255?255:255&r),i.v[p](e*n+i.o,r,xt)}(this,e,t)},enumerable:!0})};_?(v=e(function(t,e,r,i){f(t,v,s,"_d");var o,u,c,a,l=0,p=0;if(w(e)){if(!(e instanceof J||"ArrayBuffer"==(a=b(e))||"SharedArrayBuffer"==a))return _t in e?Pt(v,e):It.call(v,e);o=e,p=Et(r,n);var y=e.byteLength;if(void 0===i){if(y%n)throw G("Wrong length!");if((u=y-p)<0)throw G("Wrong length!")}else if((u=d(i)*n)+p>y)throw G("Wrong length!");c=u/n}else c=g(e),o=new J(u=c*n);for(h(t,"_d",{b:o,o:p,l:u,e:c,v:new Y(o)});l<c;)M(t,l++)}),S=v.prototype=E(Ut),h(S,"constructor",v)):o(function(){v(1)})&&o(function(){new v(-1)})&&T(function(t){new v,new v(null),new v(1.5),new v(t)},!0)||(v=e(function(t,e,r,i){var o;return f(t,v,s),w(e)?e instanceof J||"ArrayBuffer"==(o=b(e))||"SharedArrayBuffer"==o?void 0!==i?new y(e,Et(r,n),i):void 0!==r?new y(e,Et(r,n)):new y(e):_t in e?Pt(v,e):It.call(v,e):new y(g(e))}),K(m!==Function.prototype?k(y).concat(k(m)):k(y),function(t){t in v||h(v,t,y[t])}),v.prototype=S,r||(S.constructor=v));var P=S[vt],F=!!P&&("values"==P.name||void 0==P.name),I=Ct.values;h(v,gt,!0),h(S,_t,s),h(S,bt,!0),h(S,yt,v),(a?new v(1)[dt]==s:dt in S)||U(S,dt,{get:function(){return s}}),x[s]=v,u(u.G+u.W+u.F*(v!=y),x),u(u.S,s,{BYTES_PER_ELEMENT:n}),u(u.S+u.F*o(function(){y.of.call(v,1)}),s,{from:It,of:jt}),"BYTES_PER_ELEMENT"in S||h(S,"BYTES_PER_ELEMENT",n),u(u.P,s,Rt),N(s),u(u.P+u.F*St,s,{set:Nt}),u(u.P+u.F*!F,s,Ct),r||S.toString==ht||(S.toString=ht),u(u.P+u.F*o(function(){new v(1).slice()}),s,{slice:Tt}),u(u.P+u.F*(o(function(){return[1,2].toLocaleString()!=new v([1,2]).toLocaleString()})||!o(function(){S.toLocaleString.call([1,2])})),s,{toLocaleString:At}),R[s]=F?P:I,r||F||h(S,vt,I)}}else t.exports=function(){}},function(t,n,e){var r=e(115),i=e(0),o=e(51)("metadata"),u=o.store||(o.store=new(e(118))),c=function(t,n,e){var i=u.get(t);if(!i){if(!e)return;u.set(t,i=new r)}var o=i.get(n);if(!o){if(!e)return;i.set(n,o=new r)}return o};t.exports={store:u,map:c,has:function(t,n,e){var r=c(n,e,!1);return void 0!==r&&r.has(t)},get:function(t,n,e){var r=c(n,e,!1);return void 0===r?void 0:r.get(t)},set:function(t,n,e,r){c(e,r,!0).set(t,n)},keys:function(t,n){var e=c(t,n,!1),r=[];return e&&e.forEach(function(t,n){r.push(n)}),r},key:function(t){return void 0===t||"symbol"==typeof t?t:String(t)},exp:function(t){i(i.S,"Reflect",t)}}},function(t,n,e){var r=e(34)("meta"),i=e(4),o=e(14),u=e(7).f,c=0,a=Object.isExtensible||function(){return!0},s=!e(3)(function(){return a(Object.preventExtensions({}))}),f=function(t){u(t,r,{value:{i:"O"+ ++c,w:{}}})},l=t.exports={KEY:r,NEED:!1,fastKey:function(t,n){if(!i(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!o(t,r)){if(!a(t))return"F";if(!n)return"E";f(t)}return t[r].i},getWeak:function(t,n){if(!o(t,r)){if(!a(t))return!0;if(!n)return!1;f(t)}return t[r].w},onFreeze:function(t){return s&&l.NEED&&a(t)&&!o(t,r)&&f(t),t}}},function(t,n){t.exports=!1},function(t,n,e){var r=e(5)("unscopables"),i=Array.prototype;void 0==i[r]&&e(11)(i,r,{}),t.exports=function(t){i[r][t]=!0}},function(t,n){t.exports=function(t,n){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:n}}},function(t,n){var e=0,r=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++e+r).toString(36))}},function(t,n,e){var r=e(96),i=e(69);t.exports=Object.keys||function(t){return r(t,i)}},function(t,n,e){var r=e(25),i=Math.max,o=Math.min;t.exports=function(t,n){return(t=r(t))<0?i(t+n,0):o(t,n)}},function(t,n,e){var r=e(1),i=e(97),o=e(69),u=e(68)("IE_PROTO"),c=function(){},a=function(){var t,n=e(66)("iframe"),r=o.length;for(n.style.display="none",e(70).appendChild(n),n.src="javascript:",(t=n.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),a=t.F;r--;)delete a.prototype[o[r]];return a()};t.exports=Object.create||function(t,n){var e;return null!==t?(c.prototype=r(t),e=new c,c.prototype=null,e[u]=t):e=a(),void 0===n?e:i(e,n)}},function(t,n,e){var r=e(96),i=e(69).concat("length","prototype");n.f=Object.getOwnPropertyNames||function(t){return r(t,i)}},function(t,n,e){"use strict";var r=e(2),i=e(7),o=e(6),u=e(5)("species");t.exports=function(t){var n=r[t];o&&n&&!n[u]&&i.f(n,u,{configurable:!0,get:function(){return this}})}},function(t,n){t.exports=function(t,n,e,r){if(!(t instanceof n)||void 0!==r&&r in t)throw TypeError(e+": incorrect invocation!");return t}},function(t,n,e){var r=e(20),i=e(108),o=e(82),u=e(1),c=e(8),a=e(84),s={},f={};(n=t.exports=function(t,n,e,l,h){var p,v,d,g,y=h?function(){return t}:a(t),m=r(e,l,n?2:1),_=0;if("function"!=typeof y)throw TypeError(t+" is not iterable!");if(o(y)){for(p=c(t.length);p>_;_++)if((g=n?m(u(v=t[_])[0],v[1]):m(t[_]))===s||g===f)return g}else for(d=y.call(t);!(v=d.next()).done;)if((g=i(d,m,v.value,n))===s||g===f)return g}).BREAK=s,n.RETURN=f},function(t,n,e){var r=e(12);t.exports=function(t,n,e){for(var i in n)r(t,i,n[i],e);return t}},function(t,n,e){var r=e(7).f,i=e(14),o=e(5)("toStringTag");t.exports=function(t,n,e){t&&!i(t=e?t:t.prototype,o)&&r(t,o,{configurable:!0,value:n})}},function(t,n,e){var r=e(0),i=e(24),o=e(3),u=e(72),c="["+u+"]",a=RegExp("^"+c+c+"*"),s=RegExp(c+c+"*$"),f=function(t,n,e){var i={},c=o(function(){return!!u[t]()||"​"!="​"[t]()}),a=i[t]=c?n(l):u[t];e&&(i[e]=a),r(r.P+r.F*c,"String",i)},l=f.trim=function(t,n){return t=String(i(t)),1&n&&(t=t.replace(a,"")),2&n&&(t=t.replace(s,"")),t};t.exports=f},function(t,n){t.exports={}},function(t,n,e){var r=e(4);t.exports=function(t,n){if(!r(t)||t._t!==n)throw TypeError("Incompatible receiver, "+n+" required!");return t}},function(t,n,e){var r=e(21);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==r(t)?t.split(""):Object(t)}},function(t,n){n.f={}.propertyIsEnumerable},function(t,n,e){var r=e(21),i=e(5)("toStringTag"),o="Arguments"==r(function(){return arguments}());t.exports=function(t){var n,e,u;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(e=function(t,n){try{return t[n]}catch(t){}}(n=Object(t),i))?e:o?r(n):"Object"==(u=r(n))&&"function"==typeof n.callee?"Arguments":u}},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});n.elements={searchInput:document.querySelector(".search__field"),searchForm:document.querySelector(".search"),renderRecipesList:document.querySelector(".results__list"),resultsBlock:document.querySelector(".results"),paginPages:document.querySelector(".results__pages"),recipe:document.querySelector(".recipe"),serving:document.querySelector(".recipe__info-data--people"),shoppingList:document.querySelector(".shopping__list"),buttonLikes:document.querySelector(".likes"),likesList:document.querySelector(".likes__list")},n.renderSpinner=function(t){t.insertAdjacentHTML("afterbegin",'\n    <div class="loader">\n        <svg>\n            <use href="img/icons.svg#icon-cw"></use>\n        </svg>\n    </div>\n  ')},n.delSpinner=function(){var t=document.querySelector(".loader");t.parentNode.removeChild(t)}},function(t,n,e){var r=e(19),i=e(2),o=i["__core-js_shared__"]||(i["__core-js_shared__"]={});(t.exports=function(t,n){return o[t]||(o[t]=void 0!==n?n:{})})("versions",[]).push({version:r.version,mode:e(31)?"pure":"global",copyright:"© 2018 Denis Pushkarev (zloirock.ru)"})},function(t,n,e){var r=e(15),i=e(8),o=e(36);t.exports=function(t){return function(n,e,u){var c,a=r(n),s=i(a.length),f=o(u,s);if(t&&e!=e){for(;s>f;)if((c=a[f++])!=c)return!0}else for(;s>f;f++)if((t||f in a)&&a[f]===e)return t||f||0;return!t&&-1}}},function(t,n){n.f=Object.getOwnPropertySymbols},function(t,n,e){var r=e(21);t.exports=Array.isArray||function(t){return"Array"==r(t)}},function(t,n,e){var r=e(4),i=e(21),o=e(5)("match");t.exports=function(t){var n;return r(t)&&(void 0!==(n=t[o])?!!n:"RegExp"==i(t))}},function(t,n,e){var r=e(5)("iterator"),i=!1;try{var o=[7][r]();o.return=function(){i=!0},Array.from(o,function(){throw 2})}catch(t){}t.exports=function(t,n){if(!n&&!i)return!1;var e=!1;try{var o=[7],u=o[r]();u.next=function(){return{done:e=!0}},o[r]=function(){return u},t(o)}catch(t){}return e}},function(t,n,e){"use strict";var r=e(1);t.exports=function(){var t=r(this),n="";return t.global&&(n+="g"),t.ignoreCase&&(n+="i"),t.multiline&&(n+="m"),t.unicode&&(n+="u"),t.sticky&&(n+="y"),n}},function(t,n,e){"use strict";var r=e(11),i=e(12),o=e(3),u=e(24),c=e(5);t.exports=function(t,n,e){var a=c(t),s=e(u,a,""[t]),f=s[0],l=s[1];o(function(){var n={};return n[a]=function(){return 7},7!=""[t](n)})&&(i(String.prototype,t,f),r(RegExp.prototype,a,2==n?function(t,n){return l.call(t,this,n)}:function(t){return l.call(t,this)}))}},function(t,n,e){var r=e(1),i=e(10),o=e(5)("species");t.exports=function(t,n){var e,u=r(t).constructor;return void 0===u||void 0==(e=r(u)[o])?n:i(e)}},function(t,n,e){var r=e(2).navigator;t.exports=r&&r.userAgent||""},function(t,n,e){"use strict";var r=e(2),i=e(0),o=e(12),u=e(42),c=e(30),a=e(41),s=e(40),f=e(4),l=e(3),h=e(56),p=e(43),v=e(73);t.exports=function(t,n,e,d,g,y){var m=r[t],_=m,b=g?"set":"add",w=_&&_.prototype,x={},S=function(t){var n=w[t];o(w,t,"delete"==t?function(t){return!(y&&!f(t))&&n.call(this,0===t?0:t)}:"has"==t?function(t){return!(y&&!f(t))&&n.call(this,0===t?0:t)}:"get"==t?function(t){return y&&!f(t)?void 0:n.call(this,0===t?0:t)}:"add"==t?function(t){return n.call(this,0===t?0:t),this}:function(t,e){return n.call(this,0===t?0:t,e),this})};if("function"==typeof _&&(y||w.forEach&&!l(function(){(new _).entries().next()}))){var E=new _,O=E[b](y?{}:-0,1)!=E,k=l(function(){E.has(1)}),M=h(function(t){new _(t)}),P=!y&&l(function(){for(var t=new _,n=5;n--;)t[b](n,n);return!t.has(-0)});M||((_=n(function(n,e){s(n,_,t);var r=v(new m,n,_);return void 0!=e&&a(e,g,r[b],r),r})).prototype=w,w.constructor=_),(k||P)&&(S("delete"),S("has"),g&&S("get")),(P||O)&&S(b),y&&w.clear&&delete w.clear}else _=d.getConstructor(n,t,g,b),u(_.prototype,e),c.NEED=!0;return p(_,t),x[t]=_,i(i.G+i.W+i.F*(_!=m),x),y||d.setStrong(_,t,g),_}},function(t,n,e){for(var r,i=e(2),o=e(11),u=e(34),c=u("typed_array"),a=u("view"),s=!(!i.ArrayBuffer||!i.DataView),f=s,l=0,h="Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(",");l<9;)(r=i[h[l++]])?(o(r.prototype,c,!0),o(r.prototype,a,!0)):f=!1;t.exports={ABV:s,CONSTR:f,TYPED:c,VIEW:a}},function(t,n,e){"use strict";t.exports=e(31)||!e(3)(function(){var t=Math.random();__defineSetter__.call(null,t,function(){}),delete e(2)[t]})},function(t,n,e){"use strict";var r=e(0);t.exports=function(t){r(r.S,t,{of:function(){for(var t=arguments.length,n=new Array(t);t--;)n[t]=arguments[t];return new this(n)}})}},function(t,n,e){"use strict";var r=e(0),i=e(10),o=e(20),u=e(41);t.exports=function(t){r(r.S,t,{from:function(t){var n,e,r,c,a=arguments[1];return i(this),(n=void 0!==a)&&i(a),void 0==t?new this:(e=[],n?(r=0,c=o(a,arguments[2],2),u(t,!1,function(t){e.push(c(t,r++))})):u(t,!1,e.push,e),new this(e))}})}},function(t,n,e){var r=e(4),i=e(2).document,o=r(i)&&r(i.createElement);t.exports=function(t){return o?i.createElement(t):{}}},function(t,n,e){var r=e(2),i=e(19),o=e(31),u=e(95),c=e(7).f;t.exports=function(t){var n=i.Symbol||(i.Symbol=o?{}:r.Symbol||{});"_"==t.charAt(0)||t in n||c(n,t,{value:u.f(t)})}},function(t,n,e){var r=e(51)("keys"),i=e(34);t.exports=function(t){return r[t]||(r[t]=i(t))}},function(t,n){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(t,n,e){var r=e(2).document;t.exports=r&&r.documentElement},function(t,n,e){var r=e(4),i=e(1),o=function(t,n){if(i(t),!r(n)&&null!==n)throw TypeError(n+": can't set as prototype!")};t.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(t,n,r){try{(r=e(20)(Function.call,e(16).f(Object.prototype,"__proto__").set,2))(t,[]),n=!(t instanceof Array)}catch(t){n=!0}return function(t,e){return o(t,e),n?t.__proto__=e:r(t,e),t}}({},!1):void 0),check:o}},function(t,n){t.exports="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"},function(t,n,e){var r=e(4),i=e(71).set;t.exports=function(t,n,e){var o,u=n.constructor;return u!==e&&"function"==typeof u&&(o=u.prototype)!==e.prototype&&r(o)&&i&&i(t,o),t}},function(t,n,e){"use strict";var r=e(25),i=e(24);t.exports=function(t){var n=String(i(this)),e="",o=r(t);if(o<0||o==1/0)throw RangeError("Count can't be negative");for(;o>0;(o>>>=1)&&(n+=n))1&o&&(e+=n);return e}},function(t,n){t.exports=Math.sign||function(t){return 0==(t=+t)||t!=t?t:t<0?-1:1}},function(t,n){var e=Math.expm1;t.exports=!e||e(10)>22025.465794806718||e(10)<22025.465794806718||-2e-17!=e(-2e-17)?function(t){return 0==(t=+t)?t:t>-1e-6&&t<1e-6?t+t*t/2:Math.exp(t)-1}:e},function(t,n,e){var r=e(25),i=e(24);t.exports=function(t){return function(n,e){var o,u,c=String(i(n)),a=r(e),s=c.length;return a<0||a>=s?t?"":void 0:(o=c.charCodeAt(a))<55296||o>56319||a+1===s||(u=c.charCodeAt(a+1))<56320||u>57343?t?c.charAt(a):o:t?c.slice(a,a+2):u-56320+(o-55296<<10)+65536}}},function(t,n,e){"use strict";var r=e(31),i=e(0),o=e(12),u=e(11),c=e(45),a=e(79),s=e(43),f=e(17),l=e(5)("iterator"),h=!([].keys&&"next"in[].keys()),p=function(){return this};t.exports=function(t,n,e,v,d,g,y){a(e,n,v);var m,_,b,w=function(t){if(!h&&t in O)return O[t];switch(t){case"keys":case"values":return function(){return new e(this,t)}}return function(){return new e(this,t)}},x=n+" Iterator",S="values"==d,E=!1,O=t.prototype,k=O[l]||O["@@iterator"]||d&&O[d],M=k||w(d),P=d?S?w("entries"):M:void 0,F="Array"==n&&O.entries||k;if(F&&(b=f(F.call(new t)))!==Object.prototype&&b.next&&(s(b,x,!0),r||"function"==typeof b[l]||u(b,l,p)),S&&k&&"values"!==k.name&&(E=!0,M=function(){return k.call(this)}),r&&!y||!h&&!E&&O[l]||u(O,l,M),c[n]=M,c[x]=p,d)if(m={values:S?M:w("values"),keys:g?M:w("keys"),entries:P},y)for(_ in m)_ in O||o(O,_,m[_]);else i(i.P+i.F*(h||E),n,m);return m}},function(t,n,e){"use strict";var r=e(37),i=e(33),o=e(43),u={};e(11)(u,e(5)("iterator"),function(){return this}),t.exports=function(t,n,e){t.prototype=r(u,{next:i(1,e)}),o(t,n+" Iterator")}},function(t,n,e){var r=e(55),i=e(24);t.exports=function(t,n,e){if(r(n))throw TypeError("String#"+e+" doesn't accept regex!");return String(i(t))}},function(t,n,e){var r=e(5)("match");t.exports=function(t){var n=/./;try{"/./"[t](n)}catch(e){try{return n[r]=!1,!"/./"[t](n)}catch(t){}}return!0}},function(t,n,e){var r=e(45),i=e(5)("iterator"),o=Array.prototype;t.exports=function(t){return void 0!==t&&(r.Array===t||o[i]===t)}},function(t,n,e){"use strict";var r=e(7),i=e(33);t.exports=function(t,n,e){n in t?r.f(t,n,i(0,e)):t[n]=e}},function(t,n,e){var r=e(49),i=e(5)("iterator"),o=e(45);t.exports=e(19).getIteratorMethod=function(t){if(void 0!=t)return t[i]||t["@@iterator"]||o[r(t)]}},function(t,n,e){var r=e(229);t.exports=function(t,n){return new(r(t))(n)}},function(t,n,e){"use strict";var r=e(9),i=e(36),o=e(8);t.exports=function(t){for(var n=r(this),e=o(n.length),u=arguments.length,c=i(u>1?arguments[1]:void 0,e),a=u>2?arguments[2]:void 0,s=void 0===a?e:i(a,e);s>c;)n[c++]=t;return n}},function(t,n,e){"use strict";var r=e(32),i=e(111),o=e(45),u=e(15);t.exports=e(78)(Array,"Array",function(t,n){this._t=u(t),this._i=0,this._k=n},function(){var t=this._t,n=this._k,e=this._i++;return!t||e>=t.length?(this._t=void 0,i(1)):i(0,"keys"==n?e:"values"==n?t[e]:[e,t[e]])},"values"),o.Arguments=o.Array,r("keys"),r("values"),r("entries")},function(t,n,e){var r,i,o,u=e(20),c=e(101),a=e(70),s=e(66),f=e(2),l=f.process,h=f.setImmediate,p=f.clearImmediate,v=f.MessageChannel,d=f.Dispatch,g=0,y={},m=function(){var t=+this;if(y.hasOwnProperty(t)){var n=y[t];delete y[t],n()}},_=function(t){m.call(t.data)};h&&p||(h=function(t){for(var n=[],e=1;arguments.length>e;)n.push(arguments[e++]);return y[++g]=function(){c("function"==typeof t?t:Function(t),n)},r(g),g},p=function(t){delete y[t]},"process"==e(21)(l)?r=function(t){l.nextTick(u(m,t,1))}:d&&d.now?r=function(t){d.now(u(m,t,1))}:v?(o=(i=new v).port2,i.port1.onmessage=_,r=u(o.postMessage,o,1)):f.addEventListener&&"function"==typeof postMessage&&!f.importScripts?(r=function(t){f.postMessage(t+"","*")},f.addEventListener("message",_,!1)):r="onreadystatechange"in s("script")?function(t){a.appendChild(s("script")).onreadystatechange=function(){a.removeChild(this),m.call(t)}}:function(t){setTimeout(u(m,t,1),0)}),t.exports={set:h,clear:p}},function(t,n,e){var r=e(2),i=e(88).set,o=r.MutationObserver||r.WebKitMutationObserver,u=r.process,c=r.Promise,a="process"==e(21)(u);t.exports=function(){var t,n,e,s=function(){var r,i;for(a&&(r=u.domain)&&r.exit();t;){i=t.fn,t=t.next;try{i()}catch(r){throw t?e():n=void 0,r}}n=void 0,r&&r.enter()};if(a)e=function(){u.nextTick(s)};else if(!o||r.navigator&&r.navigator.standalone)if(c&&c.resolve){var f=c.resolve(void 0);e=function(){f.then(s)}}else e=function(){i.call(r,s)};else{var l=!0,h=document.createTextNode("");new o(s).observe(h,{characterData:!0}),e=function(){h.data=l=!l}}return function(r){var i={fn:r,next:void 0};n&&(n.next=i),t||(t=i,e()),n=i}}},function(t,n,e){"use strict";var r=e(10);t.exports.f=function(t){return new function(t){var n,e;this.promise=new t(function(t,r){if(void 0!==n||void 0!==e)throw TypeError("Bad Promise constructor");n=t,e=r}),this.resolve=r(n),this.reject=r(e)}(t)}},function(t,n,e){"use strict";var r=e(2),i=e(6),o=e(31),u=e(62),c=e(11),a=e(42),s=e(3),f=e(40),l=e(25),h=e(8),p=e(120),v=e(38).f,d=e(7).f,g=e(86),y=e(43),m="prototype",_="Wrong index!",b=r.ArrayBuffer,w=r.DataView,x=r.Math,S=r.RangeError,E=r.Infinity,O=b,k=x.abs,M=x.pow,P=x.floor,F=x.log,I=x.LN2,j=i?"_b":"buffer",L=i?"_l":"byteLength",A=i?"_o":"byteOffset";function R(t,n,e){var r,i,o,u=new Array(e),c=8*e-n-1,a=(1<<c)-1,s=a>>1,f=23===n?M(2,-24)-M(2,-77):0,l=0,h=t<0||0===t&&1/t<0?1:0;for((t=k(t))!=t||t===E?(i=t!=t?1:0,r=a):(r=P(F(t)/I),t*(o=M(2,-r))<1&&(r--,o*=2),(t+=r+s>=1?f/o:f*M(2,1-s))*o>=2&&(r++,o/=2),r+s>=a?(i=0,r=a):r+s>=1?(i=(t*o-1)*M(2,n),r+=s):(i=t*M(2,s-1)*M(2,n),r=0));n>=8;u[l++]=255&i,i/=256,n-=8);for(r=r<<n|i,c+=n;c>0;u[l++]=255&r,r/=256,c-=8);return u[--l]|=128*h,u}function T(t,n,e){var r,i=8*e-n-1,o=(1<<i)-1,u=o>>1,c=i-7,a=e-1,s=t[a--],f=127&s;for(s>>=7;c>0;f=256*f+t[a],a--,c-=8);for(r=f&(1<<-c)-1,f>>=-c,c+=n;c>0;r=256*r+t[a],a--,c-=8);if(0===f)f=1-u;else{if(f===o)return r?NaN:s?-E:E;r+=M(2,n),f-=u}return(s?-1:1)*r*M(2,f-n)}function N(t){return t[3]<<24|t[2]<<16|t[1]<<8|t[0]}function C(t){return[255&t]}function D(t){return[255&t,t>>8&255]}function B(t){return[255&t,t>>8&255,t>>16&255,t>>24&255]}function q(t){return R(t,52,8)}function U(t){return R(t,23,4)}function W(t,n,e){d(t[m],n,{get:function(){return this[e]}})}function G(t,n,e,r){var i=p(+e);if(i+n>t[L])throw S(_);var o=t[j]._b,u=i+t[A],c=o.slice(u,u+n);return r?c:c.reverse()}function V(t,n,e,r,i,o){var u=p(+e);if(u+n>t[L])throw S(_);for(var c=t[j]._b,a=u+t[A],s=r(+i),f=0;f<n;f++)c[a+f]=s[o?f:n-f-1]}if(u.ABV){if(!s(function(){b(1)})||!s(function(){new b(-1)})||s(function(){return new b,new b(1.5),new b(NaN),"ArrayBuffer"!=b.name})){for(var z,H=(b=function(t){return f(this,b),new O(p(t))})[m]=O[m],J=v(O),Y=0;J.length>Y;)(z=J[Y++])in b||c(b,z,O[z]);o||(H.constructor=b)}var K=new w(new b(2)),X=w[m].setInt8;K.setInt8(0,2147483648),K.setInt8(1,2147483649),!K.getInt8(0)&&K.getInt8(1)||a(w[m],{setInt8:function(t,n){X.call(this,t,n<<24>>24)},setUint8:function(t,n){X.call(this,t,n<<24>>24)}},!0)}else b=function(t){f(this,b,"ArrayBuffer");var n=p(t);this._b=g.call(new Array(n),0),this[L]=n},w=function(t,n,e){f(this,w,"DataView"),f(t,b,"DataView");var r=t[L],i=l(n);if(i<0||i>r)throw S("Wrong offset!");if(i+(e=void 0===e?r-i:h(e))>r)throw S("Wrong length!");this[j]=t,this[A]=i,this[L]=e},i&&(W(b,"byteLength","_l"),W(w,"buffer","_b"),W(w,"byteLength","_l"),W(w,"byteOffset","_o")),a(w[m],{getInt8:function(t){return G(this,1,t)[0]<<24>>24},getUint8:function(t){return G(this,1,t)[0]},getInt16:function(t){var n=G(this,2,t,arguments[1]);return(n[1]<<8|n[0])<<16>>16},getUint16:function(t){var n=G(this,2,t,arguments[1]);return n[1]<<8|n[0]},getInt32:function(t){return N(G(this,4,t,arguments[1]))},getUint32:function(t){return N(G(this,4,t,arguments[1]))>>>0},getFloat32:function(t){return T(G(this,4,t,arguments[1]),23,4)},getFloat64:function(t){return T(G(this,8,t,arguments[1]),52,8)},setInt8:function(t,n){V(this,1,t,C,n)},setUint8:function(t,n){V(this,1,t,C,n)},setInt16:function(t,n){V(this,2,t,D,n,arguments[2])},setUint16:function(t,n){V(this,2,t,D,n,arguments[2])},setInt32:function(t,n){V(this,4,t,B,n,arguments[2])},setUint32:function(t,n){V(this,4,t,B,n,arguments[2])},setFloat32:function(t,n){V(this,4,t,U,n,arguments[2])},setFloat64:function(t,n){V(this,8,t,q,n,arguments[2])}});y(b,"ArrayBuffer"),y(w,"DataView"),c(w[m],u.VIEW,!0),n.ArrayBuffer=b,n.DataView=w},function(t,n,e){"use strict";(function(n){var r=e(18),i=e(344),o={"Content-Type":"application/x-www-form-urlencoded"};function u(t,n){!r.isUndefined(t)&&r.isUndefined(t["Content-Type"])&&(t["Content-Type"]=n)}var c={adapter:function(){var t;return"undefined"!=typeof XMLHttpRequest?t=e(131):void 0!==n&&(t=e(131)),t}(),transformRequest:[function(t,n){return i(n,"Content-Type"),r.isFormData(t)||r.isArrayBuffer(t)||r.isBuffer(t)||r.isStream(t)||r.isFile(t)||r.isBlob(t)?t:r.isArrayBufferView(t)?t.buffer:r.isURLSearchParams(t)?(u(n,"application/x-www-form-urlencoded;charset=utf-8"),t.toString()):r.isObject(t)?(u(n,"application/json;charset=utf-8"),JSON.stringify(t)):t}],transformResponse:[function(t){if("string"==typeof t)try{t=JSON.parse(t)}catch(t){}return t}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(t){return t>=200&&t<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};r.forEach(["delete","get","head"],function(t){c.headers[t]={}}),r.forEach(["post","put","patch"],function(t){c.headers[t]=r.merge(o)}),t.exports=c}).call(this,e(130))},function(t,n){var e;e=function(){return this}();try{e=e||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(e=window)}t.exports=e},function(t,n,e){t.exports=!e(6)&&!e(3)(function(){return 7!=Object.defineProperty(e(66)("div"),"a",{get:function(){return 7}}).a})},function(t,n,e){n.f=e(5)},function(t,n,e){var r=e(14),i=e(15),o=e(52)(!1),u=e(68)("IE_PROTO");t.exports=function(t,n){var e,c=i(t),a=0,s=[];for(e in c)e!=u&&r(c,e)&&s.push(e);for(;n.length>a;)r(c,e=n[a++])&&(~o(s,e)||s.push(e));return s}},function(t,n,e){var r=e(7),i=e(1),o=e(35);t.exports=e(6)?Object.defineProperties:function(t,n){i(t);for(var e,u=o(n),c=u.length,a=0;c>a;)r.f(t,e=u[a++],n[e]);return t}},function(t,n,e){var r=e(15),i=e(38).f,o={}.toString,u="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return u&&"[object Window]"==o.call(t)?function(t){try{return i(t)}catch(t){return u.slice()}}(t):i(r(t))}},function(t,n,e){"use strict";var r=e(35),i=e(53),o=e(48),u=e(9),c=e(47),a=Object.assign;t.exports=!a||e(3)(function(){var t={},n={},e=Symbol(),r="abcdefghijklmnopqrst";return t[e]=7,r.split("").forEach(function(t){n[t]=t}),7!=a({},t)[e]||Object.keys(a({},n)).join("")!=r})?function(t,n){for(var e=u(t),a=arguments.length,s=1,f=i.f,l=o.f;a>s;)for(var h,p=c(arguments[s++]),v=f?r(p).concat(f(p)):r(p),d=v.length,g=0;d>g;)l.call(p,h=v[g++])&&(e[h]=p[h]);return e}:a},function(t,n,e){"use strict";var r=e(10),i=e(4),o=e(101),u=[].slice,c={};t.exports=Function.bind||function(t){var n=r(this),e=u.call(arguments,1),a=function(){var r=e.concat(u.call(arguments));return this instanceof a?function(t,n,e){if(!(n in c)){for(var r=[],i=0;i<n;i++)r[i]="a["+i+"]";c[n]=Function("F,a","return new F("+r.join(",")+")")}return c[n](t,e)}(n,r.length,r):o(n,r,t)};return i(n.prototype)&&(a.prototype=n.prototype),a}},function(t,n){t.exports=function(t,n,e){var r=void 0===e;switch(n.length){case 0:return r?t():t.call(e);case 1:return r?t(n[0]):t.call(e,n[0]);case 2:return r?t(n[0],n[1]):t.call(e,n[0],n[1]);case 3:return r?t(n[0],n[1],n[2]):t.call(e,n[0],n[1],n[2]);case 4:return r?t(n[0],n[1],n[2],n[3]):t.call(e,n[0],n[1],n[2],n[3])}return t.apply(e,n)}},function(t,n,e){var r=e(2).parseInt,i=e(44).trim,o=e(72),u=/^[-+]?0[xX]/;t.exports=8!==r(o+"08")||22!==r(o+"0x16")?function(t,n){var e=i(String(t),3);return r(e,n>>>0||(u.test(e)?16:10))}:r},function(t,n,e){var r=e(2).parseFloat,i=e(44).trim;t.exports=1/r(e(72)+"-0")!=-1/0?function(t){var n=i(String(t),3),e=r(n);return 0===e&&"-"==n.charAt(0)?-0:e}:r},function(t,n,e){var r=e(21);t.exports=function(t,n){if("number"!=typeof t&&"Number"!=r(t))throw TypeError(n);return+t}},function(t,n,e){var r=e(4),i=Math.floor;t.exports=function(t){return!r(t)&&isFinite(t)&&i(t)===t}},function(t,n){t.exports=Math.log1p||function(t){return(t=+t)>-1e-8&&t<1e-8?t-t*t/2:Math.log(1+t)}},function(t,n,e){var r=e(75),i=Math.pow,o=i(2,-52),u=i(2,-23),c=i(2,127)*(2-u),a=i(2,-126);t.exports=Math.fround||function(t){var n,e,i=Math.abs(t),s=r(t);return i<a?s*function(t){return t+1/o-1/o}(i/a/u)*a*u:(e=(n=(1+u/o)*i)-(n-i))>c||e!=e?s*(1/0):s*e}},function(t,n,e){var r=e(1);t.exports=function(t,n,e,i){try{return i?n(r(e)[0],e[1]):n(e)}catch(n){var o=t.return;throw void 0!==o&&r(o.call(t)),n}}},function(t,n,e){var r=e(10),i=e(9),o=e(47),u=e(8);t.exports=function(t,n,e,c,a){r(n);var s=i(t),f=o(s),l=u(s.length),h=a?l-1:0,p=a?-1:1;if(e<2)for(;;){if(h in f){c=f[h],h+=p;break}if(h+=p,a?h<0:l<=h)throw TypeError("Reduce of empty array with no initial value")}for(;a?h>=0:l>h;h+=p)h in f&&(c=n(c,f[h],h,s));return c}},function(t,n,e){"use strict";var r=e(9),i=e(36),o=e(8);t.exports=[].copyWithin||function(t,n){var e=r(this),u=o(e.length),c=i(t,u),a=i(n,u),s=arguments.length>2?arguments[2]:void 0,f=Math.min((void 0===s?u:i(s,u))-a,u-c),l=1;for(a<c&&c<a+f&&(l=-1,a+=f-1,c+=f-1);f-- >0;)a in e?e[c]=e[a]:delete e[c],c+=l,a+=l;return e}},function(t,n){t.exports=function(t,n){return{value:n,done:!!t}}},function(t,n,e){e(6)&&"g"!=/./g.flags&&e(7).f(RegExp.prototype,"flags",{configurable:!0,get:e(57)})},function(t,n){t.exports=function(t){try{return{e:!1,v:t()}}catch(t){return{e:!0,v:t}}}},function(t,n,e){var r=e(1),i=e(4),o=e(90);t.exports=function(t,n){if(r(t),i(n)&&n.constructor===t)return n;var e=o.f(t);return(0,e.resolve)(n),e.promise}},function(t,n,e){"use strict";var r=e(116),i=e(46);t.exports=e(61)("Map",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{get:function(t){var n=r.getEntry(i(this,"Map"),t);return n&&n.v},set:function(t,n){return r.def(i(this,"Map"),0===t?0:t,n)}},r,!0)},function(t,n,e){"use strict";var r=e(7).f,i=e(37),o=e(42),u=e(20),c=e(40),a=e(41),s=e(78),f=e(111),l=e(39),h=e(6),p=e(30).fastKey,v=e(46),d=h?"_s":"size",g=function(t,n){var e,r=p(n);if("F"!==r)return t._i[r];for(e=t._f;e;e=e.n)if(e.k==n)return e};t.exports={getConstructor:function(t,n,e,s){var f=t(function(t,r){c(t,f,n,"_i"),t._t=n,t._i=i(null),t._f=void 0,t._l=void 0,t[d]=0,void 0!=r&&a(r,e,t[s],t)});return o(f.prototype,{clear:function(){for(var t=v(this,n),e=t._i,r=t._f;r;r=r.n)r.r=!0,r.p&&(r.p=r.p.n=void 0),delete e[r.i];t._f=t._l=void 0,t[d]=0},delete:function(t){var e=v(this,n),r=g(e,t);if(r){var i=r.n,o=r.p;delete e._i[r.i],r.r=!0,o&&(o.n=i),i&&(i.p=o),e._f==r&&(e._f=i),e._l==r&&(e._l=o),e[d]--}return!!r},forEach:function(t){v(this,n);for(var e,r=u(t,arguments.length>1?arguments[1]:void 0,3);e=e?e.n:this._f;)for(r(e.v,e.k,this);e&&e.r;)e=e.p},has:function(t){return!!g(v(this,n),t)}}),h&&r(f.prototype,"size",{get:function(){return v(this,n)[d]}}),f},def:function(t,n,e){var r,i,o=g(t,n);return o?o.v=e:(t._l=o={i:i=p(n,!0),k:n,v:e,p:r=t._l,n:void 0,r:!1},t._f||(t._f=o),r&&(r.n=o),t[d]++,"F"!==i&&(t._i[i]=o)),t},getEntry:g,setStrong:function(t,n,e){s(t,n,function(t,e){this._t=v(t,n),this._k=e,this._l=void 0},function(){for(var t=this._k,n=this._l;n&&n.r;)n=n.p;return this._t&&(this._l=n=n?n.n:this._t._f)?f(0,"keys"==t?n.k:"values"==t?n.v:[n.k,n.v]):(this._t=void 0,f(1))},e?"entries":"values",!e,!0),l(n)}}},function(t,n,e){"use strict";var r=e(116),i=e(46);t.exports=e(61)("Set",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{add:function(t){return r.def(i(this,"Set"),t=0===t?0:t,t)}},r)},function(t,n,e){"use strict";var r,i=e(27)(0),o=e(12),u=e(30),c=e(99),a=e(119),s=e(4),f=e(3),l=e(46),h=u.getWeak,p=Object.isExtensible,v=a.ufstore,d={},g=function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},y={get:function(t){if(s(t)){var n=h(t);return!0===n?v(l(this,"WeakMap")).get(t):n?n[this._i]:void 0}},set:function(t,n){return a.def(l(this,"WeakMap"),t,n)}},m=t.exports=e(61)("WeakMap",g,y,a,!0,!0);f(function(){return 7!=(new m).set((Object.freeze||Object)(d),7).get(d)})&&(c((r=a.getConstructor(g,"WeakMap")).prototype,y),u.NEED=!0,i(["delete","has","get","set"],function(t){var n=m.prototype,e=n[t];o(n,t,function(n,i){if(s(n)&&!p(n)){this._f||(this._f=new r);var o=this._f[t](n,i);return"set"==t?this:o}return e.call(this,n,i)})}))},function(t,n,e){"use strict";var r=e(42),i=e(30).getWeak,o=e(1),u=e(4),c=e(40),a=e(41),s=e(27),f=e(14),l=e(46),h=s(5),p=s(6),v=0,d=function(t){return t._l||(t._l=new g)},g=function(){this.a=[]},y=function(t,n){return h(t.a,function(t){return t[0]===n})};g.prototype={get:function(t){var n=y(this,t);if(n)return n[1]},has:function(t){return!!y(this,t)},set:function(t,n){var e=y(this,t);e?e[1]=n:this.a.push([t,n])},delete:function(t){var n=p(this.a,function(n){return n[0]===t});return~n&&this.a.splice(n,1),!!~n}},t.exports={getConstructor:function(t,n,e,o){var s=t(function(t,r){c(t,s,n,"_i"),t._t=n,t._i=v++,t._l=void 0,void 0!=r&&a(r,e,t[o],t)});return r(s.prototype,{delete:function(t){if(!u(t))return!1;var e=i(t);return!0===e?d(l(this,n)).delete(t):e&&f(e,this._i)&&delete e[this._i]},has:function(t){if(!u(t))return!1;var e=i(t);return!0===e?d(l(this,n)).has(t):e&&f(e,this._i)}}),s},def:function(t,n,e){var r=i(o(n),!0);return!0===r?d(t).set(n,e):r[t._i]=e,t},ufstore:d}},function(t,n,e){var r=e(25),i=e(8);t.exports=function(t){if(void 0===t)return 0;var n=r(t),e=i(n);if(n!==e)throw RangeError("Wrong length!");return e}},function(t,n,e){var r=e(38),i=e(53),o=e(1),u=e(2).Reflect;t.exports=u&&u.ownKeys||function(t){var n=r.f(o(t)),e=i.f;return e?n.concat(e(t)):n}},function(t,n,e){"use strict";var r=e(54),i=e(4),o=e(8),u=e(20),c=e(5)("isConcatSpreadable");t.exports=function t(n,e,a,s,f,l,h,p){for(var v,d,g=f,y=0,m=!!h&&u(h,p,3);y<s;){if(y in a){if(v=m?m(a[y],y,e):a[y],d=!1,i(v)&&(d=void 0!==(d=v[c])?!!d:r(v)),d&&l>0)g=t(n,e,v,o(v.length),g,l-1)-1;else{if(g>=9007199254740991)throw TypeError();n[g]=v}g++}y++}return g}},function(t,n,e){var r=e(8),i=e(74),o=e(24);t.exports=function(t,n,e,u){var c=String(o(t)),a=c.length,s=void 0===e?" ":String(e),f=r(n);if(f<=a||""==s)return c;var l=f-a,h=i.call(s,Math.ceil(l/s.length));return h.length>l&&(h=h.slice(0,l)),u?h+c:c+h}},function(t,n,e){var r=e(35),i=e(15),o=e(48).f;t.exports=function(t){return function(n){for(var e,u=i(n),c=r(u),a=c.length,s=0,f=[];a>s;)o.call(u,e=c[s++])&&f.push(t?[e,u[e]]:u[e]);return f}}},function(t,n,e){var r=e(49),i=e(126);t.exports=function(t){return function(){if(r(this)!=t)throw TypeError(t+"#toJSON isn't generic");return i(this)}}},function(t,n,e){var r=e(41);t.exports=function(t,n){var e=[];return r(t,!1,e.push,e,n),e}},function(t,n){t.exports=Math.scale||function(t,n,e,r,i){return 0===arguments.length||t!=t||n!=n||e!=e||r!=r||i!=i?NaN:t===1/0||t===-1/0?t:(t-n)*(i-r)/(e-n)+r}},function(t,n,e){t.exports=e(341)},function(t,n,e){"use strict";t.exports=function(t,n){return function(){for(var e=new Array(arguments.length),r=0;r<e.length;r++)e[r]=arguments[r];return t.apply(n,e)}}},function(t,n){var e,r,i=t.exports={};function o(){throw new Error("setTimeout has not been defined")}function u(){throw new Error("clearTimeout has not been defined")}function c(t){if(e===setTimeout)return setTimeout(t,0);if((e===o||!e)&&setTimeout)return e=setTimeout,setTimeout(t,0);try{return e(t,0)}catch(n){try{return e.call(null,t,0)}catch(n){return e.call(this,t,0)}}}!function(){try{e="function"==typeof setTimeout?setTimeout:o}catch(t){e=o}try{r="function"==typeof clearTimeout?clearTimeout:u}catch(t){r=u}}();var a,s=[],f=!1,l=-1;function h(){f&&a&&(f=!1,a.length?s=a.concat(s):l=-1,s.length&&p())}function p(){if(!f){var t=c(h);f=!0;for(var n=s.length;n;){for(a=s,s=[];++l<n;)a&&a[l].run();l=-1,n=s.length}a=null,f=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===u||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(n){try{return r.call(null,t)}catch(n){return r.call(this,t)}}}(t)}}function v(t,n){this.fun=t,this.array=n}function d(){}i.nextTick=function(t){var n=new Array(arguments.length-1);if(arguments.length>1)for(var e=1;e<arguments.length;e++)n[e-1]=arguments[e];s.push(new v(t,n)),1!==s.length||f||c(p)},v.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=d,i.addListener=d,i.once=d,i.off=d,i.removeListener=d,i.removeAllListeners=d,i.emit=d,i.prependListener=d,i.prependOnceListener=d,i.listeners=function(t){return[]},i.binding=function(t){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(t){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(t,n,e){"use strict";var r=e(18),i=e(345),o=e(347),u=e(348),c=e(349),a=e(132),s="undefined"!=typeof window&&window.btoa&&window.btoa.bind(window)||e(350);t.exports=function(t){return new Promise(function(n,f){var l=t.data,h=t.headers;r.isFormData(l)&&delete h["Content-Type"];var p=new XMLHttpRequest,v="onreadystatechange",d=!1;if("undefined"==typeof window||!window.XDomainRequest||"withCredentials"in p||c(t.url)||(p=new window.XDomainRequest,v="onload",d=!0,p.onprogress=function(){},p.ontimeout=function(){}),t.auth){var g=t.auth.username||"",y=t.auth.password||"";h.Authorization="Basic "+s(g+":"+y)}if(p.open(t.method.toUpperCase(),o(t.url,t.params,t.paramsSerializer),!0),p.timeout=t.timeout,p[v]=function(){if(p&&(4===p.readyState||d)&&(0!==p.status||p.responseURL&&0===p.responseURL.indexOf("file:"))){var e="getAllResponseHeaders"in p?u(p.getAllResponseHeaders()):null,r={data:t.responseType&&"text"!==t.responseType?p.response:p.responseText,status:1223===p.status?204:p.status,statusText:1223===p.status?"No Content":p.statusText,headers:e,config:t,request:p};i(n,f,r),p=null}},p.onerror=function(){f(a("Network Error",t,null,p)),p=null},p.ontimeout=function(){f(a("timeout of "+t.timeout+"ms exceeded",t,"ECONNABORTED",p)),p=null},r.isStandardBrowserEnv()){var m=e(351),_=(t.withCredentials||c(t.url))&&t.xsrfCookieName?m.read(t.xsrfCookieName):void 0;_&&(h[t.xsrfHeaderName]=_)}if("setRequestHeader"in p&&r.forEach(h,function(t,n){void 0===l&&"content-type"===n.toLowerCase()?delete h[n]:p.setRequestHeader(n,t)}),t.withCredentials&&(p.withCredentials=!0),t.responseType)try{p.responseType=t.responseType}catch(n){if("json"!==t.responseType)throw n}"function"==typeof t.onDownloadProgress&&p.addEventListener("progress",t.onDownloadProgress),"function"==typeof t.onUploadProgress&&p.upload&&p.upload.addEventListener("progress",t.onUploadProgress),t.cancelToken&&t.cancelToken.promise.then(function(t){p&&(p.abort(),f(t),p=null)}),void 0===l&&(l=null),p.send(l)})}},function(t,n,e){"use strict";var r=e(346);t.exports=function(t,n,e,i,o){var u=new Error(t);return r(u,n,e,i,o)}},function(t,n,e){"use strict";t.exports=function(t){return!(!t||!t.__CANCEL__)}},function(t,n,e){"use strict";function r(t){this.message=t}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,t.exports=r},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.clearResults=n.clearInput=n.renderResults=n.cutTitle=n.getInput=void 0;var r=e(50),i=(n.getInput=function(){return r.elements.searchInput.value},n.cutTitle=function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:17,e=[];return t.split(" ").reduce(function(t,r){return t<n&&e.push(r),t+r.length},0),e.join(" ")+" ..."}),o=function(t,n){return'<button class="btn-inline results__btn--'+n+'" data-goto='+("prev"===n?t-1:t+1)+" >\n                    <span>Page "+("prev"===n?t-1:t+1)+'</span>\n                    <svg class="search__icon">\n                        <use href="img/icons.svg#icon-triangle-'+("prev"===n?"left":"right")+'"></use>\n                    </svg>\n                    \n                </button>'};n.renderResults=function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:10,u=(n-1)*e,c=n*e;t.slice(u,c).forEach(function(t){return function(t){var n='\n    <li>\n        <a class="results__link" href="#'+t.recipe_id+'">\n            <figure class="results__fig">\n                <img src="'+t.image_url+'" alt="'+t.title+'">\n            </figure>\n            <div class="results__data">\n                <h4 class="results__name">'+i(t.title,13)+'</h4>\n                <p class="results__author">'+t.publisher+"</p>\n            </div>\n        </a>\n    </li>\n  ";r.elements.renderRecipesList.insertAdjacentHTML("beforeend",n)}(t)}),function(t,n,e){var i=Math.ceil(n/e),u=void 0;1===t&&i>1?u=o(t,"next"):t===i&&i>1?u=o(t,"prev"):t<i&&(u=o(t,"prev")+"\n              "+o(t,"next")),r.elements.paginPages.insertAdjacentHTML("afterbegin",u)}(n,t.length,e)},n.clearInput=function(){return r.elements.searchInput.value=""},n.clearResults=function(){r.elements.renderRecipesList.innerHTML="",r.elements.paginPages.innerHTML=""}},function(t,n,e){e(137),t.exports=e(339)},function(t,n,e){"use strict";(function(t){if(e(138),e(335),e(336),t._babelPolyfill)throw new Error("only one instance of babel-polyfill is allowed");t._babelPolyfill=!0;var n="defineProperty";function r(t,e,r){t[e]||Object[n](t,e,{writable:!0,configurable:!0,value:r})}r(String.prototype,"padLeft","".padStart),r(String.prototype,"padRight","".padEnd),"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function(t){[][t]&&r(Array,t,Function.call.bind([][t]))})}).call(this,e(93))},function(t,n,e){e(139),e(141),e(142),e(143),e(144),e(145),e(146),e(147),e(148),e(149),e(150),e(151),e(152),e(153),e(154),e(155),e(157),e(158),e(159),e(160),e(161),e(162),e(163),e(164),e(165),e(166),e(167),e(168),e(169),e(170),e(171),e(172),e(173),e(174),e(175),e(176),e(177),e(178),e(179),e(180),e(181),e(182),e(183),e(184),e(185),e(186),e(187),e(188),e(189),e(190),e(191),e(192),e(193),e(194),e(195),e(196),e(197),e(198),e(199),e(200),e(201),e(202),e(203),e(204),e(205),e(206),e(207),e(208),e(209),e(210),e(211),e(212),e(213),e(214),e(215),e(216),e(217),e(219),e(220),e(222),e(223),e(224),e(225),e(226),e(227),e(228),e(230),e(231),e(232),e(233),e(234),e(235),e(236),e(237),e(238),e(239),e(240),e(241),e(242),e(87),e(243),e(244),e(112),e(245),e(246),e(247),e(248),e(249),e(115),e(117),e(118),e(250),e(251),e(252),e(253),e(254),e(255),e(256),e(257),e(258),e(259),e(260),e(261),e(262),e(263),e(264),e(265),e(266),e(267),e(268),e(269),e(270),e(271),e(272),e(273),e(274),e(275),e(276),e(277),e(278),e(279),e(280),e(281),e(282),e(283),e(284),e(285),e(286),e(287),e(288),e(289),e(290),e(291),e(292),e(293),e(294),e(295),e(296),e(297),e(298),e(299),e(300),e(301),e(302),e(303),e(304),e(305),e(306),e(307),e(308),e(309),e(310),e(311),e(312),e(313),e(314),e(315),e(316),e(317),e(318),e(319),e(320),e(321),e(322),e(323),e(324),e(325),e(326),e(327),e(328),e(329),e(330),e(331),e(332),e(333),e(334),t.exports=e(19)},function(t,n,e){"use strict";var r=e(2),i=e(14),o=e(6),u=e(0),c=e(12),a=e(30).KEY,s=e(3),f=e(51),l=e(43),h=e(34),p=e(5),v=e(95),d=e(67),g=e(140),y=e(54),m=e(1),_=e(4),b=e(15),w=e(23),x=e(33),S=e(37),E=e(98),O=e(16),k=e(7),M=e(35),P=O.f,F=k.f,I=E.f,j=r.Symbol,L=r.JSON,A=L&&L.stringify,R=p("_hidden"),T=p("toPrimitive"),N={}.propertyIsEnumerable,C=f("symbol-registry"),D=f("symbols"),B=f("op-symbols"),q=Object.prototype,U="function"==typeof j,W=r.QObject,G=!W||!W.prototype||!W.prototype.findChild,V=o&&s(function(){return 7!=S(F({},"a",{get:function(){return F(this,"a",{value:7}).a}})).a})?function(t,n,e){var r=P(q,n);r&&delete q[n],F(t,n,e),r&&t!==q&&F(q,n,r)}:F,z=function(t){var n=D[t]=S(j.prototype);return n._k=t,n},H=U&&"symbol"==typeof j.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof j},J=function(t,n,e){return t===q&&J(B,n,e),m(t),n=w(n,!0),m(e),i(D,n)?(e.enumerable?(i(t,R)&&t[R][n]&&(t[R][n]=!1),e=S(e,{enumerable:x(0,!1)})):(i(t,R)||F(t,R,x(1,{})),t[R][n]=!0),V(t,n,e)):F(t,n,e)},Y=function(t,n){m(t);for(var e,r=g(n=b(n)),i=0,o=r.length;o>i;)J(t,e=r[i++],n[e]);return t},K=function(t){var n=N.call(this,t=w(t,!0));return!(this===q&&i(D,t)&&!i(B,t))&&(!(n||!i(this,t)||!i(D,t)||i(this,R)&&this[R][t])||n)},X=function(t,n){if(t=b(t),n=w(n,!0),t!==q||!i(D,n)||i(B,n)){var e=P(t,n);return!e||!i(D,n)||i(t,R)&&t[R][n]||(e.enumerable=!0),e}},$=function(t){for(var n,e=I(b(t)),r=[],o=0;e.length>o;)i(D,n=e[o++])||n==R||n==a||r.push(n);return r},Q=function(t){for(var n,e=t===q,r=I(e?B:b(t)),o=[],u=0;r.length>u;)!i(D,n=r[u++])||e&&!i(q,n)||o.push(D[n]);return o};U||(c((j=function(){if(this instanceof j)throw TypeError("Symbol is not a constructor!");var t=h(arguments.length>0?arguments[0]:void 0),n=function(e){this===q&&n.call(B,e),i(this,R)&&i(this[R],t)&&(this[R][t]=!1),V(this,t,x(1,e))};return o&&G&&V(q,t,{configurable:!0,set:n}),z(t)}).prototype,"toString",function(){return this._k}),O.f=X,k.f=J,e(38).f=E.f=$,e(48).f=K,e(53).f=Q,o&&!e(31)&&c(q,"propertyIsEnumerable",K,!0),v.f=function(t){return z(p(t))}),u(u.G+u.W+u.F*!U,{Symbol:j});for(var Z="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),tt=0;Z.length>tt;)p(Z[tt++]);for(var nt=M(p.store),et=0;nt.length>et;)d(nt[et++]);u(u.S+u.F*!U,"Symbol",{for:function(t){return i(C,t+="")?C[t]:C[t]=j(t)},keyFor:function(t){if(!H(t))throw TypeError(t+" is not a symbol!");for(var n in C)if(C[n]===t)return n},useSetter:function(){G=!0},useSimple:function(){G=!1}}),u(u.S+u.F*!U,"Object",{create:function(t,n){return void 0===n?S(t):Y(S(t),n)},defineProperty:J,defineProperties:Y,getOwnPropertyDescriptor:X,getOwnPropertyNames:$,getOwnPropertySymbols:Q}),L&&u(u.S+u.F*(!U||s(function(){var t=j();return"[null]"!=A([t])||"{}"!=A({a:t})||"{}"!=A(Object(t))})),"JSON",{stringify:function(t){for(var n,e,r=[t],i=1;arguments.length>i;)r.push(arguments[i++]);if(e=n=r[1],(_(n)||void 0!==t)&&!H(t))return y(n)||(n=function(t,n){if("function"==typeof e&&(n=e.call(this,t,n)),!H(n))return n}),r[1]=n,A.apply(L,r)}}),j.prototype[T]||e(11)(j.prototype,T,j.prototype.valueOf),l(j,"Symbol"),l(Math,"Math",!0),l(r.JSON,"JSON",!0)},function(t,n,e){var r=e(35),i=e(53),o=e(48);t.exports=function(t){var n=r(t),e=i.f;if(e)for(var u,c=e(t),a=o.f,s=0;c.length>s;)a.call(t,u=c[s++])&&n.push(u);return n}},function(t,n,e){var r=e(0);r(r.S,"Object",{create:e(37)})},function(t,n,e){var r=e(0);r(r.S+r.F*!e(6),"Object",{defineProperty:e(7).f})},function(t,n,e){var r=e(0);r(r.S+r.F*!e(6),"Object",{defineProperties:e(97)})},function(t,n,e){var r=e(15),i=e(16).f;e(26)("getOwnPropertyDescriptor",function(){return function(t,n){return i(r(t),n)}})},function(t,n,e){var r=e(9),i=e(17);e(26)("getPrototypeOf",function(){return function(t){return i(r(t))}})},function(t,n,e){var r=e(9),i=e(35);e(26)("keys",function(){return function(t){return i(r(t))}})},function(t,n,e){e(26)("getOwnPropertyNames",function(){return e(98).f})},function(t,n,e){var r=e(4),i=e(30).onFreeze;e(26)("freeze",function(t){return function(n){return t&&r(n)?t(i(n)):n}})},function(t,n,e){var r=e(4),i=e(30).onFreeze;e(26)("seal",function(t){return function(n){return t&&r(n)?t(i(n)):n}})},function(t,n,e){var r=e(4),i=e(30).onFreeze;e(26)("preventExtensions",function(t){return function(n){return t&&r(n)?t(i(n)):n}})},function(t,n,e){var r=e(4);e(26)("isFrozen",function(t){return function(n){return!r(n)||!!t&&t(n)}})},function(t,n,e){var r=e(4);e(26)("isSealed",function(t){return function(n){return!r(n)||!!t&&t(n)}})},function(t,n,e){var r=e(4);e(26)("isExtensible",function(t){return function(n){return!!r(n)&&(!t||t(n))}})},function(t,n,e){var r=e(0);r(r.S+r.F,"Object",{assign:e(99)})},function(t,n,e){var r=e(0);r(r.S,"Object",{is:e(156)})},function(t,n){t.exports=Object.is||function(t,n){return t===n?0!==t||1/t==1/n:t!=t&&n!=n}},function(t,n,e){var r=e(0);r(r.S,"Object",{setPrototypeOf:e(71).set})},function(t,n,e){"use strict";var r=e(49),i={};i[e(5)("toStringTag")]="z",i+""!="[object z]"&&e(12)(Object.prototype,"toString",function(){return"[object "+r(this)+"]"},!0)},function(t,n,e){var r=e(0);r(r.P,"Function",{bind:e(100)})},function(t,n,e){var r=e(7).f,i=Function.prototype,o=/^\s*function ([^ (]*)/;"name"in i||e(6)&&r(i,"name",{configurable:!0,get:function(){try{return(""+this).match(o)[1]}catch(t){return""}}})},function(t,n,e){"use strict";var r=e(4),i=e(17),o=e(5)("hasInstance"),u=Function.prototype;o in u||e(7).f(u,o,{value:function(t){if("function"!=typeof this||!r(t))return!1;if(!r(this.prototype))return t instanceof this;for(;t=i(t);)if(this.prototype===t)return!0;return!1}})},function(t,n,e){var r=e(0),i=e(102);r(r.G+r.F*(parseInt!=i),{parseInt:i})},function(t,n,e){var r=e(0),i=e(103);r(r.G+r.F*(parseFloat!=i),{parseFloat:i})},function(t,n,e){"use strict";var r=e(2),i=e(14),o=e(21),u=e(73),c=e(23),a=e(3),s=e(38).f,f=e(16).f,l=e(7).f,h=e(44).trim,p=r.Number,v=p,d=p.prototype,g="Number"==o(e(37)(d)),y="trim"in String.prototype,m=function(t){var n=c(t,!1);if("string"==typeof n&&n.length>2){var e,r,i,o=(n=y?n.trim():h(n,3)).charCodeAt(0);if(43===o||45===o){if(88===(e=n.charCodeAt(2))||120===e)return NaN}else if(48===o){switch(n.charCodeAt(1)){case 66:case 98:r=2,i=49;break;case 79:case 111:r=8,i=55;break;default:return+n}for(var u,a=n.slice(2),s=0,f=a.length;s<f;s++)if((u=a.charCodeAt(s))<48||u>i)return NaN;return parseInt(a,r)}}return+n};if(!p(" 0o1")||!p("0b1")||p("+0x1")){p=function(t){var n=arguments.length<1?0:t,e=this;return e instanceof p&&(g?a(function(){d.valueOf.call(e)}):"Number"!=o(e))?u(new v(m(n)),e,p):m(n)};for(var _,b=e(6)?s(v):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),w=0;b.length>w;w++)i(v,_=b[w])&&!i(p,_)&&l(p,_,f(v,_));p.prototype=d,d.constructor=p,e(12)(r,"Number",p)}},function(t,n,e){"use strict";var r=e(0),i=e(25),o=e(104),u=e(74),c=1..toFixed,a=Math.floor,s=[0,0,0,0,0,0],f="Number.toFixed: incorrect invocation!",l=function(t,n){for(var e=-1,r=n;++e<6;)r+=t*s[e],s[e]=r%1e7,r=a(r/1e7)},h=function(t){for(var n=6,e=0;--n>=0;)e+=s[n],s[n]=a(e/t),e=e%t*1e7},p=function(){for(var t=6,n="";--t>=0;)if(""!==n||0===t||0!==s[t]){var e=String(s[t]);n=""===n?e:n+u.call("0",7-e.length)+e}return n},v=function(t,n,e){return 0===n?e:n%2==1?v(t,n-1,e*t):v(t*t,n/2,e)};r(r.P+r.F*(!!c&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0))||!e(3)(function(){c.call({})})),"Number",{toFixed:function(t){var n,e,r,c,a=o(this,f),s=i(t),d="",g="0";if(s<0||s>20)throw RangeError(f);if(a!=a)return"NaN";if(a<=-1e21||a>=1e21)return String(a);if(a<0&&(d="-",a=-a),a>1e-21)if(e=(n=function(t){for(var n=0,e=t;e>=4096;)n+=12,e/=4096;for(;e>=2;)n+=1,e/=2;return n}(a*v(2,69,1))-69)<0?a*v(2,-n,1):a/v(2,n,1),e*=4503599627370496,(n=52-n)>0){for(l(0,e),r=s;r>=7;)l(1e7,0),r-=7;for(l(v(10,r,1),0),r=n-1;r>=23;)h(1<<23),r-=23;h(1<<r),l(1,1),h(2),g=p()}else l(0,e),l(1<<-n,0),g=p()+u.call("0",s);return g=s>0?d+((c=g.length)<=s?"0."+u.call("0",s-c)+g:g.slice(0,c-s)+"."+g.slice(c-s)):d+g}})},function(t,n,e){"use strict";var r=e(0),i=e(3),o=e(104),u=1..toPrecision;r(r.P+r.F*(i(function(){return"1"!==u.call(1,void 0)})||!i(function(){u.call({})})),"Number",{toPrecision:function(t){var n=o(this,"Number#toPrecision: incorrect invocation!");return void 0===t?u.call(n):u.call(n,t)}})},function(t,n,e){var r=e(0);r(r.S,"Number",{EPSILON:Math.pow(2,-52)})},function(t,n,e){var r=e(0),i=e(2).isFinite;r(r.S,"Number",{isFinite:function(t){return"number"==typeof t&&i(t)}})},function(t,n,e){var r=e(0);r(r.S,"Number",{isInteger:e(105)})},function(t,n,e){var r=e(0);r(r.S,"Number",{isNaN:function(t){return t!=t}})},function(t,n,e){var r=e(0),i=e(105),o=Math.abs;r(r.S,"Number",{isSafeInteger:function(t){return i(t)&&o(t)<=9007199254740991}})},function(t,n,e){var r=e(0);r(r.S,"Number",{MAX_SAFE_INTEGER:9007199254740991})},function(t,n,e){var r=e(0);r(r.S,"Number",{MIN_SAFE_INTEGER:-9007199254740991})},function(t,n,e){var r=e(0),i=e(103);r(r.S+r.F*(Number.parseFloat!=i),"Number",{parseFloat:i})},function(t,n,e){var r=e(0),i=e(102);r(r.S+r.F*(Number.parseInt!=i),"Number",{parseInt:i})},function(t,n,e){var r=e(0),i=e(106),o=Math.sqrt,u=Math.acosh;r(r.S+r.F*!(u&&710==Math.floor(u(Number.MAX_VALUE))&&u(1/0)==1/0),"Math",{acosh:function(t){return(t=+t)<1?NaN:t>94906265.62425156?Math.log(t)+Math.LN2:i(t-1+o(t-1)*o(t+1))}})},function(t,n,e){var r=e(0),i=Math.asinh;r(r.S+r.F*!(i&&1/i(0)>0),"Math",{asinh:function t(n){return isFinite(n=+n)&&0!=n?n<0?-t(-n):Math.log(n+Math.sqrt(n*n+1)):n}})},function(t,n,e){var r=e(0),i=Math.atanh;r(r.S+r.F*!(i&&1/i(-0)<0),"Math",{atanh:function(t){return 0==(t=+t)?t:Math.log((1+t)/(1-t))/2}})},function(t,n,e){var r=e(0),i=e(75);r(r.S,"Math",{cbrt:function(t){return i(t=+t)*Math.pow(Math.abs(t),1/3)}})},function(t,n,e){var r=e(0);r(r.S,"Math",{clz32:function(t){return(t>>>=0)?31-Math.floor(Math.log(t+.5)*Math.LOG2E):32}})},function(t,n,e){var r=e(0),i=Math.exp;r(r.S,"Math",{cosh:function(t){return(i(t=+t)+i(-t))/2}})},function(t,n,e){var r=e(0),i=e(76);r(r.S+r.F*(i!=Math.expm1),"Math",{expm1:i})},function(t,n,e){var r=e(0);r(r.S,"Math",{fround:e(107)})},function(t,n,e){var r=e(0),i=Math.abs;r(r.S,"Math",{hypot:function(t,n){for(var e,r,o=0,u=0,c=arguments.length,a=0;u<c;)a<(e=i(arguments[u++]))?(o=o*(r=a/e)*r+1,a=e):o+=e>0?(r=e/a)*r:e;return a===1/0?1/0:a*Math.sqrt(o)}})},function(t,n,e){var r=e(0),i=Math.imul;r(r.S+r.F*e(3)(function(){return-5!=i(4294967295,5)||2!=i.length}),"Math",{imul:function(t,n){var e=+t,r=+n,i=65535&e,o=65535&r;return 0|i*o+((65535&e>>>16)*o+i*(65535&r>>>16)<<16>>>0)}})},function(t,n,e){var r=e(0);r(r.S,"Math",{log10:function(t){return Math.log(t)*Math.LOG10E}})},function(t,n,e){var r=e(0);r(r.S,"Math",{log1p:e(106)})},function(t,n,e){var r=e(0);r(r.S,"Math",{log2:function(t){return Math.log(t)/Math.LN2}})},function(t,n,e){var r=e(0);r(r.S,"Math",{sign:e(75)})},function(t,n,e){var r=e(0),i=e(76),o=Math.exp;r(r.S+r.F*e(3)(function(){return-2e-17!=!Math.sinh(-2e-17)}),"Math",{sinh:function(t){return Math.abs(t=+t)<1?(i(t)-i(-t))/2:(o(t-1)-o(-t-1))*(Math.E/2)}})},function(t,n,e){var r=e(0),i=e(76),o=Math.exp;r(r.S,"Math",{tanh:function(t){var n=i(t=+t),e=i(-t);return n==1/0?1:e==1/0?-1:(n-e)/(o(t)+o(-t))}})},function(t,n,e){var r=e(0);r(r.S,"Math",{trunc:function(t){return(t>0?Math.floor:Math.ceil)(t)}})},function(t,n,e){var r=e(0),i=e(36),o=String.fromCharCode,u=String.fromCodePoint;r(r.S+r.F*(!!u&&1!=u.length),"String",{fromCodePoint:function(t){for(var n,e=[],r=arguments.length,u=0;r>u;){if(n=+arguments[u++],i(n,1114111)!==n)throw RangeError(n+" is not a valid code point");e.push(n<65536?o(n):o(55296+((n-=65536)>>10),n%1024+56320))}return e.join("")}})},function(t,n,e){var r=e(0),i=e(15),o=e(8);r(r.S,"String",{raw:function(t){for(var n=i(t.raw),e=o(n.length),r=arguments.length,u=[],c=0;e>c;)u.push(String(n[c++])),c<r&&u.push(String(arguments[c]));return u.join("")}})},function(t,n,e){"use strict";e(44)("trim",function(t){return function(){return t(this,3)}})},function(t,n,e){"use strict";var r=e(77)(!0);e(78)(String,"String",function(t){this._t=String(t),this._i=0},function(){var t,n=this._t,e=this._i;return e>=n.length?{value:void 0,done:!0}:(t=r(n,e),this._i+=t.length,{value:t,done:!1})})},function(t,n,e){"use strict";var r=e(0),i=e(77)(!1);r(r.P,"String",{codePointAt:function(t){return i(this,t)}})},function(t,n,e){"use strict";var r=e(0),i=e(8),o=e(80),u="".endsWith;r(r.P+r.F*e(81)("endsWith"),"String",{endsWith:function(t){var n=o(this,t,"endsWith"),e=arguments.length>1?arguments[1]:void 0,r=i(n.length),c=void 0===e?r:Math.min(i(e),r),a=String(t);return u?u.call(n,a,c):n.slice(c-a.length,c)===a}})},function(t,n,e){"use strict";var r=e(0),i=e(80);r(r.P+r.F*e(81)("includes"),"String",{includes:function(t){return!!~i(this,t,"includes").indexOf(t,arguments.length>1?arguments[1]:void 0)}})},function(t,n,e){var r=e(0);r(r.P,"String",{repeat:e(74)})},function(t,n,e){"use strict";var r=e(0),i=e(8),o=e(80),u="".startsWith;r(r.P+r.F*e(81)("startsWith"),"String",{startsWith:function(t){var n=o(this,t,"startsWith"),e=i(Math.min(arguments.length>1?arguments[1]:void 0,n.length)),r=String(t);return u?u.call(n,r,e):n.slice(e,e+r.length)===r}})},function(t,n,e){"use strict";e(13)("anchor",function(t){return function(n){return t(this,"a","name",n)}})},function(t,n,e){"use strict";e(13)("big",function(t){return function(){return t(this,"big","","")}})},function(t,n,e){"use strict";e(13)("blink",function(t){return function(){return t(this,"blink","","")}})},function(t,n,e){"use strict";e(13)("bold",function(t){return function(){return t(this,"b","","")}})},function(t,n,e){"use strict";e(13)("fixed",function(t){return function(){return t(this,"tt","","")}})},function(t,n,e){"use strict";e(13)("fontcolor",function(t){return function(n){return t(this,"font","color",n)}})},function(t,n,e){"use strict";e(13)("fontsize",function(t){return function(n){return t(this,"font","size",n)}})},function(t,n,e){"use strict";e(13)("italics",function(t){return function(){return t(this,"i","","")}})},function(t,n,e){"use strict";e(13)("link",function(t){return function(n){return t(this,"a","href",n)}})},function(t,n,e){"use strict";e(13)("small",function(t){return function(){return t(this,"small","","")}})},function(t,n,e){"use strict";e(13)("strike",function(t){return function(){return t(this,"strike","","")}})},function(t,n,e){"use strict";e(13)("sub",function(t){return function(){return t(this,"sub","","")}})},function(t,n,e){"use strict";e(13)("sup",function(t){return function(){return t(this,"sup","","")}})},function(t,n,e){var r=e(0);r(r.S,"Date",{now:function(){return(new Date).getTime()}})},function(t,n,e){"use strict";var r=e(0),i=e(9),o=e(23);r(r.P+r.F*e(3)(function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})}),"Date",{toJSON:function(t){var n=i(this),e=o(n);return"number"!=typeof e||isFinite(e)?n.toISOString():null}})},function(t,n,e){var r=e(0),i=e(218);r(r.P+r.F*(Date.prototype.toISOString!==i),"Date",{toISOString:i})},function(t,n,e){"use strict";var r=e(3),i=Date.prototype.getTime,o=Date.prototype.toISOString,u=function(t){return t>9?t:"0"+t};t.exports=r(function(){return"0385-07-25T07:06:39.999Z"!=o.call(new Date(-5e13-1))})||!r(function(){o.call(new Date(NaN))})?function(){if(!isFinite(i.call(this)))throw RangeError("Invalid time value");var t=this,n=t.getUTCFullYear(),e=t.getUTCMilliseconds(),r=n<0?"-":n>9999?"+":"";return r+("00000"+Math.abs(n)).slice(r?-6:-4)+"-"+u(t.getUTCMonth()+1)+"-"+u(t.getUTCDate())+"T"+u(t.getUTCHours())+":"+u(t.getUTCMinutes())+":"+u(t.getUTCSeconds())+"."+(e>99?e:"0"+u(e))+"Z"}:o},function(t,n,e){var r=Date.prototype,i=r.toString,o=r.getTime;new Date(NaN)+""!="Invalid Date"&&e(12)(r,"toString",function(){var t=o.call(this);return t==t?i.call(this):"Invalid Date"})},function(t,n,e){var r=e(5)("toPrimitive"),i=Date.prototype;r in i||e(11)(i,r,e(221))},function(t,n,e){"use strict";var r=e(1),i=e(23);t.exports=function(t){if("string"!==t&&"number"!==t&&"default"!==t)throw TypeError("Incorrect hint");return i(r(this),"number"!=t)}},function(t,n,e){var r=e(0);r(r.S,"Array",{isArray:e(54)})},function(t,n,e){"use strict";var r=e(20),i=e(0),o=e(9),u=e(108),c=e(82),a=e(8),s=e(83),f=e(84);i(i.S+i.F*!e(56)(function(t){Array.from(t)}),"Array",{from:function(t){var n,e,i,l,h=o(t),p="function"==typeof this?this:Array,v=arguments.length,d=v>1?arguments[1]:void 0,g=void 0!==d,y=0,m=f(h);if(g&&(d=r(d,v>2?arguments[2]:void 0,2)),void 0==m||p==Array&&c(m))for(e=new p(n=a(h.length));n>y;y++)s(e,y,g?d(h[y],y):h[y]);else for(l=m.call(h),e=new p;!(i=l.next()).done;y++)s(e,y,g?u(l,d,[i.value,y],!0):i.value);return e.length=y,e}})},function(t,n,e){"use strict";var r=e(0),i=e(83);r(r.S+r.F*e(3)(function(){function t(){}return!(Array.of.call(t)instanceof t)}),"Array",{of:function(){for(var t=0,n=arguments.length,e=new("function"==typeof this?this:Array)(n);n>t;)i(e,t,arguments[t++]);return e.length=n,e}})},function(t,n,e){"use strict";var r=e(0),i=e(15),o=[].join;r(r.P+r.F*(e(47)!=Object||!e(22)(o)),"Array",{join:function(t){return o.call(i(this),void 0===t?",":t)}})},function(t,n,e){"use strict";var r=e(0),i=e(70),o=e(21),u=e(36),c=e(8),a=[].slice;r(r.P+r.F*e(3)(function(){i&&a.call(i)}),"Array",{slice:function(t,n){var e=c(this.length),r=o(this);if(n=void 0===n?e:n,"Array"==r)return a.call(this,t,n);for(var i=u(t,e),s=u(n,e),f=c(s-i),l=new Array(f),h=0;h<f;h++)l[h]="String"==r?this.charAt(i+h):this[i+h];return l}})},function(t,n,e){"use strict";var r=e(0),i=e(10),o=e(9),u=e(3),c=[].sort,a=[1,2,3];r(r.P+r.F*(u(function(){a.sort(void 0)})||!u(function(){a.sort(null)})||!e(22)(c)),"Array",{sort:function(t){return void 0===t?c.call(o(this)):c.call(o(this),i(t))}})},function(t,n,e){"use strict";var r=e(0),i=e(27)(0),o=e(22)([].forEach,!0);r(r.P+r.F*!o,"Array",{forEach:function(t){return i(this,t,arguments[1])}})},function(t,n,e){var r=e(4),i=e(54),o=e(5)("species");t.exports=function(t){var n;return i(t)&&("function"!=typeof(n=t.constructor)||n!==Array&&!i(n.prototype)||(n=void 0),r(n)&&null===(n=n[o])&&(n=void 0)),void 0===n?Array:n}},function(t,n,e){"use strict";var r=e(0),i=e(27)(1);r(r.P+r.F*!e(22)([].map,!0),"Array",{map:function(t){return i(this,t,arguments[1])}})},function(t,n,e){"use strict";var r=e(0),i=e(27)(2);r(r.P+r.F*!e(22)([].filter,!0),"Array",{filter:function(t){return i(this,t,arguments[1])}})},function(t,n,e){"use strict";var r=e(0),i=e(27)(3);r(r.P+r.F*!e(22)([].some,!0),"Array",{some:function(t){return i(this,t,arguments[1])}})},function(t,n,e){"use strict";var r=e(0),i=e(27)(4);r(r.P+r.F*!e(22)([].every,!0),"Array",{every:function(t){return i(this,t,arguments[1])}})},function(t,n,e){"use strict";var r=e(0),i=e(109);r(r.P+r.F*!e(22)([].reduce,!0),"Array",{reduce:function(t){return i(this,t,arguments.length,arguments[1],!1)}})},function(t,n,e){"use strict";var r=e(0),i=e(109);r(r.P+r.F*!e(22)([].reduceRight,!0),"Array",{reduceRight:function(t){return i(this,t,arguments.length,arguments[1],!0)}})},function(t,n,e){"use strict";var r=e(0),i=e(52)(!1),o=[].indexOf,u=!!o&&1/[1].indexOf(1,-0)<0;r(r.P+r.F*(u||!e(22)(o)),"Array",{indexOf:function(t){return u?o.apply(this,arguments)||0:i(this,t,arguments[1])}})},function(t,n,e){"use strict";var r=e(0),i=e(15),o=e(25),u=e(8),c=[].lastIndexOf,a=!!c&&1/[1].lastIndexOf(1,-0)<0;r(r.P+r.F*(a||!e(22)(c)),"Array",{lastIndexOf:function(t){if(a)return c.apply(this,arguments)||0;var n=i(this),e=u(n.length),r=e-1;for(arguments.length>1&&(r=Math.min(r,o(arguments[1]))),r<0&&(r=e+r);r>=0;r--)if(r in n&&n[r]===t)return r||0;return-1}})},function(t,n,e){var r=e(0);r(r.P,"Array",{copyWithin:e(110)}),e(32)("copyWithin")},function(t,n,e){var r=e(0);r(r.P,"Array",{fill:e(86)}),e(32)("fill")},function(t,n,e){"use strict";var r=e(0),i=e(27)(5),o=!0;"find"in[]&&Array(1).find(function(){o=!1}),r(r.P+r.F*o,"Array",{find:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),e(32)("find")},function(t,n,e){"use strict";var r=e(0),i=e(27)(6),o="findIndex",u=!0;o in[]&&Array(1)[o](function(){u=!1}),r(r.P+r.F*u,"Array",{findIndex:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),e(32)(o)},function(t,n,e){e(39)("Array")},function(t,n,e){var r=e(2),i=e(73),o=e(7).f,u=e(38).f,c=e(55),a=e(57),s=r.RegExp,f=s,l=s.prototype,h=/a/g,p=/a/g,v=new s(h)!==h;if(e(6)&&(!v||e(3)(function(){return p[e(5)("match")]=!1,s(h)!=h||s(p)==p||"/a/i"!=s(h,"i")}))){s=function(t,n){var e=this instanceof s,r=c(t),o=void 0===n;return!e&&r&&t.constructor===s&&o?t:i(v?new f(r&&!o?t.source:t,n):f((r=t instanceof s)?t.source:t,r&&o?a.call(t):n),e?this:l,s)};for(var d=function(t){t in s||o(s,t,{configurable:!0,get:function(){return f[t]},set:function(n){f[t]=n}})},g=u(f),y=0;g.length>y;)d(g[y++]);l.constructor=s,s.prototype=l,e(12)(r,"RegExp",s)}e(39)("RegExp")},function(t,n,e){"use strict";e(112);var r=e(1),i=e(57),o=e(6),u=/./.toString,c=function(t){e(12)(RegExp.prototype,"toString",t,!0)};e(3)(function(){return"/a/b"!=u.call({source:"a",flags:"b"})})?c(function(){var t=r(this);return"/".concat(t.source,"/","flags"in t?t.flags:!o&&t instanceof RegExp?i.call(t):void 0)}):"toString"!=u.name&&c(function(){return u.call(this)})},function(t,n,e){e(58)("match",1,function(t,n,e){return[function(e){"use strict";var r=t(this),i=void 0==e?void 0:e[n];return void 0!==i?i.call(e,r):new RegExp(e)[n](String(r))},e]})},function(t,n,e){e(58)("replace",2,function(t,n,e){return[function(r,i){"use strict";var o=t(this),u=void 0==r?void 0:r[n];return void 0!==u?u.call(r,o,i):e.call(String(o),r,i)},e]})},function(t,n,e){e(58)("search",1,function(t,n,e){return[function(e){"use strict";var r=t(this),i=void 0==e?void 0:e[n];return void 0!==i?i.call(e,r):new RegExp(e)[n](String(r))},e]})},function(t,n,e){e(58)("split",2,function(t,n,r){"use strict";var i=e(55),o=r,u=[].push;if("c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length){var c=void 0===/()??/.exec("")[1];r=function(t,n){var e=String(this);if(void 0===t&&0===n)return[];if(!i(t))return o.call(e,t,n);var r,a,s,f,l,h=[],p=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.unicode?"u":"")+(t.sticky?"y":""),v=0,d=void 0===n?4294967295:n>>>0,g=new RegExp(t.source,p+"g");for(c||(r=new RegExp("^"+g.source+"$(?!\\s)",p));(a=g.exec(e))&&!((s=a.index+a[0].length)>v&&(h.push(e.slice(v,a.index)),!c&&a.length>1&&a[0].replace(r,function(){for(l=1;l<arguments.length-2;l++)void 0===arguments[l]&&(a[l]=void 0)}),a.length>1&&a.index<e.length&&u.apply(h,a.slice(1)),f=a[0].length,v=s,h.length>=d));)g.lastIndex===a.index&&g.lastIndex++;return v===e.length?!f&&g.test("")||h.push(""):h.push(e.slice(v)),h.length>d?h.slice(0,d):h}}else"0".split(void 0,0).length&&(r=function(t,n){return void 0===t&&0===n?[]:o.call(this,t,n)});return[function(e,i){var o=t(this),u=void 0==e?void 0:e[n];return void 0!==u?u.call(e,o,i):r.call(String(o),e,i)},r]})},function(t,n,e){"use strict";var r,i,o,u,c=e(31),a=e(2),s=e(20),f=e(49),l=e(0),h=e(4),p=e(10),v=e(40),d=e(41),g=e(59),y=e(88).set,m=e(89)(),_=e(90),b=e(113),w=e(60),x=e(114),S=a.TypeError,E=a.process,O=E&&E.versions,k=O&&O.v8||"",M=a.Promise,P="process"==f(E),F=function(){},I=i=_.f,j=!!function(){try{var t=M.resolve(1),n=(t.constructor={})[e(5)("species")]=function(t){t(F,F)};return(P||"function"==typeof PromiseRejectionEvent)&&t.then(F)instanceof n&&0!==k.indexOf("6.6")&&-1===w.indexOf("Chrome/66")}catch(t){}}(),L=function(t){var n;return!(!h(t)||"function"!=typeof(n=t.then))&&n},A=function(t,n){if(!t._n){t._n=!0;var e=t._c;m(function(){for(var r=t._v,i=1==t._s,o=0,u=function(n){var e,o,u,c=i?n.ok:n.fail,a=n.resolve,s=n.reject,f=n.domain;try{c?(i||(2==t._h&&N(t),t._h=1),!0===c?e=r:(f&&f.enter(),e=c(r),f&&(f.exit(),u=!0)),e===n.promise?s(S("Promise-chain cycle")):(o=L(e))?o.call(e,a,s):a(e)):s(r)}catch(t){f&&!u&&f.exit(),s(t)}};e.length>o;)u(e[o++]);t._c=[],t._n=!1,n&&!t._h&&R(t)})}},R=function(t){y.call(a,function(){var n,e,r,i=t._v,o=T(t);if(o&&(n=b(function(){P?E.emit("unhandledRejection",i,t):(e=a.onunhandledrejection)?e({promise:t,reason:i}):(r=a.console)&&r.error&&r.error("Unhandled promise rejection",i)}),t._h=P||T(t)?2:1),t._a=void 0,o&&n.e)throw n.v})},T=function(t){return 1!==t._h&&0===(t._a||t._c).length},N=function(t){y.call(a,function(){var n;P?E.emit("rejectionHandled",t):(n=a.onrejectionhandled)&&n({promise:t,reason:t._v})})},C=function(t){var n=this;n._d||(n._d=!0,(n=n._w||n)._v=t,n._s=2,n._a||(n._a=n._c.slice()),A(n,!0))},D=function(t){var n,e=this;if(!e._d){e._d=!0,e=e._w||e;try{if(e===t)throw S("Promise can't be resolved itself");(n=L(t))?m(function(){var r={_w:e,_d:!1};try{n.call(t,s(D,r,1),s(C,r,1))}catch(t){C.call(r,t)}}):(e._v=t,e._s=1,A(e,!1))}catch(t){C.call({_w:e,_d:!1},t)}}};j||(M=function(t){v(this,M,"Promise","_h"),p(t),r.call(this);try{t(s(D,this,1),s(C,this,1))}catch(t){C.call(this,t)}},(r=function(t){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=e(42)(M.prototype,{then:function(t,n){var e=I(g(this,M));return e.ok="function"!=typeof t||t,e.fail="function"==typeof n&&n,e.domain=P?E.domain:void 0,this._c.push(e),this._a&&this._a.push(e),this._s&&A(this,!1),e.promise},catch:function(t){return this.then(void 0,t)}}),o=function(){var t=new r;this.promise=t,this.resolve=s(D,t,1),this.reject=s(C,t,1)},_.f=I=function(t){return t===M||t===u?new o(t):i(t)}),l(l.G+l.W+l.F*!j,{Promise:M}),e(43)(M,"Promise"),e(39)("Promise"),u=e(19).Promise,l(l.S+l.F*!j,"Promise",{reject:function(t){var n=I(this);return(0,n.reject)(t),n.promise}}),l(l.S+l.F*(c||!j),"Promise",{resolve:function(t){return x(c&&this===u?M:this,t)}}),l(l.S+l.F*!(j&&e(56)(function(t){M.all(t).catch(F)})),"Promise",{all:function(t){var n=this,e=I(n),r=e.resolve,i=e.reject,o=b(function(){var e=[],o=0,u=1;d(t,!1,function(t){var c=o++,a=!1;e.push(void 0),u++,n.resolve(t).then(function(t){a||(a=!0,e[c]=t,--u||r(e))},i)}),--u||r(e)});return o.e&&i(o.v),e.promise},race:function(t){var n=this,e=I(n),r=e.reject,i=b(function(){d(t,!1,function(t){n.resolve(t).then(e.resolve,r)})});return i.e&&r(i.v),e.promise}})},function(t,n,e){"use strict";var r=e(119),i=e(46);e(61)("WeakSet",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{add:function(t){return r.def(i(this,"WeakSet"),t,!0)}},r,!1,!0)},function(t,n,e){"use strict";var r=e(0),i=e(62),o=e(91),u=e(1),c=e(36),a=e(8),s=e(4),f=e(2).ArrayBuffer,l=e(59),h=o.ArrayBuffer,p=o.DataView,v=i.ABV&&f.isView,d=h.prototype.slice,g=i.VIEW;r(r.G+r.W+r.F*(f!==h),{ArrayBuffer:h}),r(r.S+r.F*!i.CONSTR,"ArrayBuffer",{isView:function(t){return v&&v(t)||s(t)&&g in t}}),r(r.P+r.U+r.F*e(3)(function(){return!new h(2).slice(1,void 0).byteLength}),"ArrayBuffer",{slice:function(t,n){if(void 0!==d&&void 0===n)return d.call(u(this),t);for(var e=u(this).byteLength,r=c(t,e),i=c(void 0===n?e:n,e),o=new(l(this,h))(a(i-r)),s=new p(this),f=new p(o),v=0;r<i;)f.setUint8(v++,s.getUint8(r++));return o}}),e(39)("ArrayBuffer")},function(t,n,e){var r=e(0);r(r.G+r.W+r.F*!e(62).ABV,{DataView:e(91).DataView})},function(t,n,e){e(28)("Int8",1,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(28)("Uint8",1,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(28)("Uint8",1,function(t){return function(n,e,r){return t(this,n,e,r)}},!0)},function(t,n,e){e(28)("Int16",2,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(28)("Uint16",2,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(28)("Int32",4,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(28)("Uint32",4,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(28)("Float32",4,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(28)("Float64",8,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){var r=e(0),i=e(10),o=e(1),u=(e(2).Reflect||{}).apply,c=Function.apply;r(r.S+r.F*!e(3)(function(){u(function(){})}),"Reflect",{apply:function(t,n,e){var r=i(t),a=o(e);return u?u(r,n,a):c.call(r,n,a)}})},function(t,n,e){var r=e(0),i=e(37),o=e(10),u=e(1),c=e(4),a=e(3),s=e(100),f=(e(2).Reflect||{}).construct,l=a(function(){function t(){}return!(f(function(){},[],t)instanceof t)}),h=!a(function(){f(function(){})});r(r.S+r.F*(l||h),"Reflect",{construct:function(t,n){o(t),u(n);var e=arguments.length<3?t:o(arguments[2]);if(h&&!l)return f(t,n,e);if(t==e){switch(n.length){case 0:return new t;case 1:return new t(n[0]);case 2:return new t(n[0],n[1]);case 3:return new t(n[0],n[1],n[2]);case 4:return new t(n[0],n[1],n[2],n[3])}var r=[null];return r.push.apply(r,n),new(s.apply(t,r))}var a=e.prototype,p=i(c(a)?a:Object.prototype),v=Function.apply.call(t,p,n);return c(v)?v:p}})},function(t,n,e){var r=e(7),i=e(0),o=e(1),u=e(23);i(i.S+i.F*e(3)(function(){Reflect.defineProperty(r.f({},1,{value:1}),1,{value:2})}),"Reflect",{defineProperty:function(t,n,e){o(t),n=u(n,!0),o(e);try{return r.f(t,n,e),!0}catch(t){return!1}}})},function(t,n,e){var r=e(0),i=e(16).f,o=e(1);r(r.S,"Reflect",{deleteProperty:function(t,n){var e=i(o(t),n);return!(e&&!e.configurable)&&delete t[n]}})},function(t,n,e){"use strict";var r=e(0),i=e(1),o=function(t){this._t=i(t),this._i=0;var n,e=this._k=[];for(n in t)e.push(n)};e(79)(o,"Object",function(){var t,n=this._k;do{if(this._i>=n.length)return{value:void 0,done:!0}}while(!((t=n[this._i++])in this._t));return{value:t,done:!1}}),r(r.S,"Reflect",{enumerate:function(t){return new o(t)}})},function(t,n,e){var r=e(16),i=e(17),o=e(14),u=e(0),c=e(4),a=e(1);u(u.S,"Reflect",{get:function t(n,e){var u,s,f=arguments.length<3?n:arguments[2];return a(n)===f?n[e]:(u=r.f(n,e))?o(u,"value")?u.value:void 0!==u.get?u.get.call(f):void 0:c(s=i(n))?t(s,e,f):void 0}})},function(t,n,e){var r=e(16),i=e(0),o=e(1);i(i.S,"Reflect",{getOwnPropertyDescriptor:function(t,n){return r.f(o(t),n)}})},function(t,n,e){var r=e(0),i=e(17),o=e(1);r(r.S,"Reflect",{getPrototypeOf:function(t){return i(o(t))}})},function(t,n,e){var r=e(0);r(r.S,"Reflect",{has:function(t,n){return n in t}})},function(t,n,e){var r=e(0),i=e(1),o=Object.isExtensible;r(r.S,"Reflect",{isExtensible:function(t){return i(t),!o||o(t)}})},function(t,n,e){var r=e(0);r(r.S,"Reflect",{ownKeys:e(121)})},function(t,n,e){var r=e(0),i=e(1),o=Object.preventExtensions;r(r.S,"Reflect",{preventExtensions:function(t){i(t);try{return o&&o(t),!0}catch(t){return!1}}})},function(t,n,e){var r=e(7),i=e(16),o=e(17),u=e(14),c=e(0),a=e(33),s=e(1),f=e(4);c(c.S,"Reflect",{set:function t(n,e,c){var l,h,p=arguments.length<4?n:arguments[3],v=i.f(s(n),e);if(!v){if(f(h=o(n)))return t(h,e,c,p);v=a(0)}if(u(v,"value")){if(!1===v.writable||!f(p))return!1;if(l=i.f(p,e)){if(l.get||l.set||!1===l.writable)return!1;l.value=c,r.f(p,e,l)}else r.f(p,e,a(0,c));return!0}return void 0!==v.set&&(v.set.call(p,c),!0)}})},function(t,n,e){var r=e(0),i=e(71);i&&r(r.S,"Reflect",{setPrototypeOf:function(t,n){i.check(t,n);try{return i.set(t,n),!0}catch(t){return!1}}})},function(t,n,e){"use strict";var r=e(0),i=e(52)(!0);r(r.P,"Array",{includes:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),e(32)("includes")},function(t,n,e){"use strict";var r=e(0),i=e(122),o=e(9),u=e(8),c=e(10),a=e(85);r(r.P,"Array",{flatMap:function(t){var n,e,r=o(this);return c(t),n=u(r.length),e=a(r,0),i(e,r,r,n,0,1,t,arguments[1]),e}}),e(32)("flatMap")},function(t,n,e){"use strict";var r=e(0),i=e(122),o=e(9),u=e(8),c=e(25),a=e(85);r(r.P,"Array",{flatten:function(){var t=arguments[0],n=o(this),e=u(n.length),r=a(n,0);return i(r,n,n,e,0,void 0===t?1:c(t)),r}}),e(32)("flatten")},function(t,n,e){"use strict";var r=e(0),i=e(77)(!0);r(r.P,"String",{at:function(t){return i(this,t)}})},function(t,n,e){"use strict";var r=e(0),i=e(123),o=e(60);r(r.P+r.F*/Version\/10\.\d+(\.\d+)? Safari\//.test(o),"String",{padStart:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0,!0)}})},function(t,n,e){"use strict";var r=e(0),i=e(123),o=e(60);r(r.P+r.F*/Version\/10\.\d+(\.\d+)? Safari\//.test(o),"String",{padEnd:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0,!1)}})},function(t,n,e){"use strict";e(44)("trimLeft",function(t){return function(){return t(this,1)}},"trimStart")},function(t,n,e){"use strict";e(44)("trimRight",function(t){return function(){return t(this,2)}},"trimEnd")},function(t,n,e){"use strict";var r=e(0),i=e(24),o=e(8),u=e(55),c=e(57),a=RegExp.prototype,s=function(t,n){this._r=t,this._s=n};e(79)(s,"RegExp String",function(){var t=this._r.exec(this._s);return{value:t,done:null===t}}),r(r.P,"String",{matchAll:function(t){if(i(this),!u(t))throw TypeError(t+" is not a regexp!");var n=String(this),e="flags"in a?String(t.flags):c.call(t),r=new RegExp(t.source,~e.indexOf("g")?e:"g"+e);return r.lastIndex=o(t.lastIndex),new s(r,n)}})},function(t,n,e){e(67)("asyncIterator")},function(t,n,e){e(67)("observable")},function(t,n,e){var r=e(0),i=e(121),o=e(15),u=e(16),c=e(83);r(r.S,"Object",{getOwnPropertyDescriptors:function(t){for(var n,e,r=o(t),a=u.f,s=i(r),f={},l=0;s.length>l;)void 0!==(e=a(r,n=s[l++]))&&c(f,n,e);return f}})},function(t,n,e){var r=e(0),i=e(124)(!1);r(r.S,"Object",{values:function(t){return i(t)}})},function(t,n,e){var r=e(0),i=e(124)(!0);r(r.S,"Object",{entries:function(t){return i(t)}})},function(t,n,e){"use strict";var r=e(0),i=e(9),o=e(10),u=e(7);e(6)&&r(r.P+e(63),"Object",{__defineGetter__:function(t,n){u.f(i(this),t,{get:o(n),enumerable:!0,configurable:!0})}})},function(t,n,e){"use strict";var r=e(0),i=e(9),o=e(10),u=e(7);e(6)&&r(r.P+e(63),"Object",{__defineSetter__:function(t,n){u.f(i(this),t,{set:o(n),enumerable:!0,configurable:!0})}})},function(t,n,e){"use strict";var r=e(0),i=e(9),o=e(23),u=e(17),c=e(16).f;e(6)&&r(r.P+e(63),"Object",{__lookupGetter__:function(t){var n,e=i(this),r=o(t,!0);do{if(n=c(e,r))return n.get}while(e=u(e))}})},function(t,n,e){"use strict";var r=e(0),i=e(9),o=e(23),u=e(17),c=e(16).f;e(6)&&r(r.P+e(63),"Object",{__lookupSetter__:function(t){var n,e=i(this),r=o(t,!0);do{if(n=c(e,r))return n.set}while(e=u(e))}})},function(t,n,e){var r=e(0);r(r.P+r.R,"Map",{toJSON:e(125)("Map")})},function(t,n,e){var r=e(0);r(r.P+r.R,"Set",{toJSON:e(125)("Set")})},function(t,n,e){e(64)("Map")},function(t,n,e){e(64)("Set")},function(t,n,e){e(64)("WeakMap")},function(t,n,e){e(64)("WeakSet")},function(t,n,e){e(65)("Map")},function(t,n,e){e(65)("Set")},function(t,n,e){e(65)("WeakMap")},function(t,n,e){e(65)("WeakSet")},function(t,n,e){var r=e(0);r(r.G,{global:e(2)})},function(t,n,e){var r=e(0);r(r.S,"System",{global:e(2)})},function(t,n,e){var r=e(0),i=e(21);r(r.S,"Error",{isError:function(t){return"Error"===i(t)}})},function(t,n,e){var r=e(0);r(r.S,"Math",{clamp:function(t,n,e){return Math.min(e,Math.max(n,t))}})},function(t,n,e){var r=e(0);r(r.S,"Math",{DEG_PER_RAD:Math.PI/180})},function(t,n,e){var r=e(0),i=180/Math.PI;r(r.S,"Math",{degrees:function(t){return t*i}})},function(t,n,e){var r=e(0),i=e(127),o=e(107);r(r.S,"Math",{fscale:function(t,n,e,r,u){return o(i(t,n,e,r,u))}})},function(t,n,e){var r=e(0);r(r.S,"Math",{iaddh:function(t,n,e,r){var i=t>>>0,o=e>>>0;return(n>>>0)+(r>>>0)+((i&o|(i|o)&~(i+o>>>0))>>>31)|0}})},function(t,n,e){var r=e(0);r(r.S,"Math",{isubh:function(t,n,e,r){var i=t>>>0,o=e>>>0;return(n>>>0)-(r>>>0)-((~i&o|~(i^o)&i-o>>>0)>>>31)|0}})},function(t,n,e){var r=e(0);r(r.S,"Math",{imulh:function(t,n){var e=+t,r=+n,i=65535&e,o=65535&r,u=e>>16,c=r>>16,a=(u*o>>>0)+(i*o>>>16);return u*c+(a>>16)+((i*c>>>0)+(65535&a)>>16)}})},function(t,n,e){var r=e(0);r(r.S,"Math",{RAD_PER_DEG:180/Math.PI})},function(t,n,e){var r=e(0),i=Math.PI/180;r(r.S,"Math",{radians:function(t){return t*i}})},function(t,n,e){var r=e(0);r(r.S,"Math",{scale:e(127)})},function(t,n,e){var r=e(0);r(r.S,"Math",{umulh:function(t,n){var e=+t,r=+n,i=65535&e,o=65535&r,u=e>>>16,c=r>>>16,a=(u*o>>>0)+(i*o>>>16);return u*c+(a>>>16)+((i*c>>>0)+(65535&a)>>>16)}})},function(t,n,e){var r=e(0);r(r.S,"Math",{signbit:function(t){return(t=+t)!=t?t:0==t?1/t==1/0:t>0}})},function(t,n,e){"use strict";var r=e(0),i=e(19),o=e(2),u=e(59),c=e(114);r(r.P+r.R,"Promise",{finally:function(t){var n=u(this,i.Promise||o.Promise),e="function"==typeof t;return this.then(e?function(e){return c(n,t()).then(function(){return e})}:t,e?function(e){return c(n,t()).then(function(){throw e})}:t)}})},function(t,n,e){"use strict";var r=e(0),i=e(90),o=e(113);r(r.S,"Promise",{try:function(t){var n=i.f(this),e=o(t);return(e.e?n.reject:n.resolve)(e.v),n.promise}})},function(t,n,e){var r=e(29),i=e(1),o=r.key,u=r.set;r.exp({defineMetadata:function(t,n,e,r){u(t,n,i(e),o(r))}})},function(t,n,e){var r=e(29),i=e(1),o=r.key,u=r.map,c=r.store;r.exp({deleteMetadata:function(t,n){var e=arguments.length<3?void 0:o(arguments[2]),r=u(i(n),e,!1);if(void 0===r||!r.delete(t))return!1;if(r.size)return!0;var a=c.get(n);return a.delete(e),!!a.size||c.delete(n)}})},function(t,n,e){var r=e(29),i=e(1),o=e(17),u=r.has,c=r.get,a=r.key,s=function(t,n,e){if(u(t,n,e))return c(t,n,e);var r=o(n);return null!==r?s(t,r,e):void 0};r.exp({getMetadata:function(t,n){return s(t,i(n),arguments.length<3?void 0:a(arguments[2]))}})},function(t,n,e){var r=e(117),i=e(126),o=e(29),u=e(1),c=e(17),a=o.keys,s=o.key,f=function(t,n){var e=a(t,n),o=c(t);if(null===o)return e;var u=f(o,n);return u.length?e.length?i(new r(e.concat(u))):u:e};o.exp({getMetadataKeys:function(t){return f(u(t),arguments.length<2?void 0:s(arguments[1]))}})},function(t,n,e){var r=e(29),i=e(1),o=r.get,u=r.key;r.exp({getOwnMetadata:function(t,n){return o(t,i(n),arguments.length<3?void 0:u(arguments[2]))}})},function(t,n,e){var r=e(29),i=e(1),o=r.keys,u=r.key;r.exp({getOwnMetadataKeys:function(t){return o(i(t),arguments.length<2?void 0:u(arguments[1]))}})},function(t,n,e){var r=e(29),i=e(1),o=e(17),u=r.has,c=r.key,a=function(t,n,e){if(u(t,n,e))return!0;var r=o(n);return null!==r&&a(t,r,e)};r.exp({hasMetadata:function(t,n){return a(t,i(n),arguments.length<3?void 0:c(arguments[2]))}})},function(t,n,e){var r=e(29),i=e(1),o=r.has,u=r.key;r.exp({hasOwnMetadata:function(t,n){return o(t,i(n),arguments.length<3?void 0:u(arguments[2]))}})},function(t,n,e){var r=e(29),i=e(1),o=e(10),u=r.key,c=r.set;r.exp({metadata:function(t,n){return function(e,r){c(t,n,(void 0!==r?i:o)(e),u(r))}}})},function(t,n,e){var r=e(0),i=e(89)(),o=e(2).process,u="process"==e(21)(o);r(r.G,{asap:function(t){var n=u&&o.domain;i(n?n.bind(t):t)}})},function(t,n,e){"use strict";var r=e(0),i=e(2),o=e(19),u=e(89)(),c=e(5)("observable"),a=e(10),s=e(1),f=e(40),l=e(42),h=e(11),p=e(41),v=p.RETURN,d=function(t){return null==t?void 0:a(t)},g=function(t){var n=t._c;n&&(t._c=void 0,n())},y=function(t){return void 0===t._o},m=function(t){y(t)||(t._o=void 0,g(t))},_=function(t,n){s(t),this._c=void 0,this._o=t,t=new b(this);try{var e=n(t),r=e;null!=e&&("function"==typeof e.unsubscribe?e=function(){r.unsubscribe()}:a(e),this._c=e)}catch(n){return void t.error(n)}y(this)&&g(this)};_.prototype=l({},{unsubscribe:function(){m(this)}});var b=function(t){this._s=t};b.prototype=l({},{next:function(t){var n=this._s;if(!y(n)){var e=n._o;try{var r=d(e.next);if(r)return r.call(e,t)}catch(t){try{m(n)}finally{throw t}}}},error:function(t){var n=this._s;if(y(n))throw t;var e=n._o;n._o=void 0;try{var r=d(e.error);if(!r)throw t;t=r.call(e,t)}catch(t){try{g(n)}finally{throw t}}return g(n),t},complete:function(t){var n=this._s;if(!y(n)){var e=n._o;n._o=void 0;try{var r=d(e.complete);t=r?r.call(e,t):void 0}catch(t){try{g(n)}finally{throw t}}return g(n),t}}});var w=function(t){f(this,w,"Observable","_f")._f=a(t)};l(w.prototype,{subscribe:function(t){return new _(t,this._f)},forEach:function(t){var n=this;return new(o.Promise||i.Promise)(function(e,r){a(t);var i=n.subscribe({next:function(n){try{return t(n)}catch(t){r(t),i.unsubscribe()}},error:r,complete:e})})}}),l(w,{from:function(t){var n="function"==typeof this?this:w,e=d(s(t)[c]);if(e){var r=s(e.call(t));return r.constructor===n?r:new n(function(t){return r.subscribe(t)})}return new n(function(n){var e=!1;return u(function(){if(!e){try{if(p(t,!1,function(t){if(n.next(t),e)return v})===v)return}catch(t){if(e)throw t;return void n.error(t)}n.complete()}}),function(){e=!0}})},of:function(){for(var t=0,n=arguments.length,e=new Array(n);t<n;)e[t]=arguments[t++];return new("function"==typeof this?this:w)(function(t){var n=!1;return u(function(){if(!n){for(var r=0;r<e.length;++r)if(t.next(e[r]),n)return;t.complete()}}),function(){n=!0}})}}),h(w.prototype,c,function(){return this}),r(r.G,{Observable:w}),e(39)("Observable")},function(t,n,e){var r=e(2),i=e(0),o=e(60),u=[].slice,c=/MSIE .\./.test(o),a=function(t){return function(n,e){var r=arguments.length>2,i=!!r&&u.call(arguments,2);return t(r?function(){("function"==typeof n?n:Function(n)).apply(this,i)}:n,e)}};i(i.G+i.B+i.F*c,{setTimeout:a(r.setTimeout),setInterval:a(r.setInterval)})},function(t,n,e){var r=e(0),i=e(88);r(r.G+r.B,{setImmediate:i.set,clearImmediate:i.clear})},function(t,n,e){for(var r=e(87),i=e(35),o=e(12),u=e(2),c=e(11),a=e(45),s=e(5),f=s("iterator"),l=s("toStringTag"),h=a.Array,p={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},v=i(p),d=0;d<v.length;d++){var g,y=v[d],m=p[y],_=u[y],b=_&&_.prototype;if(b&&(b[f]||c(b,f,h),b[l]||c(b,l,y),a[y]=h,m))for(g in r)b[g]||o(b,g,r[g],!0)}},function(t,n,e){(function(n){!function(n){"use strict";var e,r=Object.prototype,i=r.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},u=o.iterator||"@@iterator",c=o.asyncIterator||"@@asyncIterator",a=o.toStringTag||"@@toStringTag",s="object"==typeof t,f=n.regeneratorRuntime;if(f)s&&(t.exports=f);else{(f=n.regeneratorRuntime=s?t.exports:{}).wrap=b;var l="suspendedStart",h="suspendedYield",p="executing",v="completed",d={},g={};g[u]=function(){return this};var y=Object.getPrototypeOf,m=y&&y(y(j([])));m&&m!==r&&i.call(m,u)&&(g=m);var _=E.prototype=x.prototype=Object.create(g);S.prototype=_.constructor=E,E.constructor=S,E[a]=S.displayName="GeneratorFunction",f.isGeneratorFunction=function(t){var n="function"==typeof t&&t.constructor;return!!n&&(n===S||"GeneratorFunction"===(n.displayName||n.name))},f.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,E):(t.__proto__=E,a in t||(t[a]="GeneratorFunction")),t.prototype=Object.create(_),t},f.awrap=function(t){return{__await:t}},O(k.prototype),k.prototype[c]=function(){return this},f.AsyncIterator=k,f.async=function(t,n,e,r){var i=new k(b(t,n,e,r));return f.isGeneratorFunction(n)?i:i.next().then(function(t){return t.done?t.value:i.next()})},O(_),_[a]="Generator",_[u]=function(){return this},_.toString=function(){return"[object Generator]"},f.keys=function(t){var n=[];for(var e in t)n.push(e);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},f.values=j,I.prototype={constructor:I,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(F),!t)for(var n in this)"t"===n.charAt(0)&&i.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function r(r,i){return c.type="throw",c.arg=t,n.next=r,i&&(n.method="next",n.arg=e),!!i}for(var o=this.tryEntries.length-1;o>=0;--o){var u=this.tryEntries[o],c=u.completion;if("root"===u.tryLoc)return r("end");if(u.tryLoc<=this.prev){var a=i.call(u,"catchLoc"),s=i.call(u,"finallyLoc");if(a&&s){if(this.prev<u.catchLoc)return r(u.catchLoc,!0);if(this.prev<u.finallyLoc)return r(u.finallyLoc)}else if(a){if(this.prev<u.catchLoc)return r(u.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<u.finallyLoc)return r(u.finallyLoc)}}}},abrupt:function(t,n){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc<=this.prev&&i.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var o=r;break}}o&&("break"===t||"continue"===t)&&o.tryLoc<=n&&n<=o.finallyLoc&&(o=null);var u=o?o.completion:{};return u.type=t,u.arg=n,o?(this.method="next",this.next=o.finallyLoc,d):this.complete(u)},complete:function(t,n){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&n&&(this.next=n),d},finish:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var e=this.tryEntries[n];if(e.finallyLoc===t)return this.complete(e.completion,e.afterLoc),F(e),d}},catch:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var e=this.tryEntries[n];if(e.tryLoc===t){var r=e.completion;if("throw"===r.type){var i=r.arg;F(e)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:j(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),d}}}function b(t,n,e,r){var i=n&&n.prototype instanceof x?n:x,o=Object.create(i.prototype),u=new I(r||[]);return o._invoke=function(t,n,e){var r=l;return function(i,o){if(r===p)throw new Error("Generator is already running");if(r===v){if("throw"===i)throw o;return L()}for(e.method=i,e.arg=o;;){var u=e.delegate;if(u){var c=M(u,e);if(c){if(c===d)continue;return c}}if("next"===e.method)e.sent=e._sent=e.arg;else if("throw"===e.method){if(r===l)throw r=v,e.arg;e.dispatchException(e.arg)}else"return"===e.method&&e.abrupt("return",e.arg);r=p;var a=w(t,n,e);if("normal"===a.type){if(r=e.done?v:h,a.arg===d)continue;return{value:a.arg,done:e.done}}"throw"===a.type&&(r=v,e.method="throw",e.arg=a.arg)}}}(t,e,u),o}function w(t,n,e){try{return{type:"normal",arg:t.call(n,e)}}catch(t){return{type:"throw",arg:t}}}function x(){}function S(){}function E(){}function O(t){["next","throw","return"].forEach(function(n){t[n]=function(t){return this._invoke(n,t)}})}function k(t){function e(n,r,o,u){var c=w(t[n],t,r);if("throw"!==c.type){var a=c.arg,s=a.value;return s&&"object"==typeof s&&i.call(s,"__await")?Promise.resolve(s.__await).then(function(t){e("next",t,o,u)},function(t){e("throw",t,o,u)}):Promise.resolve(s).then(function(t){a.value=t,o(a)},u)}u(c.arg)}var r;"object"==typeof n.process&&n.process.domain&&(e=n.process.domain.bind(e)),this._invoke=function(t,n){function i(){return new Promise(function(r,i){e(t,n,r,i)})}return r=r?r.then(i,i):i()}}function M(t,n){var r=t.iterator[n.method];if(r===e){if(n.delegate=null,"throw"===n.method){if(t.iterator.return&&(n.method="return",n.arg=e,M(t,n),"throw"===n.method))return d;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return d}var i=w(r,t.iterator,n.arg);if("throw"===i.type)return n.method="throw",n.arg=i.arg,n.delegate=null,d;var o=i.arg;return o?o.done?(n[t.resultName]=o.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,d):o:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,d)}function P(t){var n={tryLoc:t[0]};1 in t&&(n.catchLoc=t[1]),2 in t&&(n.finallyLoc=t[2],n.afterLoc=t[3]),this.tryEntries.push(n)}function F(t){var n=t.completion||{};n.type="normal",delete n.arg,t.completion=n}function I(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(P,this),this.reset(!0)}function j(t){if(t){var n=t[u];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var r=-1,o=function n(){for(;++r<t.length;)if(i.call(t,r))return n.value=t[r],n.done=!1,n;return n.value=e,n.done=!0,n};return o.next=o}}return{next:L}}function L(){return{value:e,done:!0}}}("object"==typeof n?n:"object"==typeof window?window:"object"==typeof self?self:this)}).call(this,e(93))},function(t,n,e){e(337),t.exports=e(19).RegExp.escape},function(t,n,e){var r=e(0),i=e(338)(/[\\^$*+?.()|[\]{}]/g,"\\$&");r(r.S,"RegExp",{escape:function(t){return i(t)}})},function(t,n){t.exports=function(t,n){var e=n===Object(n)?function(t){return n[t]}:n;return function(n){return String(n).replace(t,e)}}},function(t,n,e){"use strict";var r=p(e(340)),i=p(e(359)),o=p(e(361)),u=h(e(135)),c=h(e(362)),a=h(e(364)),s=h(e(365)),f=e(50),l=p(e(366));function h(t){if(t&&t.__esModule)return t;var n={};if(null!=t)for(var e in t)Object.prototype.hasOwnProperty.call(t,e)&&(n[e]=t[e]);return n.default=t,n}function p(t){return t&&t.__esModule?t:{default:t}}function v(t){return function(){var n=t.apply(this,arguments);return new Promise(function(t,e){return function r(i,o){try{var u=n[i](o),c=u.value}catch(t){return void e(t)}if(!u.done)return Promise.resolve(c).then(function(t){r("next",t)},function(t){r("throw",t)});t(c)}("next")})}}var d={};f.elements.searchForm.addEventListener("submit",function(t){t.preventDefault(),g()});var g=function(){var t=v(regeneratorRuntime.mark(function t(){var n;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if(!(n=u.getInput())){t.next=17;break}return d.search=new r.default(n),u.clearInput(),u.clearResults(),(0,f.renderSpinner)(f.elements.resultsBlock),t.prev=6,t.next=9,d.search.httpRequest();case 9:(0,f.delSpinner)(),u.renderResults(d.search.result),t.next=17;break;case 13:t.prev=13,t.t0=t.catch(6),console.log(t.t0),alert("Something wrong with search");case 17:case"end":return t.stop()}},t,void 0,[[6,13]])}));return function(){return t.apply(this,arguments)}}();f.elements.paginPages.addEventListener("click",function(t){var n=t.target.closest(".btn-inline");if(n){var e=parseInt(n.dataset.goto,10);u.clearResults(),u.renderResults(d.search.result,e)}});var y=function(){var t=v(regeneratorRuntime.mark(function t(){var n;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if(!(n=window.location.hash.slice(1))){t.next=20;break}return c.highLightActive(n),c.clearRecipe(),(0,f.renderSpinner)(f.elements.recipe),d.recipe=new l.default(n),t.prev=6,t.next=9,d.recipe.httpRequest();case 9:d.recipe.calcTime(),d.recipe.calcServing(),d.recipe.rewriteIngredients(),(0,f.delSpinner)(),c.recipeRender(d.recipe,d.likes.isLiked(n)),t.next=20;break;case 16:t.prev=16,t.t0=t.catch(6),console.log(t.t0),alert("Something wrong with search");case 20:case"end":return t.stop()}},t,void 0,[[6,16]])}));return function(){return t.apply(this,arguments)}}();["hashchange","load"].forEach(function(t){return window.addEventListener(t,y)}),window.addEventListener("load",function(t){d.likes=new o.default,d.likes.arr=d.likes.getFromLocalStorage()||[],s.toogleLikesListButton(d.likes.arr.length),d.likes.arr.forEach(function(t){s.renderLike(t.id,t.title,t.author,t.img)})}),document.querySelector(".recipe").addEventListener("click",function(t){t.target.matches(".btn-decrease, .btn-decrease * ")?d.recipe.serving>1&&(d.recipe.recountIngredients("dec"),c.rewriteQuantity(d.recipe.serving,d.recipe.ingredients)):t.target.matches(".btn-increase, .btn-increase * ")?(d.recipe.recountIngredients("inc"),c.rewriteQuantity(d.recipe.serving,d.recipe.ingredients)):t.target.matches(".recipe__btn--add, .recipe__btn--add * ")?(d.list||(d.list=new i.default),d.recipe.ingredients.forEach(function(t){var n=d.list.create(t.count,t.unit,t.description);a.renderItem(n)})):t.target.matches(".recipe__love, .recipe__love * ")&&function(){var t=d.recipe.id;if(d.likes||(d.likes=new o.default),d.likes.isLiked(t))d.likes.delete(t),s.toogleLikeButton(!1),s.toogleLikesListButton(d.likes.arr.length),s.deleteLike(t);else{var n=d.recipe.title,e=d.recipe.publisher,r=d.recipe.image;d.likes.create(t,n,e,r),s.toogleLikeButton(!0),s.toogleLikesListButton(d.likes.arr.length),s.renderLike(t,n,e,r)}}()}),document.querySelector(".shopping__list").addEventListener("click",function(t){if(t.target.matches(".shopping__delete, .shopping__delete * ")){var n=t.target.closest(".shopping__item"),e=n.dataset.itemid;a.deleteItem(n),d.list.delete(e)}else if(t.target.matches(".change-shopping-count")){var r=parseFloat(t.target.value),i=t.target.closest(".shopping__item").dataset.itemid;d.list.updateCount(i,r)}}),alert("Hello!")},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function t(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}(),i=function(t){return t&&t.__esModule?t:{default:t}}(e(128));var o=function(){function t(n){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),this.query=n}return r(t,[{key:"httpRequest",value:function(){var t=function(t){return function(){var n=t.apply(this,arguments);return new Promise(function(t,e){return function r(i,o){try{var u=n[i](o),c=u.value}catch(t){return void e(t)}if(!u.done)return Promise.resolve(c).then(function(t){r("next",t)},function(t){r("throw",t)});t(c)}("next")})}}(regeneratorRuntime.mark(function t(){var n,e,r,o;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return n="e27bdefe5f0114fd257c56deda292c63",e="",r="https://www.food2fork.com/api/search",t.next=5,(0,i.default)(""+e+r+"?key="+n+"&q="+this.query);case 5:o=t.sent,this.result=o.data.recipes;case 7:case"end":return t.stop()}},t,this)}));return function(){return t.apply(this,arguments)}}()}]),t}();n.default=o},function(t,n,e){"use strict";var r=e(18),i=e(129),o=e(343),u=e(92);function c(t){var n=new o(t),e=i(o.prototype.request,n);return r.extend(e,o.prototype,n),r.extend(e,n),e}var a=c(u);a.Axios=o,a.create=function(t){return c(r.merge(u,t))},a.Cancel=e(134),a.CancelToken=e(357),a.isCancel=e(133),a.all=function(t){return Promise.all(t)},a.spread=e(358),t.exports=a,t.exports.default=a},function(t,n){function e(t){return!!t.constructor&&"function"==typeof t.constructor.isBuffer&&t.constructor.isBuffer(t)}
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
t.exports=function(t){return null!=t&&(e(t)||function(t){return"function"==typeof t.readFloatLE&&"function"==typeof t.slice&&e(t.slice(0,0))}(t)||!!t._isBuffer)}},function(t,n,e){"use strict";var r=e(92),i=e(18),o=e(352),u=e(353);function c(t){this.defaults=t,this.interceptors={request:new o,response:new o}}c.prototype.request=function(t){"string"==typeof t&&(t=i.merge({url:arguments[0]},arguments[1])),(t=i.merge(r,{method:"get"},this.defaults,t)).method=t.method.toLowerCase();var n=[u,void 0],e=Promise.resolve(t);for(this.interceptors.request.forEach(function(t){n.unshift(t.fulfilled,t.rejected)}),this.interceptors.response.forEach(function(t){n.push(t.fulfilled,t.rejected)});n.length;)e=e.then(n.shift(),n.shift());return e},i.forEach(["delete","get","head","options"],function(t){c.prototype[t]=function(n,e){return this.request(i.merge(e||{},{method:t,url:n}))}}),i.forEach(["post","put","patch"],function(t){c.prototype[t]=function(n,e,r){return this.request(i.merge(r||{},{method:t,url:n,data:e}))}}),t.exports=c},function(t,n,e){"use strict";var r=e(18);t.exports=function(t,n){r.forEach(t,function(e,r){r!==n&&r.toUpperCase()===n.toUpperCase()&&(t[n]=e,delete t[r])})}},function(t,n,e){"use strict";var r=e(132);t.exports=function(t,n,e){var i=e.config.validateStatus;e.status&&i&&!i(e.status)?n(r("Request failed with status code "+e.status,e.config,null,e.request,e)):t(e)}},function(t,n,e){"use strict";t.exports=function(t,n,e,r,i){return t.config=n,e&&(t.code=e),t.request=r,t.response=i,t}},function(t,n,e){"use strict";var r=e(18);function i(t){return encodeURIComponent(t).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}t.exports=function(t,n,e){if(!n)return t;var o;if(e)o=e(n);else if(r.isURLSearchParams(n))o=n.toString();else{var u=[];r.forEach(n,function(t,n){null!==t&&void 0!==t&&(r.isArray(t)?n+="[]":t=[t],r.forEach(t,function(t){r.isDate(t)?t=t.toISOString():r.isObject(t)&&(t=JSON.stringify(t)),u.push(i(n)+"="+i(t))}))}),o=u.join("&")}return o&&(t+=(-1===t.indexOf("?")?"?":"&")+o),t}},function(t,n,e){"use strict";var r=e(18),i=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];t.exports=function(t){var n,e,o,u={};return t?(r.forEach(t.split("\n"),function(t){if(o=t.indexOf(":"),n=r.trim(t.substr(0,o)).toLowerCase(),e=r.trim(t.substr(o+1)),n){if(u[n]&&i.indexOf(n)>=0)return;u[n]="set-cookie"===n?(u[n]?u[n]:[]).concat([e]):u[n]?u[n]+", "+e:e}}),u):u}},function(t,n,e){"use strict";var r=e(18);t.exports=r.isStandardBrowserEnv()?function(){var t,n=/(msie|trident)/i.test(navigator.userAgent),e=document.createElement("a");function i(t){var r=t;return n&&(e.setAttribute("href",r),r=e.href),e.setAttribute("href",r),{href:e.href,protocol:e.protocol?e.protocol.replace(/:$/,""):"",host:e.host,search:e.search?e.search.replace(/^\?/,""):"",hash:e.hash?e.hash.replace(/^#/,""):"",hostname:e.hostname,port:e.port,pathname:"/"===e.pathname.charAt(0)?e.pathname:"/"+e.pathname}}return t=i(window.location.href),function(n){var e=r.isString(n)?i(n):n;return e.protocol===t.protocol&&e.host===t.host}}():function(){return!0}},function(t,n,e){"use strict";var r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";function i(){this.message="String contains an invalid character"}i.prototype=new Error,i.prototype.code=5,i.prototype.name="InvalidCharacterError",t.exports=function(t){for(var n,e,o=String(t),u="",c=0,a=r;o.charAt(0|c)||(a="=",c%1);u+=a.charAt(63&n>>8-c%1*8)){if((e=o.charCodeAt(c+=.75))>255)throw new i;n=n<<8|e}return u}},function(t,n,e){"use strict";var r=e(18);t.exports=r.isStandardBrowserEnv()?{write:function(t,n,e,i,o,u){var c=[];c.push(t+"="+encodeURIComponent(n)),r.isNumber(e)&&c.push("expires="+new Date(e).toGMTString()),r.isString(i)&&c.push("path="+i),r.isString(o)&&c.push("domain="+o),!0===u&&c.push("secure"),document.cookie=c.join("; ")},read:function(t){var n=document.cookie.match(new RegExp("(^|;\\s*)("+t+")=([^;]*)"));return n?decodeURIComponent(n[3]):null},remove:function(t){this.write(t,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(t,n,e){"use strict";var r=e(18);function i(){this.handlers=[]}i.prototype.use=function(t,n){return this.handlers.push({fulfilled:t,rejected:n}),this.handlers.length-1},i.prototype.eject=function(t){this.handlers[t]&&(this.handlers[t]=null)},i.prototype.forEach=function(t){r.forEach(this.handlers,function(n){null!==n&&t(n)})},t.exports=i},function(t,n,e){"use strict";var r=e(18),i=e(354),o=e(133),u=e(92),c=e(355),a=e(356);function s(t){t.cancelToken&&t.cancelToken.throwIfRequested()}t.exports=function(t){return s(t),t.baseURL&&!c(t.url)&&(t.url=a(t.baseURL,t.url)),t.headers=t.headers||{},t.data=i(t.data,t.headers,t.transformRequest),t.headers=r.merge(t.headers.common||{},t.headers[t.method]||{},t.headers||{}),r.forEach(["delete","get","head","post","put","patch","common"],function(n){delete t.headers[n]}),(t.adapter||u.adapter)(t).then(function(n){return s(t),n.data=i(n.data,n.headers,t.transformResponse),n},function(n){return o(n)||(s(t),n&&n.response&&(n.response.data=i(n.response.data,n.response.headers,t.transformResponse))),Promise.reject(n)})}},function(t,n,e){"use strict";var r=e(18);t.exports=function(t,n,e){return r.forEach(e,function(e){t=e(t,n)}),t}},function(t,n,e){"use strict";t.exports=function(t){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(t)}},function(t,n,e){"use strict";t.exports=function(t,n){return n?t.replace(/\/+$/,"")+"/"+n.replace(/^\/+/,""):t}},function(t,n,e){"use strict";var r=e(134);function i(t){if("function"!=typeof t)throw new TypeError("executor must be a function.");var n;this.promise=new Promise(function(t){n=t});var e=this;t(function(t){e.reason||(e.reason=new r(t),n(e.reason))})}i.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},i.source=function(){var t;return{token:new i(function(n){t=n}),cancel:t}},t.exports=i},function(t,n,e){"use strict";t.exports=function(t){return function(n){return t.apply(null,n)}}},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function t(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}(),i=function(t){return t&&t.__esModule?t:{default:t}}(e(360));var o=function(){function t(){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),this.array=[]}return r(t,[{key:"create",value:function(t,n,e){var r={count:t,unit:n,description:e,id:(0,i.default)()};return this.array.push(r),r}},{key:"updateCount",value:function(t,n){this.array.find(function(n){return n.id===t}).count=n}},{key:"delete",value:function(t){var n=this.array.findIndex(function(n){return n.id===t});this.array.splice(n,1)}}]),t}();n.default=o},function(t,n,e){(function(n){var e=n&&n.pid?n.pid.toString(36):"";function r(){var t=Date.now(),n=r.last||t;return r.last=t>n?t:n+1}t.exports=t.exports.default=function(t){return(t||"")+""+e+r().toString(36)},t.exports.process=function(t){return(t||"")+e+r().toString(36)},t.exports.time=function(t){return(t||"")+r().toString(36)}}).call(this,e(130))},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function t(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}();var i=function(){function t(){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),this.arr=[]}return r(t,[{key:"create",value:function(t,n,e,r){var i={title:n,author:e,img:r,id:t};return this.arr.push(i),this.setToLocalStorage(this.arr),i}},{key:"delete",value:function(t){var n=this.arr.findIndex(function(n){return n.id===t});this.arr.splice(n,1),this.setToLocalStorage(this.arr)}},{key:"isLiked",value:function(t){return-1!==this.arr.findIndex(function(n){return n.id===t})}},{key:"setToLocalStorage",value:function(t){window.localStorage.setItem("likes",JSON.stringify(t))}},{key:"getFromLocalStorage",value:function(){return JSON.parse(window.localStorage.getItem("likes"))}}]),t}();n.default=i},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.recipeRender=n.rewriteQuantity=n.highLightActive=n.clearRecipe=void 0;var r=e(50),i=e(363),o=(n.clearRecipe=function(){r.elements.recipe.innerHTML=""},n.highLightActive=function(t){Array.from(document.querySelectorAll(".results__link")).forEach(function(t){return t.classList.remove("results__link--active")}),document.querySelector('a[href="#'+t+'"]')&&document.querySelector('a[href="#'+t+'"]').classList.add("results__link--active")},n.rewriteQuantity=function(t,n){document.querySelector(".recipe__info-data--people").innerHTML=t,Array.from(document.querySelectorAll(".recipe__count")).forEach(function(t,e){t.innerHTML=o(n[e].count)})},function(t){if(0==t)return"";var n=+t.toFixed(2);return new i.Fraction(n).toString()});n.recipeRender=function(t,n){var e='\n    <figure class="recipe__fig">\n        <img src="'+t.image+'" alt="'+t.title+'" class="recipe__img">\n        <h1 class="recipe__title">\n            <span>'+t.title+'</span>\n        </h1>\n    </figure>\n    <div class="recipe__details">\n        <div class="recipe__info">\n            <svg class="recipe__info-icon">\n                <use href="img/icons.svg#icon-stopwatch"></use>\n            </svg>\n            <span class="recipe__info-data recipe__info-data--minutes">'+t.time+'</span>\n            <span class="recipe__info-text"> minutes</span>\n        </div>\n        <div class="recipe__info">\n            <svg class="recipe__info-icon">\n                <use href="img/icons.svg#icon-man"></use>\n            </svg>\n            <span class="recipe__info-data recipe__info-data--people">'+t.serving+'</span>\n            <span class="recipe__info-text"> servings</span>\n\n            <div class="recipe__info-buttons">\n                <button class="btn-tiny btn-decrease">\n                    <svg>\n                        <use href="img/icons.svg#icon-circle-with-minus"></use>\n                    </svg>\n                </button>\n                <button class="btn-tiny btn-increase">\n                    <svg>\n                        <use href="img/icons.svg#icon-circle-with-plus"></use>\n                    </svg>\n                </button>\n            </div>\n\n        </div>\n        <button class="recipe__love">\n            <svg class="header__likes">\n                <use href="img/icons.svg#icon-heart'+(n?"":"-outlined")+'"></use>\n            </svg>\n        </button>\n    </div>\n    <div class="recipe__ingredients">\n        <ul class="recipe__ingredient-list">\n\n            '+t.ingredients.map(function(t){return function(t){return'\n      <li class="recipe__item">\n          <svg class="recipe__icon">\n              <use href="img/icons.svg#icon-check"></use>\n          </svg>\n          <div class="recipe__count">'+o(t.count)+'</div>\n          <div class="recipe__ingredient">\n              <span class="recipe__unit">'+t.unit+"</span>\n              "+t.description+"\n          </div>\n      </li>\n    "}(t)}).join(" ")+'\n           \n        </ul>\n\n        <button class="btn-small recipe__btn recipe__btn--add">\n            <svg class="search__icon">\n                <use href="img/icons.svg#icon-shopping-cart"></use>\n            </svg>\n            <span>Add to shopping list</span>\n        </button>\n    </div>\n\n    <div class="recipe__directions">\n        <h2 class="heading-2">How to cook it</h2>\n        <p class="recipe__directions-text">\n            This recipe was carefully designed and tested by\n            <span class="recipe__by">'+t.publisher+'</span>. Please check out directions at their website.\n        </p>\n        <a class="btn-small recipe__btn" href="'+t.url+'" target="_blank">\n            <span>Directions</span>\n            <svg class="search__icon">\n                <use href="img/icons.svg#icon-triangle-right"></use>\n            </svg>\n\n        </a>\n    </div>\n  ';r.elements.recipe.insertAdjacentHTML("beforeend",e)}},function(t,n){Fraction=function(t,n){if(void 0!==t&&n)"number"==typeof t&&"number"==typeof n?(this.numerator=t,this.denominator=n):"string"==typeof t&&"string"==typeof n&&(this.numerator=parseInt(t),this.denominator=parseInt(n));else if(void 0===n)if(num=t,"number"==typeof num)this.numerator=num,this.denominator=1;else if("string"==typeof num){var e,r,i=num.split(" ");if(i[0]&&(e=i[0]),i[1]&&(r=i[1]),e%1==0&&r&&r.match("/"))return new Fraction(e).add(new Fraction(r));if(!e||r)return;if("string"==typeof e&&e.match("/")){var o=e.split("/");this.numerator=o[0],this.denominator=o[1]}else{if("string"==typeof e&&e.match("."))return new Fraction(parseFloat(e));this.numerator=parseInt(e),this.denominator=1}}this.normalize()},Fraction.prototype.clone=function(){return new Fraction(this.numerator,this.denominator)},Fraction.prototype.toString=function(){if("NaN"===this.denominator)return"NaN";var t=this.numerator/this.denominator>0?Math.floor(this.numerator/this.denominator):Math.ceil(this.numerator/this.denominator),n=this.numerator%this.denominator,e=this.denominator,r=[];return 0!=t&&r.push(t),0!=n&&r.push((0===t?n:Math.abs(n))+"/"+e),r.length>0?r.join(" "):0},Fraction.prototype.rescale=function(t){return this.numerator*=t,this.denominator*=t,this},Fraction.prototype.add=function(t){var n=this.clone();return t=t instanceof Fraction?t.clone():new Fraction(t),td=n.denominator,n.rescale(t.denominator),t.rescale(td),n.numerator+=t.numerator,n.normalize()},Fraction.prototype.subtract=function(t){var n=this.clone();return t=t instanceof Fraction?t.clone():new Fraction(t),td=n.denominator,n.rescale(t.denominator),t.rescale(td),n.numerator-=t.numerator,n.normalize()},Fraction.prototype.multiply=function(t){var n=this.clone();if(t instanceof Fraction)n.numerator*=t.numerator,n.denominator*=t.denominator;else{if("number"!=typeof t)return n.multiply(new Fraction(t));n.numerator*=t}return n.normalize()},Fraction.prototype.divide=function(t){var n=this.clone();if(t instanceof Fraction)n.numerator*=t.denominator,n.denominator*=t.numerator;else{if("number"!=typeof t)return n.divide(new Fraction(t));n.denominator*=t}return n.normalize()},Fraction.prototype.equals=function(t){t instanceof Fraction||(t=new Fraction(t));var n=this.clone().normalize();t=t.clone().normalize();return n.numerator===t.numerator&&n.denominator===t.denominator},Fraction.prototype.normalize=function(){var t=function(t){return"number"==typeof t&&(t>0&&t%1>0&&t%1<1||t<0&&t%-1<0&&t%-1>-1)},n=function(t,n){if(n){var e=Math.pow(10,n);return Math.round(t*e)/e}return Math.round(t)};return function(){if(t(this.denominator)){var e=n(this.denominator,9),r=Math.pow(10,e.toString().split(".")[1].length);this.denominator=Math.round(this.denominator*r),this.numerator*=r}if(t(this.numerator)){e=n(this.numerator,9),r=Math.pow(10,e.toString().split(".")[1].length);this.numerator=Math.round(this.numerator*r),this.denominator*=r}var i=Fraction.gcf(this.numerator,this.denominator);return this.numerator/=i,this.denominator/=i,(this.numerator<0&&this.denominator<0||this.numerator>0&&this.denominator<0)&&(this.numerator*=-1,this.denominator*=-1),this}}(),Fraction.gcf=function(t,n){var e=[],r=Fraction.primeFactors(t),i=Fraction.primeFactors(n);return r.forEach(function(t){var n=i.indexOf(t);n>=0&&(e.push(t),i.splice(n,1))}),0===e.length?1:function(){var t,n=e[0];for(t=1;t<e.length;t++)n*=e[t];return n}()},Fraction.primeFactors=function(t){for(var n=Math.abs(t),e=[],r=2;r*r<=n;)n%r==0?(e.push(r),n/=r):r++;return 1!=n&&e.push(n),e},t.exports.Fraction=Fraction},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.deleteItem=n.renderItem=void 0;var r=e(50);n.renderItem=function(t){var n='<li class="shopping__item" data-itemid="'+t.id+'">\n                    <div class="shopping__count">\n                        <input type="number" value="'+t.count+'" step="'+t.count+'" class="change-shopping-count">\n                        <p>'+t.unit+'</p>\n                    </div>\n                    <p class="shopping__description">'+t.description+'</p>\n                    <button class="shopping__delete btn-tiny">\n                        <svg>\n                            <use href="img/icons.svg#icon-circle-with-cross"></use>\n                        </svg>\n                    </button>\n                </li>';r.elements.shoppingList.insertAdjacentHTML("beforeend",n)},n.deleteItem=function(t){r.elements.shoppingList.removeChild(t)}},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.deleteLike=n.renderLike=n.toogleLikesListButton=n.toogleLikeButton=void 0;var r=e(50),i=e(135);n.toogleLikeButton=function(t){var n=t?"icon-heart":"icon-heart-outlined";document.querySelector(".recipe__love use").setAttribute("href","img/icons.svg#"+n)},n.toogleLikesListButton=function(t){var n=t>0?"visible":"hidden";r.elements.buttonLikes.style.visibility=n},n.renderLike=function(t,n,e,o){var u='<li>\n                    <a class="likes__link" href="#'+t+'">\n                      <figure class="likes__fig">\n                          <img src="'+o+'" alt="'+(0,i.cutTitle)(n,13)+'">\n                      </figure>\n                      <div class="likes__data">\n                          <h4 class="likes__name">'+n+'</h4>\n                          <p class="likes__author">'+e+"</p>\n                      </div>\n                    </a>\n                  </li>";r.elements.likesList.insertAdjacentHTML("beforeend",u)},n.deleteLike=function(t){var n=document.querySelector('.likes__link[href="#'+t+'"]').parentNode;n.parentNode&&n.parentNode.removeChild(n)}},function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var _createClass=function(){function t(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}(),_axios=__webpack_require__(128),_axios2=_interopRequireDefault(_axios);function _interopRequireDefault(t){return t&&t.__esModule?t:{default:t}}function _asyncToGenerator(t){return function(){var n=t.apply(this,arguments);return new Promise(function(t,e){return function r(i,o){try{var u=n[i](o),c=u.value}catch(t){return void e(t)}if(!u.done)return Promise.resolve(c).then(function(t){r("next",t)},function(t){r("throw",t)});t(c)}("next")})}}function _classCallCheck(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}var Recipe=function(){function Recipe(t){_classCallCheck(this,Recipe),this.id=t}return _createClass(Recipe,[{key:"httpRequest",value:function(){var t=_asyncToGenerator(regeneratorRuntime.mark(function t(){var n,e,r,i;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,n="e27bdefe5f0114fd257c56deda292c63",e="https://cors-anywhere.herokuapp.com/",r="https://www.food2fork.com/api/get",t.next=6,(0,_axios2.default)(""+e+r+"?key="+n+"&rId="+this.id);case 6:i=t.sent,this.title=i.data.recipe.title,this.image=i.data.recipe.image_url,this.publisher=i.data.recipe.publisher,this.ingredients=i.data.recipe.ingredients,this.url=i.data.recipe.source_url,t.next=18;break;case 14:t.prev=14,t.t0=t.catch(0),console.log(t.t0),alert("Something went wrong :(");case 18:case"end":return t.stop()}},t,this,[[0,14]])}));return function(){return t.apply(this,arguments)}}()},{key:"calcTime",value:function(){var t=15*Math.ceil(this.ingredients.length/3);this.time=t}},{key:"calcServing",value:function(){this.serving=4}},{key:"rewriteIngredients",value:function rewriteIngredients(){var unitLong=["tablespoons","tablespoon","ounces","ounce","teaspoons","teaspoon","cups","pounds"],unitShort=["tbsp","tbsp","oz","oz","tsp","cup","pound"],newIngredients=this.ingredients.map(function(elem){var ingredient=elem.toLowerCase();unitLong.forEach(function(t,n){return ingredient=ingredient.replace(t,unitShort[n])}),ingredient=ingredient.replace(/ *\([^)]*\) */g," ");var IngObj=void 0,splitIng=ingredient.split(" "),unitIndex=splitIng.findIndex(function(t){return unitShort.some(function(n){return t.includes(n)})});if(unitIndex>-1){var index=unitShort.findIndex(function(t){return splitIng[unitIndex].includes(t)});if(splitIng[unitIndex]=unitShort[index],1===unitIndex)IngObj={count:eval(splitIng[0].replace("-","+")),unit:splitIng[unitIndex],description:splitIng.slice(unitIndex+1).join(" ")};else{var values=splitIng.slice(0,unitIndex);values=values.filter(function(t){return parseInt(t,10)});var str=values.reduce(function(t,n){return t+"+"+n}),value=eval(str.replace("-","+"));IngObj={count:value,unit:splitIng[unitIndex],description:splitIng.slice(unitIndex+1).join(" ")}}}else IngObj=parseInt(splitIng[0])?{count:eval(splitIng[0].replace("-","+")),unit:"",description:splitIng.slice(1).join(" ")}:{count:0,unit:"",description:splitIng.join(" ")};return IngObj});this.ingredients=newIngredients}},{key:"recountIngredients",value:function(t){var n=this,e="inc"===t?this.serving+1:this.serving-1;this.ingredients.forEach(function(t){var r=t.count*e/n.serving;t.count=r}),this.serving=e}}]),Recipe}();exports.default=Recipe}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZXhwb3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FuLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmFpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZHAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tbGVuZ3RoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hLWZ1bmN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2hpZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVkZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLWh0bWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faGFzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWlvYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcGQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdwby5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3V0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY3R4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpY3QtbWV0aG9kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kZWZpbmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LXNhcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1tZXRob2RzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3R5cGVkLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21ldGFkYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21ldGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbGlicmFyeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hZGQtdG8tdW5zY29wYWJsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcHJvcGVydHktZGVzYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL191aWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tYWJzb2x1dGUtaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtc3BlY2llcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hbi1pbnN0YW5jZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mb3Itb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVkZWZpbmUtYWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC10by1zdHJpbmctdGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy10cmltLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXJhdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL192YWxpZGF0ZS1jb2xsZWN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lvYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LXBpZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jbGFzc29mLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy92aWV3cy9iYXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NoYXJlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1yZWdleHAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1kZXRlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmxhZ3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZml4LXJlLXdrcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zcGVjaWVzLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3VzZXItYWdlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190eXBlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZm9yY2VkLXBhbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtY29sbGVjdGlvbi1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtY29sbGVjdGlvbi1mcm9tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RvbS1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fd2tzLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zaGFyZWQta2V5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2VudW0tYnVnLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faHRtbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtcHJvdG8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXdzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2luaGVyaXQtaWYtcmVxdWlyZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXJlcGVhdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLXNpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1leHBtMS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLWNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmFpbHMtaXMtcmVnZXhwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLWFycmF5LWl0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY3JlYXRlLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LXNwZWNpZXMtY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWZpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdGFzay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19taWNyb3Rhc2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbmV3LXByb21pc2UtY2FwYWJpbGl0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190eXBlZC1idWZmZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9kZWZhdWx0cy5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2llOC1kb20tZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy1leHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWtleXMtaW50ZXJuYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWRwcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wbi1leHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWFzc2lnbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19iaW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ludm9rZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wYXJzZS1pbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcGFyc2UtZmxvYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYS1udW1iZXItdmFsdWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLWxvZzFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtZnJvdW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItY2FsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1yZWR1Y2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktY29weS13aXRoaW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1zdGVwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5mbGFncy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wZXJmb3JtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3Byb21pc2UtcmVzb2x2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi1zdHJvbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LndlYWstbWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvbGxlY3Rpb24td2Vhay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vd24ta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mbGF0dGVuLWludG8tYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXBhZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtdG8tYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi10by1qc29uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWZyb20taXRlcmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1zY2FsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2JpbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2FkYXB0ZXJzL3hoci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvY3JlYXRlRXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvaXNDYW5jZWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy92aWV3cy9zZWFyY2hWaWV3LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvc2hpbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZW51bS1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZnJlZXplLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5zZWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5wcmV2ZW50LWV4dGVuc2lvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLWZyb3plbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuaXMtc2VhbGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1leHRlbnNpYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5hc3NpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NhbWUtdmFsdWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5mdW5jdGlvbi5iaW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmZ1bmN0aW9uLm5hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24uaGFzLWluc3RhbmNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnBhcnNlLWludC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5wYXJzZS1mbG9hdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnRvLWZpeGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci50by1wcmVjaXNpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmVwc2lsb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLWZpbml0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtbmFuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5pcy1zYWZlLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLm1heC1zYWZlLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLm1pbi1zYWZlLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnBhcnNlLWZsb2F0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1pbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5hY29zaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmFzaW5oLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguYXRhbmguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5jYnJ0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguY2x6MzIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5jb3NoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguZXhwbTEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5mcm91bmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5oeXBvdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmltdWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5sb2cxMC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmxvZzFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgubG9nMi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnNpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5zaW5oLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgudGFuaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnRydW5jLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5mcm9tLWNvZGUtcG9pbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnJhdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcudHJpbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmNvZGUtcG9pbnQtYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmVuZHMtd2l0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnJlcGVhdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3RhcnRzLXdpdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmFuY2hvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuYmlnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5ibGluay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuYm9sZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZml4ZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRjb2xvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udHNpemUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLml0YWxpY3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmxpbmsuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnNtYWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdHJpa2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN1Yi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3VwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUubm93LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8tanNvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLnRvLWlzby1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGF0ZS10by1pc28tc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8tc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RhdGUtdG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmlzLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZyb20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkub2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuam9pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zbGljZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zb3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZvci1lYWNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LXNwZWNpZXMtY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkubWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZpbHRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zb21lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmV2ZXJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnJlZHVjZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UtcmlnaHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaW5kZXgtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkubGFzdC1pbmRleC1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5jb3B5LXdpdGhpbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZpbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmluZC1pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zcGVjaWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAudG8tc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5tYXRjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAucmVwbGFjZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuc2VhcmNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5zcGxpdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5wcm9taXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LndlYWstc2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmFycmF5LWJ1ZmZlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5kYXRhLXZpZXcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50OC1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC51aW50OC1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC51aW50OC1jbGFtcGVkLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmludDE2LWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQxNi1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5pbnQzMi1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC51aW50MzItYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuZmxvYXQzMi1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5mbG9hdDY0LWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuYXBwbHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5jb25zdHJ1Y3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5kZWZpbmUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5kZWxldGUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5lbnVtZXJhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5nZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuaGFzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuaXMtZXh0ZW5zaWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0Lm93bi1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QucHJldmVudC1leHRlbnNpb25zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5hcnJheS5pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5hcnJheS5mbGF0LW1hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5hcnJheS5mbGF0dGVuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy5hdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcucGFkLXN0YXJ0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtZW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy50cmltLWxlZnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tcmlnaHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLm1hdGNoLWFsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zeW1ib2wuYXN5bmMtaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3ltYm9sLm9ic2VydmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LnZhbHVlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QuZW50cmllcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QuZGVmaW5lLWdldHRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QuZGVmaW5lLXNldHRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QubG9va3VwLWdldHRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QubG9va3VwLXNldHRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXAudG8tanNvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zZXQudG8tanNvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXAub2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc2V0Lm9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LndlYWstbWFwLm9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LndlYWstc2V0Lm9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hcC5mcm9tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnNldC5mcm9tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LndlYWstbWFwLmZyb20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcud2Vhay1zZXQuZnJvbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3lzdGVtLmdsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5lcnJvci5pcy1lcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmNsYW1wLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguZGVnLXBlci1yYWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5kZWdyZWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguZnNjYWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguaWFkZGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5pc3ViaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmltdWxoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGgucmFkLXBlci1kZWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5yYWRpYW5zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguc2NhbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC51bXVsaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLnNpZ25iaXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucHJvbWlzZS5maW5hbGx5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnByb21pc2UudHJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZGVmaW5lLW1ldGFkYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZGVsZXRlLW1ldGFkYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW1ldGFkYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW1ldGFkYXRhLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtb3duLW1ldGFkYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW93bi1tZXRhZGF0YS1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuaGFzLW1ldGFkYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuaGFzLW93bi1tZXRhZGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0Lm1ldGFkYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LmFzYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi50aW1lcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuaW1tZWRpYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL3JlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9yZWdleHAvZXNjYXBlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvY29yZS5yZWdleHAuZXNjYXBlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlcGxhY2VyLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvbW9kZWxzL1NlYXJjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2F4aW9zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pcy1idWZmZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0F4aW9zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9zZXR0bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2VuaGFuY2VFcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYnVpbGRVUkwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9idG9hLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb29raWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9JbnRlcmNlcHRvck1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2Rpc3BhdGNoUmVxdWVzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvdHJhbnNmb3JtRGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29tYmluZVVSTHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsVG9rZW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3NwcmVhZC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvbW9kZWxzL0xpc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3VuaXFpZC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvbW9kZWxzL0xpa2VzLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy92aWV3cy9yZWNpcGVWaWV3LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mcmFjdGlvbmFsL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9qcy92aWV3cy9saXN0Vmlldy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvdmlld3MvbGlrZXNWaWV3LmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9tb2RlbHMvUmVjaXBlLmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiZ2xvYmFsIiwiY29yZSIsImhpZGUiLCJyZWRlZmluZSIsImN0eCIsIiRleHBvcnQiLCJ0eXBlIiwic291cmNlIiwib3duIiwib3V0IiwiZXhwIiwiSVNfRk9SQ0VEIiwiRiIsIklTX0dMT0JBTCIsIkciLCJJU19TVEFUSUMiLCJTIiwiSVNfUFJPVE8iLCJQIiwiSVNfQklORCIsIkIiLCJ0YXJnZXQiLCJleHBQcm90byIsInVuZGVmaW5lZCIsIkZ1bmN0aW9uIiwiVSIsIlciLCJSIiwiaXNPYmplY3QiLCJpdCIsIlR5cGVFcnJvciIsIndpbmRvdyIsIk1hdGgiLCJzZWxmIiwiX19nIiwiZXhlYyIsImUiLCJzdG9yZSIsInVpZCIsIlVTRV9TWU1CT0wiLCJhIiwiYW5PYmplY3QiLCJJRThfRE9NX0RFRklORSIsInRvUHJpbWl0aXZlIiwiZFAiLCJmIiwiTyIsIkF0dHJpYnV0ZXMiLCJ0b0ludGVnZXIiLCJtaW4iLCJkZWZpbmVkIiwiY3JlYXRlRGVzYyIsImhhcyIsIlNSQyIsIiR0b1N0cmluZyIsIlRQTCIsInNwbGl0IiwiaW5zcGVjdFNvdXJjZSIsInZhbCIsInNhZmUiLCJpc0Z1bmN0aW9uIiwiam9pbiIsIlN0cmluZyIsInRoaXMiLCJmYWlscyIsInF1b3QiLCJjcmVhdGVIVE1MIiwic3RyaW5nIiwidGFnIiwiYXR0cmlidXRlIiwicDEiLCJyZXBsYWNlIiwiTkFNRSIsInRlc3QiLCJ0b0xvd2VyQ2FzZSIsImxlbmd0aCIsIklPYmplY3QiLCJwSUUiLCJ0b0lPYmplY3QiLCJnT1BEIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwidG9PYmplY3QiLCJJRV9QUk9UTyIsIk9iamVjdFByb3RvIiwiZ2V0UHJvdG90eXBlT2YiLCJjb25zdHJ1Y3RvciIsImlzQnVmZmVyIiwidG9TdHJpbmciLCJpc0FycmF5IiwiZm9yRWFjaCIsIm9iaiIsImZuIiwiaXNBcnJheUJ1ZmZlciIsImlzRm9ybURhdGEiLCJGb3JtRGF0YSIsImlzQXJyYXlCdWZmZXJWaWV3IiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJidWZmZXIiLCJpc1N0cmluZyIsImlzTnVtYmVyIiwiaXNVbmRlZmluZWQiLCJpc0RhdGUiLCJpc0ZpbGUiLCJpc0Jsb2IiLCJpc1N0cmVhbSIsInBpcGUiLCJpc1VSTFNlYXJjaFBhcmFtcyIsIlVSTFNlYXJjaFBhcmFtcyIsImlzU3RhbmRhcmRCcm93c2VyRW52IiwibmF2aWdhdG9yIiwicHJvZHVjdCIsImRvY3VtZW50IiwibWVyZ2UiLCJyZXN1bHQiLCJhc3NpZ25WYWx1ZSIsImFyZ3VtZW50cyIsImV4dGVuZCIsImIiLCJ0aGlzQXJnIiwidHJpbSIsInN0ciIsInZlcnNpb24iLCJfX2UiLCJhRnVuY3Rpb24iLCJ0aGF0IiwiYXBwbHkiLCJzbGljZSIsIm1ldGhvZCIsImFyZyIsInZhbHVlT2YiLCJjZWlsIiwiZmxvb3IiLCJpc05hTiIsIktFWSIsInRvTGVuZ3RoIiwiYXNjIiwiVFlQRSIsIiRjcmVhdGUiLCJJU19NQVAiLCJJU19GSUxURVIiLCJJU19TT01FIiwiSVNfRVZFUlkiLCJJU19GSU5EX0lOREVYIiwiTk9fSE9MRVMiLCIkdGhpcyIsImNhbGxiYWNrZm4iLCJyZXMiLCJpbmRleCIsInB1c2giLCJMSUJSQVJZIiwiJHR5cGVkIiwiJGJ1ZmZlciIsImFuSW5zdGFuY2UiLCJwcm9wZXJ0eURlc2MiLCJyZWRlZmluZUFsbCIsInRvSW5kZXgiLCJ0b0Fic29sdXRlSW5kZXgiLCJjbGFzc29mIiwiaXNBcnJheUl0ZXIiLCJnT1BOIiwiZ2V0SXRlckZuIiwid2tzIiwiY3JlYXRlQXJyYXlNZXRob2QiLCJjcmVhdGVBcnJheUluY2x1ZGVzIiwic3BlY2llc0NvbnN0cnVjdG9yIiwiQXJyYXlJdGVyYXRvcnMiLCJJdGVyYXRvcnMiLCIkaXRlckRldGVjdCIsInNldFNwZWNpZXMiLCJhcnJheUZpbGwiLCJhcnJheUNvcHlXaXRoaW4iLCIkRFAiLCIkR09QRCIsIlJhbmdlRXJyb3IiLCJVaW50OEFycmF5IiwiQXJyYXlQcm90byIsIkFycmF5IiwiJEFycmF5QnVmZmVyIiwiJERhdGFWaWV3IiwiRGF0YVZpZXciLCJhcnJheUZvckVhY2giLCJhcnJheUZpbHRlciIsImFycmF5U29tZSIsImFycmF5RXZlcnkiLCJhcnJheUZpbmQiLCJhcnJheUZpbmRJbmRleCIsImFycmF5SW5jbHVkZXMiLCJhcnJheUluZGV4T2YiLCJhcnJheVZhbHVlcyIsInZhbHVlcyIsImFycmF5S2V5cyIsImtleXMiLCJhcnJheUVudHJpZXMiLCJlbnRyaWVzIiwiYXJyYXlMYXN0SW5kZXhPZiIsImxhc3RJbmRleE9mIiwiYXJyYXlSZWR1Y2UiLCJyZWR1Y2UiLCJhcnJheVJlZHVjZVJpZ2h0IiwicmVkdWNlUmlnaHQiLCJhcnJheUpvaW4iLCJhcnJheVNvcnQiLCJzb3J0IiwiYXJyYXlTbGljZSIsImFycmF5VG9TdHJpbmciLCJhcnJheVRvTG9jYWxlU3RyaW5nIiwidG9Mb2NhbGVTdHJpbmciLCJJVEVSQVRPUiIsIlRBRyIsIlRZUEVEX0NPTlNUUlVDVE9SIiwiREVGX0NPTlNUUlVDVE9SIiwiQUxMX0NPTlNUUlVDVE9SUyIsIkNPTlNUUiIsIlRZUEVEX0FSUkFZIiwiVFlQRUQiLCJWSUVXIiwiJG1hcCIsImFsbG9jYXRlIiwiTElUVExFX0VORElBTiIsIlVpbnQxNkFycmF5IiwiRk9SQ0VEX1NFVCIsInNldCIsInRvT2Zmc2V0IiwiQllURVMiLCJvZmZzZXQiLCJ2YWxpZGF0ZSIsIkMiLCJzcGVjaWVzRnJvbUxpc3QiLCJsaXN0IiwiZnJvbUxpc3QiLCJhZGRHZXR0ZXIiLCJpbnRlcm5hbCIsIl9kIiwiJGZyb20iLCJzdGVwIiwiaXRlcmF0b3IiLCJhTGVuIiwibWFwZm4iLCJtYXBwaW5nIiwiaXRlckZuIiwibmV4dCIsImRvbmUiLCIkb2YiLCJUT19MT0NBTEVfQlVHIiwiJHRvTG9jYWxlU3RyaW5nIiwicHJvdG8iLCJjb3B5V2l0aGluIiwic3RhcnQiLCJldmVyeSIsImZpbGwiLCJmaWx0ZXIiLCJmaW5kIiwicHJlZGljYXRlIiwiZmluZEluZGV4IiwiaW5kZXhPZiIsInNlYXJjaEVsZW1lbnQiLCJpbmNsdWRlcyIsInNlcGFyYXRvciIsIm1hcCIsInJldmVyc2UiLCJtaWRkbGUiLCJzb21lIiwiY29tcGFyZWZuIiwic3ViYXJyYXkiLCJiZWdpbiIsImVuZCIsIiRiZWdpbiIsImJ5dGVPZmZzZXQiLCJCWVRFU19QRVJfRUxFTUVOVCIsIiRzbGljZSIsIiRzZXQiLCJhcnJheUxpa2UiLCJzcmMiLCJsZW4iLCIkaXRlcmF0b3JzIiwiaXNUQUluZGV4IiwiJGdldERlc2MiLCIkc2V0RGVzYyIsImRlc2MiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIiRUeXBlZEFycmF5UHJvdG90eXBlJCIsIndyYXBwZXIiLCJDTEFNUEVEIiwiR0VUVEVSIiwiU0VUVEVSIiwiVHlwZWRBcnJheSIsIkJhc2UiLCJUQUMiLCJGT1JDRUQiLCJBQlYiLCJUeXBlZEFycmF5UHJvdG90eXBlIiwiYWRkRWxlbWVudCIsImRhdGEiLCJ2Iiwicm91bmQiLCJzZXR0ZXIiLCIkb2Zmc2V0IiwiJGxlbmd0aCIsImJ5dGVMZW5ndGgiLCJrbGFzcyIsIiRsZW4iLCJpdGVyIiwiY29uY2F0IiwiJG5hdGl2ZUl0ZXJhdG9yIiwiQ09SUkVDVF9JVEVSX05BTUUiLCIkaXRlcmF0b3IiLCJvZiIsImZyb20iLCJNYXAiLCJzaGFyZWQiLCJnZXRPckNyZWF0ZU1ldGFkYXRhTWFwIiwidGFyZ2V0S2V5IiwidGFyZ2V0TWV0YWRhdGEiLCJrZXlNZXRhZGF0YSIsIk1ldGFkYXRhS2V5IiwibWV0YWRhdGFNYXAiLCJNZXRhZGF0YVZhbHVlIiwiXyIsIk1FVEEiLCJzZXREZXNjIiwiaWQiLCJpc0V4dGVuc2libGUiLCJGUkVFWkUiLCJwcmV2ZW50RXh0ZW5zaW9ucyIsInNldE1ldGEiLCJ3IiwibWV0YSIsIk5FRUQiLCJmYXN0S2V5IiwiZ2V0V2VhayIsIm9uRnJlZXplIiwiVU5TQ09QQUJMRVMiLCJiaXRtYXAiLCJweCIsInJhbmRvbSIsIiRrZXlzIiwiZW51bUJ1Z0tleXMiLCJtYXgiLCJkUHMiLCJFbXB0eSIsImNyZWF0ZURpY3QiLCJpZnJhbWVEb2N1bWVudCIsImlmcmFtZSIsInN0eWxlIiwiZGlzcGxheSIsImFwcGVuZENoaWxkIiwiY29udGVudFdpbmRvdyIsIm9wZW4iLCJ3cml0ZSIsImx0IiwiY2xvc2UiLCJQcm9wZXJ0aWVzIiwiaGlkZGVuS2V5cyIsImdldE93blByb3BlcnR5TmFtZXMiLCJERVNDUklQVE9SUyIsIlNQRUNJRVMiLCJDb25zdHJ1Y3RvciIsImZvcmJpZGRlbkZpZWxkIiwiQlJFQUsiLCJSRVRVUk4iLCJpdGVyYWJsZSIsImRlZiIsInN0YXQiLCJzcGFjZXMiLCJzcGFjZSIsImx0cmltIiwiUmVnRXhwIiwicnRyaW0iLCJleHBvcnRlciIsIkFMSUFTIiwiRk9SQ0UiLCJfdCIsImNvZiIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiQVJHIiwiVCIsInRyeUdldCIsImNhbGxlZSIsImVsZW1lbnRzIiwic2VhcmNoSW5wdXQiLCJxdWVyeVNlbGVjdG9yIiwic2VhcmNoRm9ybSIsInJlbmRlclJlY2lwZXNMaXN0IiwicmVzdWx0c0Jsb2NrIiwicGFnaW5QYWdlcyIsInJlY2lwZSIsInNlcnZpbmciLCJzaG9wcGluZ0xpc3QiLCJidXR0b25MaWtlcyIsImxpa2VzTGlzdCIsInJlbmRlclNwaW5uZXIiLCJwYXJlbnQiLCJpbnNlcnRBZGphY2VudEhUTUwiLCJsb2FkZXIiLCJkZWxTcGlubmVyIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiY29weXJpZ2h0IiwiSVNfSU5DTFVERVMiLCJlbCIsImZyb21JbmRleCIsImdldE93blByb3BlcnR5U3ltYm9scyIsIk1BVENIIiwiaXNSZWdFeHAiLCJTQUZFX0NMT1NJTkciLCJyaXRlciIsInNraXBDbG9zaW5nIiwiYXJyIiwiaWdub3JlQ2FzZSIsIm11bHRpbGluZSIsInVuaWNvZGUiLCJzdGlja3kiLCJTWU1CT0wiLCJmbnMiLCJzdHJmbiIsInJ4Zm4iLCJEIiwidXNlckFnZW50IiwiZm9yT2YiLCJzZXRUb1N0cmluZ1RhZyIsImluaGVyaXRJZlJlcXVpcmVkIiwibWV0aG9kcyIsImNvbW1vbiIsIklTX1dFQUsiLCJBRERFUiIsImZpeE1ldGhvZCIsImluc3RhbmNlIiwiSEFTTlRfQ0hBSU5JTkciLCJUSFJPV1NfT05fUFJJTUlUSVZFUyIsIkFDQ0VQVF9JVEVSQUJMRVMiLCJCVUdHWV9aRVJPIiwiJGluc3RhbmNlIiwiY2xlYXIiLCJnZXRDb25zdHJ1Y3RvciIsInNldFN0cm9uZyIsIlR5cGVkIiwiVHlwZWRBcnJheUNvbnN0cnVjdG9ycyIsIksiLCJfX2RlZmluZVNldHRlcl9fIiwiQ09MTEVDVElPTiIsIkEiLCJjYiIsIm1hcEZuIiwibmV4dEl0ZW0iLCJpcyIsImNyZWF0ZUVsZW1lbnQiLCJ3a3NFeHQiLCIkU3ltYm9sIiwiY2hhckF0IiwiZG9jdW1lbnRFbGVtZW50IiwiY2hlY2siLCJzZXRQcm90b3R5cGVPZiIsImJ1Z2d5IiwiX19wcm90b19fIiwiY291bnQiLCJJbmZpbml0eSIsInNpZ24iLCJ4IiwiJGV4cG0xIiwiZXhwbTEiLCJUT19TVFJJTkciLCJwb3MiLCJjaGFyQ29kZUF0IiwiJGl0ZXJDcmVhdGUiLCJCVUdHWSIsInJldHVyblRoaXMiLCJERUZBVUxUIiwiSVNfU0VUIiwiSXRlcmF0b3JQcm90b3R5cGUiLCJnZXRNZXRob2QiLCJraW5kIiwiREVGX1ZBTFVFUyIsIlZBTFVFU19CVUciLCIkbmF0aXZlIiwiJGRlZmF1bHQiLCIkZW50cmllcyIsIiRhbnlOYXRpdmUiLCJkZXNjcmlwdG9yIiwic2VhcmNoU3RyaW5nIiwicmUiLCIkZGVmaW5lUHJvcGVydHkiLCJnZXRJdGVyYXRvck1ldGhvZCIsIm9yaWdpbmFsIiwiZW5kUG9zIiwiYWRkVG9VbnNjb3BhYmxlcyIsIml0ZXJhdGVkIiwiX2kiLCJfayIsIkFyZ3VtZW50cyIsImRlZmVyIiwiY2hhbm5lbCIsInBvcnQiLCJpbnZva2UiLCJodG1sIiwiY2VsIiwicHJvY2VzcyIsInNldFRhc2siLCJzZXRJbW1lZGlhdGUiLCJjbGVhclRhc2siLCJjbGVhckltbWVkaWF0ZSIsIk1lc3NhZ2VDaGFubmVsIiwiRGlzcGF0Y2giLCJjb3VudGVyIiwicXVldWUiLCJydW4iLCJsaXN0ZW5lciIsImV2ZW50IiwiYXJncyIsIm5leHRUaWNrIiwibm93IiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvc3RNZXNzYWdlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImltcG9ydFNjcmlwdHMiLCJzZXRUaW1lb3V0IiwibWFjcm90YXNrIiwiT2JzZXJ2ZXIiLCJNdXRhdGlvbk9ic2VydmVyIiwiV2ViS2l0TXV0YXRpb25PYnNlcnZlciIsIlByb21pc2UiLCJpc05vZGUiLCJoZWFkIiwibGFzdCIsIm5vdGlmeSIsImZsdXNoIiwiZG9tYWluIiwiZXhpdCIsImVudGVyIiwic3RhbmRhbG9uZSIsInJlc29sdmUiLCJwcm9taXNlIiwidGhlbiIsInRvZ2dsZSIsIm5vZGUiLCJjcmVhdGVUZXh0Tm9kZSIsIm9ic2VydmUiLCJjaGFyYWN0ZXJEYXRhIiwidGFzayIsInJlamVjdCIsIiQkcmVzb2x2ZSIsIiQkcmVqZWN0IiwiUFJPVE9UWVBFIiwiV1JPTkdfSU5ERVgiLCJCYXNlQnVmZmVyIiwiYWJzIiwicG93IiwibG9nIiwiTE4yIiwiJEJVRkZFUiIsIiRMRU5HVEgiLCIkT0ZGU0VUIiwicGFja0lFRUU3NTQiLCJtTGVuIiwibkJ5dGVzIiwiZUxlbiIsImVNYXgiLCJlQmlhcyIsInJ0IiwidW5wYWNrSUVFRTc1NCIsIm5CaXRzIiwiTmFOIiwidW5wYWNrSTMyIiwiYnl0ZXMiLCJwYWNrSTgiLCJwYWNrSTE2IiwicGFja0kzMiIsInBhY2tGNjQiLCJwYWNrRjMyIiwidmlldyIsImlzTGl0dGxlRW5kaWFuIiwiaW50SW5kZXgiLCJfYiIsInBhY2siLCJjb252ZXJzaW9uIiwiQXJyYXlCdWZmZXJQcm90byIsImoiLCIkc2V0SW50OCIsInNldEludDgiLCJnZXRJbnQ4Iiwic2V0VWludDgiLCJidWZmZXJMZW5ndGgiLCJnZXRVaW50OCIsImdldEludDE2IiwiZ2V0VWludDE2IiwiZ2V0SW50MzIiLCJnZXRVaW50MzIiLCJnZXRGbG9hdDMyIiwiZ2V0RmxvYXQ2NCIsInNldEludDE2Iiwic2V0VWludDE2Iiwic2V0SW50MzIiLCJzZXRVaW50MzIiLCJzZXRGbG9hdDMyIiwic2V0RmxvYXQ2NCIsInV0aWxzIiwibm9ybWFsaXplSGVhZGVyTmFtZSIsIkRFRkFVTFRfQ09OVEVOVF9UWVBFIiwiQ29udGVudC1UeXBlIiwic2V0Q29udGVudFR5cGVJZlVuc2V0IiwiaGVhZGVycyIsImRlZmF1bHRzIiwiYWRhcHRlciIsIlhNTEh0dHBSZXF1ZXN0IiwiZ2V0RGVmYXVsdEFkYXB0ZXIiLCJ0cmFuc2Zvcm1SZXF1ZXN0IiwiSlNPTiIsInN0cmluZ2lmeSIsInRyYW5zZm9ybVJlc3BvbnNlIiwicGFyc2UiLCJ0aW1lb3V0IiwieHNyZkNvb2tpZU5hbWUiLCJ4c3JmSGVhZGVyTmFtZSIsIm1heENvbnRlbnRMZW5ndGgiLCJ2YWxpZGF0ZVN0YXR1cyIsInN0YXR1cyIsIkFjY2VwdCIsImciLCJldmFsIiwibmFtZXMiLCJnZXRLZXlzIiwiZGVmaW5lUHJvcGVydGllcyIsIndpbmRvd05hbWVzIiwiZ2V0V2luZG93TmFtZXMiLCJnT1BTIiwiJGFzc2lnbiIsImFzc2lnbiIsImsiLCJnZXRTeW1ib2xzIiwiaXNFbnVtIiwiZmFjdG9yaWVzIiwicGFydEFyZ3MiLCJib3VuZCIsImNvbnN0cnVjdCIsInVuIiwiJHBhcnNlSW50IiwicGFyc2VJbnQiLCIkdHJpbSIsIndzIiwiaGV4IiwicmFkaXgiLCIkcGFyc2VGbG9hdCIsInBhcnNlRmxvYXQiLCJtc2ciLCJpc0Zpbml0ZSIsImxvZzFwIiwiRVBTSUxPTiIsIkVQU0lMT04zMiIsIk1BWDMyIiwiTUlOMzIiLCJmcm91bmQiLCIkYWJzIiwiJHNpZ24iLCJyb3VuZFRpZXNUb0V2ZW4iLCJyZXQiLCJtZW1vIiwiaXNSaWdodCIsInRvIiwiaW5jIiwiZmxhZ3MiLCJuZXdQcm9taXNlQ2FwYWJpbGl0eSIsInByb21pc2VDYXBhYmlsaXR5Iiwic3Ryb25nIiwiZW50cnkiLCJnZXRFbnRyeSIsIiRpdGVyRGVmaW5lIiwiU0laRSIsIl9mIiwiX2wiLCJkZWxldGUiLCJwcmV2IiwiYWRkIiwiSW50ZXJuYWxNYXAiLCJlYWNoIiwid2VhayIsInVuY2F1Z2h0RnJvemVuU3RvcmUiLCJ1ZnN0b3JlIiwidG1wIiwiJFdlYWtNYXAiLCJmcmVlemUiLCIkaGFzIiwiVW5jYXVnaHRGcm96ZW5TdG9yZSIsImZpbmRVbmNhdWdodEZyb3plbiIsInNwbGljZSIsIm51bWJlciIsIlJlZmxlY3QiLCJvd25LZXlzIiwiSVNfQ09OQ0FUX1NQUkVBREFCTEUiLCJmbGF0dGVuSW50b0FycmF5Iiwic291cmNlTGVuIiwiZGVwdGgiLCJtYXBwZXIiLCJlbGVtZW50Iiwic3ByZWFkYWJsZSIsInRhcmdldEluZGV4Iiwic291cmNlSW5kZXgiLCJyZXBlYXQiLCJtYXhMZW5ndGgiLCJmaWxsU3RyaW5nIiwibGVmdCIsInN0cmluZ0xlbmd0aCIsImZpbGxTdHIiLCJpbnRNYXhMZW5ndGgiLCJmaWxsTGVuIiwic3RyaW5nRmlsbGVyIiwiaXNFbnRyaWVzIiwic2NhbGUiLCJpbkxvdyIsImluSGlnaCIsIm91dExvdyIsIm91dEhpZ2giLCJjYWNoZWRTZXRUaW1lb3V0IiwiY2FjaGVkQ2xlYXJUaW1lb3V0IiwiZGVmYXVsdFNldFRpbW91dCIsIkVycm9yIiwiZGVmYXVsdENsZWFyVGltZW91dCIsInJ1blRpbWVvdXQiLCJmdW4iLCJjbGVhclRpbWVvdXQiLCJjdXJyZW50UXVldWUiLCJkcmFpbmluZyIsInF1ZXVlSW5kZXgiLCJjbGVhblVwTmV4dFRpY2siLCJkcmFpblF1ZXVlIiwibWFya2VyIiwicnVuQ2xlYXJUaW1lb3V0IiwiSXRlbSIsImFycmF5Iiwibm9vcCIsInRpdGxlIiwiYnJvd3NlciIsImVudiIsImFyZ3YiLCJ2ZXJzaW9ucyIsIm9uIiwiYWRkTGlzdGVuZXIiLCJvbmNlIiwib2ZmIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJlbWl0IiwicHJlcGVuZExpc3RlbmVyIiwicHJlcGVuZE9uY2VMaXN0ZW5lciIsImxpc3RlbmVycyIsImJpbmRpbmciLCJjd2QiLCJjaGRpciIsImRpciIsInVtYXNrIiwic2V0dGxlIiwiYnVpbGRVUkwiLCJwYXJzZUhlYWRlcnMiLCJpc1VSTFNhbWVPcmlnaW4iLCJjcmVhdGVFcnJvciIsImJ0b2EiLCJjb25maWciLCJyZXF1ZXN0RGF0YSIsInJlcXVlc3RIZWFkZXJzIiwicmVxdWVzdCIsImxvYWRFdmVudCIsInhEb21haW4iLCJYRG9tYWluUmVxdWVzdCIsInVybCIsIm9ucHJvZ3Jlc3MiLCJvbnRpbWVvdXQiLCJhdXRoIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsIkF1dGhvcml6YXRpb24iLCJ0b1VwcGVyQ2FzZSIsInBhcmFtcyIsInBhcmFtc1NlcmlhbGl6ZXIiLCJyZWFkeVN0YXRlIiwicmVzcG9uc2VVUkwiLCJyZXNwb25zZUhlYWRlcnMiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJyZXNwb25zZSIsInJlc3BvbnNlVHlwZSIsInJlc3BvbnNlVGV4dCIsInN0YXR1c1RleHQiLCJvbmVycm9yIiwiY29va2llcyIsInhzcmZWYWx1ZSIsIndpdGhDcmVkZW50aWFscyIsInJlYWQiLCJzZXRSZXF1ZXN0SGVhZGVyIiwib25Eb3dubG9hZFByb2dyZXNzIiwib25VcGxvYWRQcm9ncmVzcyIsInVwbG9hZCIsImNhbmNlbFRva2VuIiwiY2FuY2VsIiwiYWJvcnQiLCJzZW5kIiwiZW5oYW5jZUVycm9yIiwibWVzc2FnZSIsImNvZGUiLCJlcnJvciIsIl9fQ0FOQ0VMX18iLCJDYW5jZWwiLCJfYmFzZSIsImN1dFRpdGxlIiwiZ2V0SW5wdXQiLCJsaW1pdCIsIndvcmRzIiwiYWNjIiwiY3VyIiwiY3JlYXRlQnV0dG9uIiwicGFnZSIsInJlbmRlclJlc3VsdHMiLCJyZWNpcGVzIiwicmVzUGVyUGFnZSIsIm1hcmt1cCIsInJlY2lwZV9pZCIsImltYWdlX3VybCIsInB1Ymxpc2hlciIsInJlbmRlclJlY2lwZSIsInJlc0NvdW50IiwicGFnZXMiLCJidXR0b24iLCJyZW5kZXJCdXR0b25zIiwiY2xlYXJJbnB1dCIsImNsZWFyUmVzdWx0cyIsImlubmVySFRNTCIsIl9iYWJlbFBvbHlmaWxsIiwiREVGSU5FX1BST1BFUlRZIiwiZGVmaW5lIiwicGFkU3RhcnQiLCJwYWRFbmQiLCIkZmFpbHMiLCJ3a3NEZWZpbmUiLCJlbnVtS2V5cyIsIl9jcmVhdGUiLCJnT1BORXh0IiwiJEpTT04iLCJfc3RyaW5naWZ5IiwiSElEREVOIiwiVE9fUFJJTUlUSVZFIiwiU3ltYm9sUmVnaXN0cnkiLCJBbGxTeW1ib2xzIiwiT1BTeW1ib2xzIiwiVVNFX05BVElWRSIsIlFPYmplY3QiLCJmaW5kQ2hpbGQiLCJzZXRTeW1ib2xEZXNjIiwicHJvdG9EZXNjIiwid3JhcCIsInN5bSIsImlzU3ltYm9sIiwiJGRlZmluZVByb3BlcnRpZXMiLCIkcHJvcGVydHlJc0VudW1lcmFibGUiLCJFIiwiJGdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIiRnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiJGdldE93blByb3BlcnR5U3ltYm9scyIsIklTX09QIiwiZXM2U3ltYm9scyIsIndlbGxLbm93blN5bWJvbHMiLCJmb3IiLCJrZXlGb3IiLCJ1c2VTZXR0ZXIiLCJ1c2VTaW1wbGUiLCJyZXBsYWNlciIsIiRyZXBsYWNlciIsInN5bWJvbHMiLCIkZ2V0UHJvdG90eXBlT2YiLCIkZnJlZXplIiwiJHNlYWwiLCIkcHJldmVudEV4dGVuc2lvbnMiLCIkaXNGcm96ZW4iLCIkaXNTZWFsZWQiLCIkaXNFeHRlbnNpYmxlIiwieSIsIkZQcm90byIsIm5hbWVSRSIsIm1hdGNoIiwiSEFTX0lOU1RBTkNFIiwiRnVuY3Rpb25Qcm90byIsIiROdW1iZXIiLCJCUk9LRU5fQ09GIiwiVFJJTSIsInRvTnVtYmVyIiwiYXJndW1lbnQiLCJ0aGlyZCIsIm1heENvZGUiLCJmaXJzdCIsImRpZ2l0cyIsImFOdW1iZXJWYWx1ZSIsIiR0b0ZpeGVkIiwidG9GaXhlZCIsIkVSUk9SIiwibXVsdGlwbHkiLCJjMiIsImRpdmlkZSIsIm51bVRvU3RyaW5nIiwiZnJhY3Rpb25EaWdpdHMiLCJ6IiwieDIiLCIkdG9QcmVjaXNpb24iLCJ0b1ByZWNpc2lvbiIsInByZWNpc2lvbiIsIl9pc0Zpbml0ZSIsImlzSW50ZWdlciIsImlzU2FmZUludGVnZXIiLCJNQVhfU0FGRV9JTlRFR0VSIiwiTUlOX1NBRkVfSU5URUdFUiIsIk51bWJlciIsInNxcnQiLCIkYWNvc2giLCJhY29zaCIsIk1BWF9WQUxVRSIsIiRhc2luaCIsImFzaW5oIiwiJGF0YW5oIiwiYXRhbmgiLCJjYnJ0IiwiY2x6MzIiLCJMT0cyRSIsImNvc2giLCJoeXBvdCIsInZhbHVlMSIsInZhbHVlMiIsImRpdiIsInN1bSIsImxhcmciLCIkaW11bCIsImltdWwiLCJ4biIsInluIiwieGwiLCJ5bCIsImxvZzEwIiwiTE9HMTBFIiwibG9nMiIsInNpbmgiLCJ0YW5oIiwidHJ1bmMiLCJmcm9tQ2hhckNvZGUiLCIkZnJvbUNvZGVQb2ludCIsImZyb21Db2RlUG9pbnQiLCJyYXciLCJjYWxsU2l0ZSIsInRwbCIsIiRhdCIsInBvaW50IiwiY29kZVBvaW50QXQiLCJjb250ZXh0IiwiJGVuZHNXaXRoIiwiZW5kc1dpdGgiLCJlbmRQb3NpdGlvbiIsInNlYXJjaCIsIiRzdGFydHNXaXRoIiwic3RhcnRzV2l0aCIsImNvbG9yIiwic2l6ZSIsIkRhdGUiLCJnZXRUaW1lIiwidG9KU09OIiwidG9JU09TdHJpbmciLCJwdiIsIiR0b0lTT1N0cmluZyIsImx6IiwibnVtIiwiZ2V0VVRDRnVsbFllYXIiLCJnZXRVVENNaWxsaXNlY29uZHMiLCJnZXRVVENNb250aCIsImdldFVUQ0RhdGUiLCJnZXRVVENIb3VycyIsImdldFVUQ01pbnV0ZXMiLCJnZXRVVENTZWNvbmRzIiwiRGF0ZVByb3RvIiwiaGludCIsImNyZWF0ZVByb3BlcnR5IiwidXBUbyIsImNsb25lZCIsIiRzb3J0IiwiJGZvckVhY2giLCJTVFJJQ1QiLCIkZmlsdGVyIiwiJHNvbWUiLCIkZXZlcnkiLCIkcmVkdWNlIiwiJGluZGV4T2YiLCJORUdBVElWRV9aRVJPIiwiJGZpbmQiLCJmb3JjZWQiLCIkZmxhZ3MiLCIkUmVnRXhwIiwicmUxIiwicmUyIiwiQ09SUkVDVF9ORVciLCJ0aVJFIiwicGlSRSIsImZpVSIsInByb3h5IiwiJG1hdGNoIiwicmVnZXhwIiwiUkVQTEFDRSIsIiRyZXBsYWNlIiwic2VhcmNoVmFsdWUiLCJyZXBsYWNlVmFsdWUiLCJTRUFSQ0giLCIkc2VhcmNoIiwiU1BMSVQiLCIkc3BsaXQiLCJfc3BsaXQiLCIkcHVzaCIsIk5QQ0ciLCJzZXBhcmF0b3IyIiwibGFzdEluZGV4IiwibGFzdExlbmd0aCIsIm91dHB1dCIsImxhc3RMYXN0SW5kZXgiLCJzcGxpdExpbWl0Iiwic2VwYXJhdG9yQ29weSIsIkludGVybmFsIiwibmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5IiwiT3duUHJvbWlzZUNhcGFiaWxpdHkiLCJXcmFwcGVyIiwibWljcm90YXNrIiwibmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUiLCJwZXJmb3JtIiwicHJvbWlzZVJlc29sdmUiLCJ2OCIsIiRQcm9taXNlIiwiZW1wdHkiLCJGYWtlUHJvbWlzZSIsIlByb21pc2VSZWplY3Rpb25FdmVudCIsImlzVGhlbmFibGUiLCJpc1JlamVjdCIsIl9uIiwiY2hhaW4iLCJfYyIsIl92Iiwib2siLCJfcyIsInJlYWN0aW9uIiwiZXhpdGVkIiwiaGFuZGxlciIsImZhaWwiLCJfaCIsIm9uSGFuZGxlVW5oYW5kbGVkIiwib25VbmhhbmRsZWQiLCJjb25zb2xlIiwidW5oYW5kbGVkIiwiaXNVbmhhbmRsZWQiLCJvbnVuaGFuZGxlZHJlamVjdGlvbiIsInJlYXNvbiIsIl9hIiwib25yZWplY3Rpb25oYW5kbGVkIiwiJHJlamVjdCIsIl93IiwiJHJlc29sdmUiLCJleGVjdXRvciIsImVyciIsIm9uRnVsZmlsbGVkIiwib25SZWplY3RlZCIsImNhdGNoIiwiY2FwYWJpbGl0eSIsImFsbCIsInJlbWFpbmluZyIsIiRpbmRleCIsImFscmVhZHlDYWxsZWQiLCJyYWNlIiwiJGlzVmlldyIsImZpbiIsInZpZXdTIiwidmlld1QiLCJpbml0IiwickFwcGx5IiwiZkFwcGx5IiwidGhpc0FyZ3VtZW50IiwiYXJndW1lbnRzTGlzdCIsIkwiLCJyQ29uc3RydWN0IiwiTkVXX1RBUkdFVF9CVUciLCJBUkdTX0JVRyIsIlRhcmdldCIsIm5ld1RhcmdldCIsIiRhcmdzIiwicHJvcGVydHlLZXkiLCJhdHRyaWJ1dGVzIiwiZGVsZXRlUHJvcGVydHkiLCJFbnVtZXJhdGUiLCJlbnVtZXJhdGUiLCJyZWNlaXZlciIsImdldFByb3RvIiwiViIsImV4aXN0aW5nRGVzY3JpcHRvciIsIm93bkRlc2MiLCJzZXRQcm90byIsIiRpbmNsdWRlcyIsImFycmF5U3BlY2llc0NyZWF0ZSIsImZsYXRNYXAiLCJmbGF0dGVuIiwiZGVwdGhBcmciLCJhdCIsIiRwYWQiLCJnZXRGbGFncyIsIlJlZ0V4cFByb3RvIiwiJFJlZ0V4cFN0cmluZ0l0ZXJhdG9yIiwiX3IiLCJtYXRjaEFsbCIsInJ4IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImdldERlc2MiLCIkdmFsdWVzIiwiX19kZWZpbmVHZXR0ZXJfXyIsIl9fbG9va3VwR2V0dGVyX18iLCJfX2xvb2t1cFNldHRlcl9fIiwiaXNFcnJvciIsImNsYW1wIiwibG93ZXIiLCJ1cHBlciIsIkRFR19QRVJfUkFEIiwiUEkiLCJSQURfUEVSX0RFRyIsImRlZ3JlZXMiLCJyYWRpYW5zIiwiZnNjYWxlIiwiaWFkZGgiLCJ4MCIsIngxIiwieTAiLCJ5MSIsIiR4MCIsIiR5MCIsImlzdWJoIiwiaW11bGgiLCJ1IiwiJHUiLCIkdiIsInUwIiwidjAiLCJ1MSIsInYxIiwidW11bGgiLCJzaWduYml0IiwiZmluYWxseSIsIm9uRmluYWxseSIsInRyeSIsIm1ldGFkYXRhIiwidG9NZXRhS2V5Iiwib3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YSIsImRlZmluZU1ldGFkYXRhIiwibWV0YWRhdGFLZXkiLCJtZXRhZGF0YVZhbHVlIiwiZGVsZXRlTWV0YWRhdGEiLCJvcmRpbmFyeUhhc093bk1ldGFkYXRhIiwib3JkaW5hcnlHZXRPd25NZXRhZGF0YSIsIm9yZGluYXJ5R2V0TWV0YWRhdGEiLCJnZXRNZXRhZGF0YSIsIlNldCIsIm9yZGluYXJ5T3duTWV0YWRhdGFLZXlzIiwib3JkaW5hcnlNZXRhZGF0YUtleXMiLCJvS2V5cyIsInBLZXlzIiwiZ2V0TWV0YWRhdGFLZXlzIiwiZ2V0T3duTWV0YWRhdGEiLCJnZXRPd25NZXRhZGF0YUtleXMiLCJvcmRpbmFyeUhhc01ldGFkYXRhIiwiaGFzTWV0YWRhdGEiLCJoYXNPd25NZXRhZGF0YSIsIiRtZXRhZGF0YSIsImFzYXAiLCJPQlNFUlZBQkxFIiwiY2xlYW51cFN1YnNjcmlwdGlvbiIsInN1YnNjcmlwdGlvbiIsImNsZWFudXAiLCJzdWJzY3JpcHRpb25DbG9zZWQiLCJfbyIsImNsb3NlU3Vic2NyaXB0aW9uIiwiU3Vic2NyaXB0aW9uIiwib2JzZXJ2ZXIiLCJzdWJzY3JpYmVyIiwiU3Vic2NyaXB0aW9uT2JzZXJ2ZXIiLCJ1bnN1YnNjcmliZSIsImNvbXBsZXRlIiwiJE9ic2VydmFibGUiLCJzdWJzY3JpYmUiLCJvYnNlcnZhYmxlIiwiaXRlbXMiLCJPYnNlcnZhYmxlIiwiTVNJRSIsInRpbWUiLCJib3VuZEFyZ3MiLCJzZXRJbnRlcnZhbCIsIiR0YXNrIiwiVE9fU1RSSU5HX1RBRyIsIkFycmF5VmFsdWVzIiwiRE9NSXRlcmFibGVzIiwiQ1NTUnVsZUxpc3QiLCJDU1NTdHlsZURlY2xhcmF0aW9uIiwiQ1NTVmFsdWVMaXN0IiwiQ2xpZW50UmVjdExpc3QiLCJET01SZWN0TGlzdCIsIkRPTVN0cmluZ0xpc3QiLCJET01Ub2tlbkxpc3QiLCJEYXRhVHJhbnNmZXJJdGVtTGlzdCIsIkZpbGVMaXN0IiwiSFRNTEFsbENvbGxlY3Rpb24iLCJIVE1MQ29sbGVjdGlvbiIsIkhUTUxGb3JtRWxlbWVudCIsIkhUTUxTZWxlY3RFbGVtZW50IiwiTWVkaWFMaXN0IiwiTWltZVR5cGVBcnJheSIsIk5hbWVkTm9kZU1hcCIsIk5vZGVMaXN0IiwiUGFpbnRSZXF1ZXN0TGlzdCIsIlBsdWdpbiIsIlBsdWdpbkFycmF5IiwiU1ZHTGVuZ3RoTGlzdCIsIlNWR051bWJlckxpc3QiLCJTVkdQYXRoU2VnTGlzdCIsIlNWR1BvaW50TGlzdCIsIlNWR1N0cmluZ0xpc3QiLCJTVkdUcmFuc2Zvcm1MaXN0IiwiU291cmNlQnVmZmVyTGlzdCIsIlN0eWxlU2hlZXRMaXN0IiwiVGV4dFRyYWNrQ3VlTGlzdCIsIlRleHRUcmFja0xpc3QiLCJUb3VjaExpc3QiLCJjb2xsZWN0aW9ucyIsImV4cGxpY2l0IiwiQ29sbGVjdGlvbiIsIk9wIiwiaGFzT3duIiwiaXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvciIsInRvU3RyaW5nVGFnU3ltYm9sIiwiaW5Nb2R1bGUiLCJydW50aW1lIiwicmVnZW5lcmF0b3JSdW50aW1lIiwiR2VuU3RhdGVTdXNwZW5kZWRTdGFydCIsIkdlblN0YXRlU3VzcGVuZGVkWWllbGQiLCJHZW5TdGF0ZUV4ZWN1dGluZyIsIkdlblN0YXRlQ29tcGxldGVkIiwiQ29udGludWVTZW50aW5lbCIsIk5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlIiwiR3AiLCJHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSIsIkdlbmVyYXRvciIsIkdlbmVyYXRvckZ1bmN0aW9uIiwiZGlzcGxheU5hbWUiLCJpc0dlbmVyYXRvckZ1bmN0aW9uIiwiZ2VuRnVuIiwiY3RvciIsIm1hcmsiLCJhd3JhcCIsIl9fYXdhaXQiLCJkZWZpbmVJdGVyYXRvck1ldGhvZHMiLCJBc3luY0l0ZXJhdG9yIiwiYXN5bmMiLCJpbm5lckZuIiwib3V0ZXJGbiIsInRyeUxvY3NMaXN0IiwicG9wIiwiQ29udGV4dCIsInJlc2V0Iiwic2tpcFRlbXBSZXNldCIsInNlbnQiLCJfc2VudCIsImRlbGVnYXRlIiwidHJ5RW50cmllcyIsInJlc2V0VHJ5RW50cnkiLCJzdG9wIiwicm9vdFJlY29yZCIsImNvbXBsZXRpb24iLCJydmFsIiwiZGlzcGF0Y2hFeGNlcHRpb24iLCJleGNlcHRpb24iLCJoYW5kbGUiLCJsb2MiLCJjYXVnaHQiLCJyZWNvcmQiLCJ0cnlMb2MiLCJoYXNDYXRjaCIsImhhc0ZpbmFsbHkiLCJjYXRjaExvYyIsImZpbmFsbHlMb2MiLCJhYnJ1cHQiLCJmaW5hbGx5RW50cnkiLCJhZnRlckxvYyIsImZpbmlzaCIsInRocm93biIsImRlbGVnYXRlWWllbGQiLCJyZXN1bHROYW1lIiwibmV4dExvYyIsInByb3RvR2VuZXJhdG9yIiwiZ2VuZXJhdG9yIiwiX2ludm9rZSIsInN0YXRlIiwiZG9uZVJlc3VsdCIsImRlbGVnYXRlUmVzdWx0IiwibWF5YmVJbnZva2VEZWxlZ2F0ZSIsInRyeUNhdGNoIiwibWFrZUludm9rZU1ldGhvZCIsInVud3JhcHBlZCIsInByZXZpb3VzUHJvbWlzZSIsImNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnIiwicmV0dXJuIiwiaW5mbyIsInB1c2hUcnlFbnRyeSIsImxvY3MiLCJpdGVyYXRvck1ldGhvZCIsImVzY2FwZSIsIiRyZSIsInJlZ0V4cCIsInBhcnQiLCJzZWFyY2hWaWV3IiwicmVjaXBlVmlldyIsImxpc3RWaWV3IiwibGlrZXNWaWV3IiwicHJldmVudERlZmF1bHQiLCJzZWFyY2hDdHJsIiwiX3JlZiIsIl9hc3luY1RvR2VuZXJhdG9yIiwiX2NhbGxlZSIsInF1ZXJ5IiwiX2NvbnRleHQiLCJTZWFyY2giLCJodHRwUmVxdWVzdCIsInQwIiwiYWxlcnQiLCJjbG9zZXN0IiwiZGF0YXNldCIsImdvdG8iLCJyZWNpcGVDdHJsIiwiX3JlZjIiLCJfY2FsbGVlMiIsIl9jb250ZXh0MiIsImxvY2F0aW9uIiwiaGFzaCIsImhpZ2hMaWdodEFjdGl2ZSIsImNsZWFyUmVjaXBlIiwiUmVjaXBlIiwiY2FsY1RpbWUiLCJjYWxjU2VydmluZyIsInJld3JpdGVJbmdyZWRpZW50cyIsInJlY2lwZVJlbmRlciIsImxpa2VzIiwiaXNMaWtlZCIsIkxpa2VzIiwiZ2V0RnJvbUxvY2FsU3RvcmFnZSIsInRvb2dsZUxpa2VzTGlzdEJ1dHRvbiIsImVsZW0iLCJyZW5kZXJMaWtlIiwiYXV0aG9yIiwiaW1nIiwibWF0Y2hlcyIsInJlY291bnRJbmdyZWRpZW50cyIsInJld3JpdGVRdWFudGl0eSIsImluZ3JlZGllbnRzIiwiTGlzdCIsIml0ZW0iLCJ1bml0IiwiZGVzY3JpcHRpb24iLCJyZW5kZXJJdGVtIiwidG9vZ2xlTGlrZUJ1dHRvbiIsImRlbGV0ZUxpa2UiLCJpbWFnZSIsImxpa2VzQ3RybCIsImxpIiwiaXRlbWlkIiwiZGVsZXRlSXRlbSIsInVwZGF0ZUNvdW50IiwiX2NsYXNzQ2FsbENoZWNrIiwiX2F4aW9zMiIsImRlZmF1bHQiLCJBeGlvcyIsImNyZWF0ZUluc3RhbmNlIiwiZGVmYXVsdENvbmZpZyIsImF4aW9zIiwiaW5zdGFuY2VDb25maWciLCJDYW5jZWxUb2tlbiIsImlzQ2FuY2VsIiwicHJvbWlzZXMiLCJzcHJlYWQiLCJyZWFkRmxvYXRMRSIsImlzU2xvd0J1ZmZlciIsIl9pc0J1ZmZlciIsIkludGVyY2VwdG9yTWFuYWdlciIsImRpc3BhdGNoUmVxdWVzdCIsImludGVyY2VwdG9ycyIsImludGVyY2VwdG9yIiwidW5zaGlmdCIsImZ1bGZpbGxlZCIsInJlamVjdGVkIiwic2hpZnQiLCJub3JtYWxpemVkTmFtZSIsImVuY29kZSIsImVuY29kZVVSSUNvbXBvbmVudCIsInNlcmlhbGl6ZWRQYXJhbXMiLCJwYXJ0cyIsImlnbm9yZUR1cGxpY2F0ZU9mIiwicGFyc2VkIiwibGluZSIsInN1YnN0ciIsIm9yaWdpblVSTCIsIm1zaWUiLCJ1cmxQYXJzaW5nTm9kZSIsInJlc29sdmVVUkwiLCJocmVmIiwic2V0QXR0cmlidXRlIiwicHJvdG9jb2wiLCJob3N0IiwiaG9zdG5hbWUiLCJwYXRobmFtZSIsInJlcXVlc3RVUkwiLCJjaGFycyIsImlucHV0IiwiYmxvY2siLCJjaGFyQ29kZSIsImlkeCIsImV4cGlyZXMiLCJwYXRoIiwic2VjdXJlIiwiY29va2llIiwidG9HTVRTdHJpbmciLCJkZWNvZGVVUklDb21wb25lbnQiLCJyZW1vdmUiLCJoYW5kbGVycyIsInVzZSIsImVqZWN0IiwiaCIsInRyYW5zZm9ybURhdGEiLCJpc0Fic29sdXRlVVJMIiwiY29tYmluZVVSTHMiLCJ0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkIiwidGhyb3dJZlJlcXVlc3RlZCIsImJhc2VVUkwiLCJyZWxhdGl2ZVVSTCIsInJlc29sdmVQcm9taXNlIiwidG9rZW4iLCJjYWxsYmFjayIsIl91bmlxaWQyIiwicGlkIiwicHJlZml4Iiwic2V0VG9Mb2NhbFN0b3JhZ2UiLCJsb2NhbFN0b3JhZ2UiLCJzZXRJdGVtIiwiZ2V0SXRlbSIsIl9mcmFjdGlvbmFsIiwiY2FsY3VsQ291bnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiY2xhc3NMaXN0Iiwic2VydiIsIm5ld0NvdW50IiwiRnJhY3Rpb24iLCJodG1sU3RyaW5nIiwiaW5uZXJTdHJpbmciLCJjcmVhdGVMaXN0IiwibnVtZXJhdG9yIiwiZGVub21pbmF0b3IiLCJub3JtYWxpemUiLCJjbG9uZSIsIndob2xlcGFydCIsInJlc2NhbGUiLCJmYWN0b3IiLCJ0ZCIsInN1YnRyYWN0IiwiZXF1YWxzIiwiaXNGbG9hdCIsInJvdW5kVG9QbGFjZXMiLCJwbGFjZXMiLCJzY2FsYXIiLCJyb3VuZGVkIiwic2NhbGV1cCIsImdjZiIsImNvbW1vbl9mYWN0b3JzIiwiZmEiLCJwcmltZUZhY3RvcnMiLCJmYiIsImZhY3RvcnMiLCJfZmFjdG9yIiwiX3NlYXJjaFZpZXciLCJ2aXNpb24iLCJ2aXNpYmlsaXR5IiwiRE9NbGkiLCJfYXhpb3MiLCJzb3VyY2VfdXJsIiwidW5pdExvbmciLCJ1bml0U2hvcnQiLCJuZXdJbmdyZWRpZW50cyIsImluZ3JlZGllbnQiLCJJbmdPYmoiLCJzcGxpdEluZyIsInVuaXRJbmRleCIsImN1cnIiLCJfdGhpcyIsIm5ld1NlcnZpbmciLCJpbmciXSwibWFwcGluZ3MiOiJhQUNBLElBQUFBLEtBR0EsU0FBQUMsRUFBQUMsR0FHQSxHQUFBRixFQUFBRSxHQUNBLE9BQUFGLEVBQUFFLEdBQUFDLFFBR0EsSUFBQUMsRUFBQUosRUFBQUUsSUFDQUcsRUFBQUgsRUFDQUksR0FBQSxFQUNBSCxZQVVBLE9BTkFJLEVBQUFMLEdBQUFNLEtBQUFKLEVBQUFELFFBQUFDLElBQUFELFFBQUFGLEdBR0FHLEVBQUFFLEdBQUEsRUFHQUYsRUFBQUQsUUFLQUYsRUFBQVEsRUFBQUYsRUFHQU4sRUFB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QUEsYUFBQWkwQixVQUNBRCxFQUFBOXZCLE9BQUFsRSxVQUFBLGNBQUFrMEIsUUFFQSxnTUFBQXR3QixNQUFBLEtBQUFpQyxRQUFBLFNBQUFsRyxNQUNBQSxJQUFBcTBCLEVBQUEzb0IsTUFBQTFMLEVBQUFpQyxTQUFBckQsS0FBQXFCLFFBQUFELDJDQzFCQTNCLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsSUFDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVB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bkksWUFBYWtJLFNBQVNsMUMsTUFBTW0xQyxVQUFZLEdBQUdyNUMsS0FBSyxZQUtwRG01QyxPQUZRajFCLFNBQVNrMUIsU0FBUyxLQUd4QnpnQyxNQUFPcUssS0FBS28yQixTQUFTLEdBQUcxNEMsUUFBUSxJQUFJLE1BQ3BDdXdDLEtBQU0sR0FDTkMsWUFBYWtJLFNBQVNsMUMsTUFBTSxHQUFHbEUsS0FBSyxPQUtwQzJZLE1BQU8sRUFDUHM0QixLQUFNLEdBQ05DLFlBQWFrSSxTQUFTcDVDLEtBQUssTUFHL0IsT0FBT201QyxTQUVUajVDLEtBQUs0d0MsWUFBY21JLDBEQUVGeDhDLEdBQU0sSUFBQTg4QyxFQUFBcjVDLEtBRWpCczVDLEVBQXVCLFFBQVQvOEMsRUFBaUJ5RCxLQUFLcVUsUUFBVSxFQUFJclUsS0FBS3FVLFFBQVUsRUFHdkVyVSxLQUFLNHdDLFlBQVlsdkMsUUFBUSxTQUFBNjNDLEdBQ3ZCLElBQU01QyxFQUFXNEMsRUFBSTlnQyxNQUFNNmdDLEVBQVdELEVBQUtobEMsUUFDM0NrbEMsRUFBSTlnQyxNQUFRaytCLElBR2QzMkMsS0FBS3FVLFFBQVVpbEMsZ0NBdEdFM0oiLCJmaWxlIjoianMvYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDEzNik7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxudmFyICRleHBvcnQgPSBmdW5jdGlvbiAodHlwZSwgbmFtZSwgc291cmNlKSB7XG4gIHZhciBJU19GT1JDRUQgPSB0eXBlICYgJGV4cG9ydC5GO1xuICB2YXIgSVNfR0xPQkFMID0gdHlwZSAmICRleHBvcnQuRztcbiAgdmFyIElTX1NUQVRJQyA9IHR5cGUgJiAkZXhwb3J0LlM7XG4gIHZhciBJU19QUk9UTyA9IHR5cGUgJiAkZXhwb3J0LlA7XG4gIHZhciBJU19CSU5EID0gdHlwZSAmICRleHBvcnQuQjtcbiAgdmFyIHRhcmdldCA9IElTX0dMT0JBTCA/IGdsb2JhbCA6IElTX1NUQVRJQyA/IGdsb2JhbFtuYW1lXSB8fCAoZ2xvYmFsW25hbWVdID0ge30pIDogKGdsb2JhbFtuYW1lXSB8fCB7fSlbUFJPVE9UWVBFXTtcbiAgdmFyIGV4cG9ydHMgPSBJU19HTE9CQUwgPyBjb3JlIDogY29yZVtuYW1lXSB8fCAoY29yZVtuYW1lXSA9IHt9KTtcbiAgdmFyIGV4cFByb3RvID0gZXhwb3J0c1tQUk9UT1RZUEVdIHx8IChleHBvcnRzW1BST1RPVFlQRV0gPSB7fSk7XG4gIHZhciBrZXksIG93biwgb3V0LCBleHA7XG4gIGlmIChJU19HTE9CQUwpIHNvdXJjZSA9IG5hbWU7XG4gIGZvciAoa2V5IGluIHNvdXJjZSkge1xuICAgIC8vIGNvbnRhaW5zIGluIG5hdGl2ZVxuICAgIG93biA9ICFJU19GT1JDRUQgJiYgdGFyZ2V0ICYmIHRhcmdldFtrZXldICE9PSB1bmRlZmluZWQ7XG4gICAgLy8gZXhwb3J0IG5hdGl2ZSBvciBwYXNzZWRcbiAgICBvdXQgPSAob3duID8gdGFyZ2V0IDogc291cmNlKVtrZXldO1xuICAgIC8vIGJpbmQgdGltZXJzIHRvIGdsb2JhbCBmb3IgY2FsbCBmcm9tIGV4cG9ydCBjb250ZXh0XG4gICAgZXhwID0gSVNfQklORCAmJiBvd24gPyBjdHgob3V0LCBnbG9iYWwpIDogSVNfUFJPVE8gJiYgdHlwZW9mIG91dCA9PSAnZnVuY3Rpb24nID8gY3R4KEZ1bmN0aW9uLmNhbGwsIG91dCkgOiBvdXQ7XG4gICAgLy8gZXh0ZW5kIGdsb2JhbFxuICAgIGlmICh0YXJnZXQpIHJlZGVmaW5lKHRhcmdldCwga2V5LCBvdXQsIHR5cGUgJiAkZXhwb3J0LlUpO1xuICAgIC8vIGV4cG9ydFxuICAgIGlmIChleHBvcnRzW2tleV0gIT0gb3V0KSBoaWRlKGV4cG9ydHMsIGtleSwgZXhwKTtcbiAgICBpZiAoSVNfUFJPVE8gJiYgZXhwUHJvdG9ba2V5XSAhPSBvdXQpIGV4cFByb3RvW2tleV0gPSBvdXQ7XG4gIH1cbn07XG5nbG9iYWwuY29yZSA9IGNvcmU7XG4vLyB0eXBlIGJpdG1hcFxuJGV4cG9ydC5GID0gMTsgICAvLyBmb3JjZWRcbiRleHBvcnQuRyA9IDI7ICAgLy8gZ2xvYmFsXG4kZXhwb3J0LlMgPSA0OyAgIC8vIHN0YXRpY1xuJGV4cG9ydC5QID0gODsgICAvLyBwcm90b1xuJGV4cG9ydC5CID0gMTY7ICAvLyBiaW5kXG4kZXhwb3J0LlcgPSAzMjsgIC8vIHdyYXBcbiRleHBvcnQuVSA9IDY0OyAgLy8gc2FmZVxuJGV4cG9ydC5SID0gMTI4OyAvLyByZWFsIHByb3RvIG1ldGhvZCBmb3IgYGxpYnJhcnlgXG5tb2R1bGUuZXhwb3J0cyA9ICRleHBvcnQ7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhbiBvYmplY3QhJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxudmFyIGdsb2JhbCA9IG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTWF0aCA9PSBNYXRoXG4gID8gd2luZG93IDogdHlwZW9mIHNlbGYgIT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09IE1hdGggPyBzZWxmXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICA6IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5pZiAodHlwZW9mIF9fZyA9PSAnbnVtYmVyJykgX19nID0gZ2xvYmFsOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuICEhZXhlYygpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogdHlwZW9mIGl0ID09PSAnZnVuY3Rpb24nO1xufTtcbiIsInZhciBzdG9yZSA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCd3a3MnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5TeW1ib2w7XG52YXIgVVNFX1NZTUJPTCA9IHR5cGVvZiBTeW1ib2wgPT0gJ2Z1bmN0aW9uJztcblxudmFyICRleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gc3RvcmVbbmFtZV0gfHwgKHN0b3JlW25hbWVdID1cbiAgICBVU0VfU1lNQk9MICYmIFN5bWJvbFtuYW1lXSB8fCAoVVNFX1NZTUJPTCA/IFN5bWJvbCA6IHVpZCkoJ1N5bWJvbC4nICsgbmFtZSkpO1xufTtcblxuJGV4cG9ydHMuc3RvcmUgPSBzdG9yZTtcbiIsIi8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAnYScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pLmEgIT0gNztcbn0pO1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuL19pZTgtZG9tLWRlZmluZScpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgZFAgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIGRQKE8sIFAsIEF0dHJpYnV0ZXMpO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcykgdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCEnKTtcbiAgaWYgKCd2YWx1ZScgaW4gQXR0cmlidXRlcykgT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7XG4gIHJldHVybiBPO1xufTtcbiIsIi8vIDcuMS4xNSBUb0xlbmd0aFxudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCA+IDAgPyBtaW4odG9JbnRlZ2VyKGl0KSwgMHgxZmZmZmZmZmZmZmZmZikgOiAwOyAvLyBwb3coMiwgNTMpIC0gMSA9PSA5MDA3MTk5MjU0NzQwOTkxXG59O1xuIiwiLy8gNy4xLjEzIFRvT2JqZWN0KGFyZ3VtZW50KVxudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgZnVuY3Rpb24hJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICByZXR1cm4gZFAuZihvYmplY3QsIGtleSwgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBTUkMgPSByZXF1aXJlKCcuL191aWQnKSgnc3JjJyk7XG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciAkdG9TdHJpbmcgPSBGdW5jdGlvbltUT19TVFJJTkddO1xudmFyIFRQTCA9ICgnJyArICR0b1N0cmluZykuc3BsaXQoVE9fU1RSSU5HKTtcblxucmVxdWlyZSgnLi9fY29yZScpLmluc3BlY3RTb3VyY2UgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuICR0b1N0cmluZy5jYWxsKGl0KTtcbn07XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBrZXksIHZhbCwgc2FmZSkge1xuICB2YXIgaXNGdW5jdGlvbiA9IHR5cGVvZiB2YWwgPT0gJ2Z1bmN0aW9uJztcbiAgaWYgKGlzRnVuY3Rpb24pIGhhcyh2YWwsICduYW1lJykgfHwgaGlkZSh2YWwsICduYW1lJywga2V5KTtcbiAgaWYgKE9ba2V5XSA9PT0gdmFsKSByZXR1cm47XG4gIGlmIChpc0Z1bmN0aW9uKSBoYXModmFsLCBTUkMpIHx8IGhpZGUodmFsLCBTUkMsIE9ba2V5XSA/ICcnICsgT1trZXldIDogVFBMLmpvaW4oU3RyaW5nKGtleSkpKTtcbiAgaWYgKE8gPT09IGdsb2JhbCkge1xuICAgIE9ba2V5XSA9IHZhbDtcbiAgfSBlbHNlIGlmICghc2FmZSkge1xuICAgIGRlbGV0ZSBPW2tleV07XG4gICAgaGlkZShPLCBrZXksIHZhbCk7XG4gIH0gZWxzZSBpZiAoT1trZXldKSB7XG4gICAgT1trZXldID0gdmFsO1xuICB9IGVsc2Uge1xuICAgIGhpZGUoTywga2V5LCB2YWwpO1xuICB9XG4vLyBhZGQgZmFrZSBGdW5jdGlvbiN0b1N0cmluZyBmb3IgY29ycmVjdCB3b3JrIHdyYXBwZWQgbWV0aG9kcyAvIGNvbnN0cnVjdG9ycyB3aXRoIG1ldGhvZHMgbGlrZSBMb0Rhc2ggaXNOYXRpdmVcbn0pKEZ1bmN0aW9uLnByb3RvdHlwZSwgVE9fU1RSSU5HLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuIHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgJiYgdGhpc1tTUkNdIHx8ICR0b1N0cmluZy5jYWxsKHRoaXMpO1xufSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xudmFyIHF1b3QgPSAvXCIvZztcbi8vIEIuMi4zLjIuMSBDcmVhdGVIVE1MKHN0cmluZywgdGFnLCBhdHRyaWJ1dGUsIHZhbHVlKVxudmFyIGNyZWF0ZUhUTUwgPSBmdW5jdGlvbiAoc3RyaW5nLCB0YWcsIGF0dHJpYnV0ZSwgdmFsdWUpIHtcbiAgdmFyIFMgPSBTdHJpbmcoZGVmaW5lZChzdHJpbmcpKTtcbiAgdmFyIHAxID0gJzwnICsgdGFnO1xuICBpZiAoYXR0cmlidXRlICE9PSAnJykgcDEgKz0gJyAnICsgYXR0cmlidXRlICsgJz1cIicgKyBTdHJpbmcodmFsdWUpLnJlcGxhY2UocXVvdCwgJyZxdW90OycpICsgJ1wiJztcbiAgcmV0dXJuIHAxICsgJz4nICsgUyArICc8LycgKyB0YWcgKyAnPic7XG59O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTkFNRSwgZXhlYykge1xuICB2YXIgTyA9IHt9O1xuICBPW05BTUVdID0gZXhlYyhjcmVhdGVIVE1MKTtcbiAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRlc3QgPSAnJ1tOQU1FXSgnXCInKTtcbiAgICByZXR1cm4gdGVzdCAhPT0gdGVzdC50b0xvd2VyQ2FzZSgpIHx8IHRlc3Quc3BsaXQoJ1wiJykubGVuZ3RoID4gMztcbiAgfSksICdTdHJpbmcnLCBPKTtcbn07XG4iLCJ2YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoaXQsIGtleSk7XG59O1xuIiwiLy8gdG8gaW5kZXhlZCBvYmplY3QsIHRvT2JqZWN0IHdpdGggZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBzdHJpbmdzXG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIElPYmplY3QoZGVmaW5lZChpdCkpO1xufTtcbiIsInZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJyk7XG52YXIgZ09QRCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBnT1BEIDogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcbiAgTyA9IHRvSU9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIGdPUEQoTywgUCk7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoaGFzKE8sIFApKSByZXR1cm4gY3JlYXRlRGVzYyghcElFLmYuY2FsbChPLCBQKSwgT1tQXSk7XG59O1xuIiwiLy8gMTkuMS4yLjkgLyAxNS4yLjMuMiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTylcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xudmFyIE9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gKE8pIHtcbiAgTyA9IHRvT2JqZWN0KE8pO1xuICBpZiAoaGFzKE8sIElFX1BST1RPKSkgcmV0dXJuIE9bSUVfUFJPVE9dO1xuICBpZiAodHlwZW9mIE8uY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBPIGluc3RhbmNlb2YgTy5jb25zdHJ1Y3Rvcikge1xuICAgIHJldHVybiBPLmNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgfSByZXR1cm4gTyBpbnN0YW5jZW9mIE9iamVjdCA/IE9iamVjdFByb3RvIDogbnVsbDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBiaW5kID0gcmVxdWlyZSgnLi9oZWxwZXJzL2JpbmQnKTtcbnZhciBpc0J1ZmZlciA9IHJlcXVpcmUoJ2lzLWJ1ZmZlcicpO1xuXG4vKmdsb2JhbCB0b1N0cmluZzp0cnVlKi9cblxuLy8gdXRpbHMgaXMgYSBsaWJyYXJ5IG9mIGdlbmVyaWMgaGVscGVyIGZ1bmN0aW9ucyBub24tc3BlY2lmaWMgdG8gYXhpb3NcblxudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlcih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZvcm1EYXRhXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gRm9ybURhdGEsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Zvcm1EYXRhKHZhbCkge1xuICByZXR1cm4gKHR5cGVvZiBGb3JtRGF0YSAhPT0gJ3VuZGVmaW5lZCcpICYmICh2YWwgaW5zdGFuY2VvZiBGb3JtRGF0YSk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlclZpZXcodmFsKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmICgodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJykgJiYgKEFycmF5QnVmZmVyLmlzVmlldykpIHtcbiAgICByZXN1bHQgPSBBcnJheUJ1ZmZlci5pc1ZpZXcodmFsKTtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSAodmFsKSAmJiAodmFsLmJ1ZmZlcikgJiYgKHZhbC5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcik7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmluZ1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyaW5nLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJpbmcodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnc3RyaW5nJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIE51bWJlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgTnVtYmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNOdW1iZXIodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnbnVtYmVyJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyB1bmRlZmluZWRcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmFsdWUgaXMgdW5kZWZpbmVkLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBPYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBPYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0Jztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIERhdGVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIERhdGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0RhdGUodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IERhdGVdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZpbGVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZpbGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0ZpbGUodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZpbGVdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJsb2JcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJsb2IsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Jsb2IodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEJsb2JdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGdW5jdGlvbiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJlYW1cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmVhbSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyZWFtKHZhbCkge1xuICByZXR1cm4gaXNPYmplY3QodmFsKSAmJiBpc0Z1bmN0aW9uKHZhbC5waXBlKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VSTFNlYXJjaFBhcmFtcyh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiBVUkxTZWFyY2hQYXJhbXMgIT09ICd1bmRlZmluZWQnICYmIHZhbCBpbnN0YW5jZW9mIFVSTFNlYXJjaFBhcmFtcztcbn1cblxuLyoqXG4gKiBUcmltIGV4Y2VzcyB3aGl0ZXNwYWNlIG9mZiB0aGUgYmVnaW5uaW5nIGFuZCBlbmQgb2YgYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIFRoZSBTdHJpbmcgdG8gdHJpbVxuICogQHJldHVybnMge1N0cmluZ30gVGhlIFN0cmluZyBmcmVlZCBvZiBleGNlc3Mgd2hpdGVzcGFjZVxuICovXG5mdW5jdGlvbiB0cmltKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoL15cXHMqLywgJycpLnJlcGxhY2UoL1xccyokLywgJycpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiB3ZSdyZSBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudFxuICpcbiAqIFRoaXMgYWxsb3dzIGF4aW9zIHRvIHJ1biBpbiBhIHdlYiB3b3JrZXIsIGFuZCByZWFjdC1uYXRpdmUuXG4gKiBCb3RoIGVudmlyb25tZW50cyBzdXBwb3J0IFhNTEh0dHBSZXF1ZXN0LCBidXQgbm90IGZ1bGx5IHN0YW5kYXJkIGdsb2JhbHMuXG4gKlxuICogd2ViIHdvcmtlcnM6XG4gKiAgdHlwZW9mIHdpbmRvdyAtPiB1bmRlZmluZWRcbiAqICB0eXBlb2YgZG9jdW1lbnQgLT4gdW5kZWZpbmVkXG4gKlxuICogcmVhY3QtbmF0aXZlOlxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdSZWFjdE5hdGl2ZSdcbiAqL1xuZnVuY3Rpb24gaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gIGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ1JlYWN0TmF0aXZlJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gKFxuICAgIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG4gICAgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJ1xuICApO1xufVxuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbiBBcnJheSBvciBhbiBPYmplY3QgaW52b2tpbmcgYSBmdW5jdGlvbiBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmIGBvYmpgIGlzIGFuIEFycmF5IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwgaW5kZXgsIGFuZCBjb21wbGV0ZSBhcnJheSBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmICdvYmonIGlzIGFuIE9iamVjdCBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGtleSwgYW5kIGNvbXBsZXRlIG9iamVjdCBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheX0gb2JqIFRoZSBvYmplY3QgdG8gaXRlcmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGNhbGxiYWNrIHRvIGludm9rZSBmb3IgZWFjaCBpdGVtXG4gKi9cbmZ1bmN0aW9uIGZvckVhY2gob2JqLCBmbikge1xuICAvLyBEb24ndCBib3RoZXIgaWYgbm8gdmFsdWUgcHJvdmlkZWRcbiAgaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIEZvcmNlIGFuIGFycmF5IGlmIG5vdCBhbHJlYWR5IHNvbWV0aGluZyBpdGVyYWJsZVxuICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICBvYmogPSBbb2JqXTtcbiAgfVxuXG4gIGlmIChpc0FycmF5KG9iaikpIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgYXJyYXkgdmFsdWVzXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBvYmoubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBmbi5jYWxsKG51bGwsIG9ialtpXSwgaSwgb2JqKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIG9iamVjdCBrZXlzXG4gICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcbiAgICAgICAgZm4uY2FsbChudWxsLCBvYmpba2V5XSwga2V5LCBvYmopO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEFjY2VwdHMgdmFyYXJncyBleHBlY3RpbmcgZWFjaCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3QsIHRoZW5cbiAqIGltbXV0YWJseSBtZXJnZXMgdGhlIHByb3BlcnRpZXMgb2YgZWFjaCBvYmplY3QgYW5kIHJldHVybnMgcmVzdWx0LlxuICpcbiAqIFdoZW4gbXVsdGlwbGUgb2JqZWN0cyBjb250YWluIHRoZSBzYW1lIGtleSB0aGUgbGF0ZXIgb2JqZWN0IGluXG4gKiB0aGUgYXJndW1lbnRzIGxpc3Qgd2lsbCB0YWtlIHByZWNlZGVuY2UuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGBqc1xuICogdmFyIHJlc3VsdCA9IG1lcmdlKHtmb286IDEyM30sIHtmb286IDQ1Nn0pO1xuICogY29uc29sZS5sb2cocmVzdWx0LmZvbyk7IC8vIG91dHB1dHMgNDU2XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqMSBPYmplY3QgdG8gbWVyZ2VcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJlc3VsdCBvZiBhbGwgbWVyZ2UgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBtZXJnZSgvKiBvYmoxLCBvYmoyLCBvYmozLCAuLi4gKi8pIHtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmICh0eXBlb2YgcmVzdWx0W2tleV0gPT09ICdvYmplY3QnICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXN1bHRba2V5XSA9IG1lcmdlKHJlc3VsdFtrZXldLCB2YWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRba2V5XSA9IHZhbDtcbiAgICB9XG4gIH1cblxuICBmb3IgKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBmb3JFYWNoKGFyZ3VtZW50c1tpXSwgYXNzaWduVmFsdWUpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRXh0ZW5kcyBvYmplY3QgYSBieSBtdXRhYmx5IGFkZGluZyB0byBpdCB0aGUgcHJvcGVydGllcyBvZiBvYmplY3QgYi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYSBUaGUgb2JqZWN0IHRvIGJlIGV4dGVuZGVkXG4gKiBAcGFyYW0ge09iamVjdH0gYiBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tXG4gKiBAcGFyYW0ge09iamVjdH0gdGhpc0FyZyBUaGUgb2JqZWN0IHRvIGJpbmQgZnVuY3Rpb24gdG9cbiAqIEByZXR1cm4ge09iamVjdH0gVGhlIHJlc3VsdGluZyB2YWx1ZSBvZiBvYmplY3QgYVxuICovXG5mdW5jdGlvbiBleHRlbmQoYSwgYiwgdGhpc0FyZykge1xuICBmb3JFYWNoKGIsIGZ1bmN0aW9uIGFzc2lnblZhbHVlKHZhbCwga2V5KSB7XG4gICAgaWYgKHRoaXNBcmcgJiYgdHlwZW9mIHZhbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYVtrZXldID0gYmluZCh2YWwsIHRoaXNBcmcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhW2tleV0gPSB2YWw7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpc0FycmF5OiBpc0FycmF5LFxuICBpc0FycmF5QnVmZmVyOiBpc0FycmF5QnVmZmVyLFxuICBpc0J1ZmZlcjogaXNCdWZmZXIsXG4gIGlzRm9ybURhdGE6IGlzRm9ybURhdGEsXG4gIGlzQXJyYXlCdWZmZXJWaWV3OiBpc0FycmF5QnVmZmVyVmlldyxcbiAgaXNTdHJpbmc6IGlzU3RyaW5nLFxuICBpc051bWJlcjogaXNOdW1iZXIsXG4gIGlzT2JqZWN0OiBpc09iamVjdCxcbiAgaXNVbmRlZmluZWQ6IGlzVW5kZWZpbmVkLFxuICBpc0RhdGU6IGlzRGF0ZSxcbiAgaXNGaWxlOiBpc0ZpbGUsXG4gIGlzQmxvYjogaXNCbG9iLFxuICBpc0Z1bmN0aW9uOiBpc0Z1bmN0aW9uLFxuICBpc1N0cmVhbTogaXNTdHJlYW0sXG4gIGlzVVJMU2VhcmNoUGFyYW1zOiBpc1VSTFNlYXJjaFBhcmFtcyxcbiAgaXNTdGFuZGFyZEJyb3dzZXJFbnY6IGlzU3RhbmRhcmRCcm93c2VyRW52LFxuICBmb3JFYWNoOiBmb3JFYWNoLFxuICBtZXJnZTogbWVyZ2UsXG4gIGV4dGVuZDogZXh0ZW5kLFxuICB0cmltOiB0cmltXG59O1xuIiwidmFyIGNvcmUgPSBtb2R1bGUuZXhwb3J0cyA9IHsgdmVyc2lvbjogJzIuNS43JyB9O1xuaWYgKHR5cGVvZiBfX2UgPT0gJ251bWJlcicpIF9fZSA9IGNvcmU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiIsIi8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZ1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCB0aGF0LCBsZW5ndGgpIHtcbiAgYUZ1bmN0aW9uKGZuKTtcbiAgaWYgKHRoYXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZuO1xuICBzd2l0Y2ggKGxlbmd0aCkge1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uIChhKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcbiAgICB9O1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTtcbiAgICB9O1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiLCBjKTtcbiAgICB9O1xuICB9XG4gIHJldHVybiBmdW5jdGlvbiAoLyogLi4uYXJncyAqLykge1xuICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICB9O1xufTtcbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG1ldGhvZCwgYXJnKSB7XG4gIHJldHVybiAhIW1ldGhvZCAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZWxlc3MtY2FsbFxuICAgIGFyZyA/IG1ldGhvZC5jYWxsKG51bGwsIGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSwgMSkgOiBtZXRob2QuY2FsbChudWxsKTtcbiAgfSk7XG59O1xuIiwiLy8gNy4xLjEgVG9QcmltaXRpdmUoaW5wdXQgWywgUHJlZmVycmVkVHlwZV0pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbi8vIGluc3RlYWQgb2YgdGhlIEVTNiBzcGVjIHZlcnNpb24sIHdlIGRpZG4ndCBpbXBsZW1lbnQgQEB0b1ByaW1pdGl2ZSBjYXNlXG4vLyBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCAtIGZsYWcgLSBwcmVmZXJyZWQgdHlwZSBpcyBhIHN0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFMpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiBpdDtcbiAgdmFyIGZuLCB2YWw7XG4gIGlmIChTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAodHlwZW9mIChmbiA9IGl0LnZhbHVlT2YpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKCFTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG59O1xuIiwiLy8gNy4yLjEgUmVxdWlyZU9iamVjdENvZXJjaWJsZShhcmd1bWVudClcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uICBcIiArIGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIi8vIDcuMS40IFRvSW50ZWdlclxudmFyIGNlaWwgPSBNYXRoLmNlaWw7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGlzTmFOKGl0ID0gK2l0KSA/IDAgOiAoaXQgPiAwID8gZmxvb3IgOiBjZWlsKShpdCk7XG59O1xuIiwiLy8gbW9zdCBPYmplY3QgbWV0aG9kcyBieSBFUzYgc2hvdWxkIGFjY2VwdCBwcmltaXRpdmVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBleGVjKSB7XG4gIHZhciBmbiA9IChjb3JlLk9iamVjdCB8fCB7fSlbS0VZXSB8fCBPYmplY3RbS0VZXTtcbiAgdmFyIGV4cCA9IHt9O1xuICBleHBbS0VZXSA9IGV4ZWMoZm4pO1xuICAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uICgpIHsgZm4oMSk7IH0pLCAnT2JqZWN0JywgZXhwKTtcbn07XG4iLCIvLyAwIC0+IEFycmF5I2ZvckVhY2hcbi8vIDEgLT4gQXJyYXkjbWFwXG4vLyAyIC0+IEFycmF5I2ZpbHRlclxuLy8gMyAtPiBBcnJheSNzb21lXG4vLyA0IC0+IEFycmF5I2V2ZXJ5XG4vLyA1IC0+IEFycmF5I2ZpbmRcbi8vIDYgLT4gQXJyYXkjZmluZEluZGV4XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgYXNjID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFRZUEUsICRjcmVhdGUpIHtcbiAgdmFyIElTX01BUCA9IFRZUEUgPT0gMTtcbiAgdmFyIElTX0ZJTFRFUiA9IFRZUEUgPT0gMjtcbiAgdmFyIElTX1NPTUUgPSBUWVBFID09IDM7XG4gIHZhciBJU19FVkVSWSA9IFRZUEUgPT0gNDtcbiAgdmFyIElTX0ZJTkRfSU5ERVggPSBUWVBFID09IDY7XG4gIHZhciBOT19IT0xFUyA9IFRZUEUgPT0gNSB8fCBJU19GSU5EX0lOREVYO1xuICB2YXIgY3JlYXRlID0gJGNyZWF0ZSB8fCBhc2M7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGNhbGxiYWNrZm4sIHRoYXQpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgc2VsZiA9IElPYmplY3QoTyk7XG4gICAgdmFyIGYgPSBjdHgoY2FsbGJhY2tmbiwgdGhhdCwgMyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKHNlbGYubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciByZXN1bHQgPSBJU19NQVAgPyBjcmVhdGUoJHRoaXMsIGxlbmd0aCkgOiBJU19GSUxURVIgPyBjcmVhdGUoJHRoaXMsIDApIDogdW5kZWZpbmVkO1xuICAgIHZhciB2YWwsIHJlcztcbiAgICBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKE5PX0hPTEVTIHx8IGluZGV4IGluIHNlbGYpIHtcbiAgICAgIHZhbCA9IHNlbGZbaW5kZXhdO1xuICAgICAgcmVzID0gZih2YWwsIGluZGV4LCBPKTtcbiAgICAgIGlmIChUWVBFKSB7XG4gICAgICAgIGlmIChJU19NQVApIHJlc3VsdFtpbmRleF0gPSByZXM7ICAgLy8gbWFwXG4gICAgICAgIGVsc2UgaWYgKHJlcykgc3dpdGNoIChUWVBFKSB7XG4gICAgICAgICAgY2FzZSAzOiByZXR1cm4gdHJ1ZTsgICAgICAgICAgICAgLy8gc29tZVxuICAgICAgICAgIGNhc2UgNTogcmV0dXJuIHZhbDsgICAgICAgICAgICAgIC8vIGZpbmRcbiAgICAgICAgICBjYXNlIDY6IHJldHVybiBpbmRleDsgICAgICAgICAgICAvLyBmaW5kSW5kZXhcbiAgICAgICAgICBjYXNlIDI6IHJlc3VsdC5wdXNoKHZhbCk7ICAgICAgICAvLyBmaWx0ZXJcbiAgICAgICAgfSBlbHNlIGlmIChJU19FVkVSWSkgcmV0dXJuIGZhbHNlOyAvLyBldmVyeVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gSVNfRklORF9JTkRFWCA/IC0xIDogSVNfU09NRSB8fCBJU19FVkVSWSA/IElTX0VWRVJZIDogcmVzdWx0O1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbmlmIChyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpKSB7XG4gIHZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xuICB2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG4gIHZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG4gIHZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4gIHZhciAkdHlwZWQgPSByZXF1aXJlKCcuL190eXBlZCcpO1xuICB2YXIgJGJ1ZmZlciA9IHJlcXVpcmUoJy4vX3R5cGVkLWJ1ZmZlcicpO1xuICB2YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG4gIHZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbiAgdmFyIHByb3BlcnR5RGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbiAgdmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG4gIHZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xuICB2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xuICB2YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbiAgdmFyIHRvSW5kZXggPSByZXF1aXJlKCcuL190by1pbmRleCcpO1xuICB2YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbiAgdmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG4gIHZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbiAgdmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG4gIHZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuICB2YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbiAgdmFyIGlzQXJyYXlJdGVyID0gcmVxdWlyZSgnLi9faXMtYXJyYXktaXRlcicpO1xuICB2YXIgY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xuICB2YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG4gIHZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xuICB2YXIgZ2V0SXRlckZuID0gcmVxdWlyZSgnLi9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QnKTtcbiAgdmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xuICB2YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG4gIHZhciBjcmVhdGVBcnJheU1ldGhvZCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKTtcbiAgdmFyIGNyZWF0ZUFycmF5SW5jbHVkZXMgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpO1xuICB2YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xuICB2YXIgQXJyYXlJdGVyYXRvcnMgPSByZXF1aXJlKCcuL2VzNi5hcnJheS5pdGVyYXRvcicpO1xuICB2YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG4gIHZhciAkaXRlckRldGVjdCA9IHJlcXVpcmUoJy4vX2l0ZXItZGV0ZWN0Jyk7XG4gIHZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKTtcbiAgdmFyIGFycmF5RmlsbCA9IHJlcXVpcmUoJy4vX2FycmF5LWZpbGwnKTtcbiAgdmFyIGFycmF5Q29weVdpdGhpbiA9IHJlcXVpcmUoJy4vX2FycmF5LWNvcHktd2l0aGluJyk7XG4gIHZhciAkRFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbiAgdmFyICRHT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbiAgdmFyIGRQID0gJERQLmY7XG4gIHZhciBnT1BEID0gJEdPUEQuZjtcbiAgdmFyIFJhbmdlRXJyb3IgPSBnbG9iYWwuUmFuZ2VFcnJvcjtcbiAgdmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG4gIHZhciBVaW50OEFycmF5ID0gZ2xvYmFsLlVpbnQ4QXJyYXk7XG4gIHZhciBBUlJBWV9CVUZGRVIgPSAnQXJyYXlCdWZmZXInO1xuICB2YXIgU0hBUkVEX0JVRkZFUiA9ICdTaGFyZWQnICsgQVJSQVlfQlVGRkVSO1xuICB2YXIgQllURVNfUEVSX0VMRU1FTlQgPSAnQllURVNfUEVSX0VMRU1FTlQnO1xuICB2YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG4gIHZhciBBcnJheVByb3RvID0gQXJyYXlbUFJPVE9UWVBFXTtcbiAgdmFyICRBcnJheUJ1ZmZlciA9ICRidWZmZXIuQXJyYXlCdWZmZXI7XG4gIHZhciAkRGF0YVZpZXcgPSAkYnVmZmVyLkRhdGFWaWV3O1xuICB2YXIgYXJyYXlGb3JFYWNoID0gY3JlYXRlQXJyYXlNZXRob2QoMCk7XG4gIHZhciBhcnJheUZpbHRlciA9IGNyZWF0ZUFycmF5TWV0aG9kKDIpO1xuICB2YXIgYXJyYXlTb21lID0gY3JlYXRlQXJyYXlNZXRob2QoMyk7XG4gIHZhciBhcnJheUV2ZXJ5ID0gY3JlYXRlQXJyYXlNZXRob2QoNCk7XG4gIHZhciBhcnJheUZpbmQgPSBjcmVhdGVBcnJheU1ldGhvZCg1KTtcbiAgdmFyIGFycmF5RmluZEluZGV4ID0gY3JlYXRlQXJyYXlNZXRob2QoNik7XG4gIHZhciBhcnJheUluY2x1ZGVzID0gY3JlYXRlQXJyYXlJbmNsdWRlcyh0cnVlKTtcbiAgdmFyIGFycmF5SW5kZXhPZiA9IGNyZWF0ZUFycmF5SW5jbHVkZXMoZmFsc2UpO1xuICB2YXIgYXJyYXlWYWx1ZXMgPSBBcnJheUl0ZXJhdG9ycy52YWx1ZXM7XG4gIHZhciBhcnJheUtleXMgPSBBcnJheUl0ZXJhdG9ycy5rZXlzO1xuICB2YXIgYXJyYXlFbnRyaWVzID0gQXJyYXlJdGVyYXRvcnMuZW50cmllcztcbiAgdmFyIGFycmF5TGFzdEluZGV4T2YgPSBBcnJheVByb3RvLmxhc3RJbmRleE9mO1xuICB2YXIgYXJyYXlSZWR1Y2UgPSBBcnJheVByb3RvLnJlZHVjZTtcbiAgdmFyIGFycmF5UmVkdWNlUmlnaHQgPSBBcnJheVByb3RvLnJlZHVjZVJpZ2h0O1xuICB2YXIgYXJyYXlKb2luID0gQXJyYXlQcm90by5qb2luO1xuICB2YXIgYXJyYXlTb3J0ID0gQXJyYXlQcm90by5zb3J0O1xuICB2YXIgYXJyYXlTbGljZSA9IEFycmF5UHJvdG8uc2xpY2U7XG4gIHZhciBhcnJheVRvU3RyaW5nID0gQXJyYXlQcm90by50b1N0cmluZztcbiAgdmFyIGFycmF5VG9Mb2NhbGVTdHJpbmcgPSBBcnJheVByb3RvLnRvTG9jYWxlU3RyaW5nO1xuICB2YXIgSVRFUkFUT1IgPSB3a3MoJ2l0ZXJhdG9yJyk7XG4gIHZhciBUQUcgPSB3a3MoJ3RvU3RyaW5nVGFnJyk7XG4gIHZhciBUWVBFRF9DT05TVFJVQ1RPUiA9IHVpZCgndHlwZWRfY29uc3RydWN0b3InKTtcbiAgdmFyIERFRl9DT05TVFJVQ1RPUiA9IHVpZCgnZGVmX2NvbnN0cnVjdG9yJyk7XG4gIHZhciBBTExfQ09OU1RSVUNUT1JTID0gJHR5cGVkLkNPTlNUUjtcbiAgdmFyIFRZUEVEX0FSUkFZID0gJHR5cGVkLlRZUEVEO1xuICB2YXIgVklFVyA9ICR0eXBlZC5WSUVXO1xuICB2YXIgV1JPTkdfTEVOR1RIID0gJ1dyb25nIGxlbmd0aCEnO1xuXG4gIHZhciAkbWFwID0gY3JlYXRlQXJyYXlNZXRob2QoMSwgZnVuY3Rpb24gKE8sIGxlbmd0aCkge1xuICAgIHJldHVybiBhbGxvY2F0ZShzcGVjaWVzQ29uc3RydWN0b3IoTywgT1tERUZfQ09OU1RSVUNUT1JdKSwgbGVuZ3RoKTtcbiAgfSk7XG5cbiAgdmFyIExJVFRMRV9FTkRJQU4gPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KG5ldyBVaW50MTZBcnJheShbMV0pLmJ1ZmZlcilbMF0gPT09IDE7XG4gIH0pO1xuXG4gIHZhciBGT1JDRURfU0VUID0gISFVaW50OEFycmF5ICYmICEhVWludDhBcnJheVtQUk9UT1RZUEVdLnNldCAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3IFVpbnQ4QXJyYXkoMSkuc2V0KHt9KTtcbiAgfSk7XG5cbiAgdmFyIHRvT2Zmc2V0ID0gZnVuY3Rpb24gKGl0LCBCWVRFUykge1xuICAgIHZhciBvZmZzZXQgPSB0b0ludGVnZXIoaXQpO1xuICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCAlIEJZVEVTKSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBvZmZzZXQhJyk7XG4gICAgcmV0dXJuIG9mZnNldDtcbiAgfTtcblxuICB2YXIgdmFsaWRhdGUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICBpZiAoaXNPYmplY3QoaXQpICYmIFRZUEVEX0FSUkFZIGluIGl0KSByZXR1cm4gaXQ7XG4gICAgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYSB0eXBlZCBhcnJheSEnKTtcbiAgfTtcblxuICB2YXIgYWxsb2NhdGUgPSBmdW5jdGlvbiAoQywgbGVuZ3RoKSB7XG4gICAgaWYgKCEoaXNPYmplY3QoQykgJiYgVFlQRURfQ09OU1RSVUNUT1IgaW4gQykpIHtcbiAgICAgIHRocm93IFR5cGVFcnJvcignSXQgaXMgbm90IGEgdHlwZWQgYXJyYXkgY29uc3RydWN0b3IhJyk7XG4gICAgfSByZXR1cm4gbmV3IEMobGVuZ3RoKTtcbiAgfTtcblxuICB2YXIgc3BlY2llc0Zyb21MaXN0ID0gZnVuY3Rpb24gKE8sIGxpc3QpIHtcbiAgICByZXR1cm4gZnJvbUxpc3Qoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSksIGxpc3QpO1xuICB9O1xuXG4gIHZhciBmcm9tTGlzdCA9IGZ1bmN0aW9uIChDLCBsaXN0KSB7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgbGVuZ3RoID0gbGlzdC5sZW5ndGg7XG4gICAgdmFyIHJlc3VsdCA9IGFsbG9jYXRlKEMsIGxlbmd0aCk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSByZXN1bHRbaW5kZXhdID0gbGlzdFtpbmRleCsrXTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIHZhciBhZGRHZXR0ZXIgPSBmdW5jdGlvbiAoaXQsIGtleSwgaW50ZXJuYWwpIHtcbiAgICBkUChpdCwga2V5LCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fZFtpbnRlcm5hbF07IH0gfSk7XG4gIH07XG5cbiAgdmFyICRmcm9tID0gZnVuY3Rpb24gZnJvbShzb3VyY2UgLyogLCBtYXBmbiwgdGhpc0FyZyAqLykge1xuICAgIHZhciBPID0gdG9PYmplY3Qoc291cmNlKTtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIG1hcGZuID0gYUxlbiA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gICAgdmFyIG1hcHBpbmcgPSBtYXBmbiAhPT0gdW5kZWZpbmVkO1xuICAgIHZhciBpdGVyRm4gPSBnZXRJdGVyRm4oTyk7XG4gICAgdmFyIGksIGxlbmd0aCwgdmFsdWVzLCByZXN1bHQsIHN0ZXAsIGl0ZXJhdG9yO1xuICAgIGlmIChpdGVyRm4gIT0gdW5kZWZpbmVkICYmICFpc0FycmF5SXRlcihpdGVyRm4pKSB7XG4gICAgICBmb3IgKGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoTyksIHZhbHVlcyA9IFtdLCBpID0gMDsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOyBpKyspIHtcbiAgICAgICAgdmFsdWVzLnB1c2goc3RlcC52YWx1ZSk7XG4gICAgICB9IE8gPSB2YWx1ZXM7XG4gICAgfVxuICAgIGlmIChtYXBwaW5nICYmIGFMZW4gPiAyKSBtYXBmbiA9IGN0eChtYXBmbiwgYXJndW1lbnRzWzJdLCAyKTtcbiAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCksIHJlc3VsdCA9IGFsbG9jYXRlKHRoaXMsIGxlbmd0aCk7IGxlbmd0aCA+IGk7IGkrKykge1xuICAgICAgcmVzdWx0W2ldID0gbWFwcGluZyA/IG1hcGZuKE9baV0sIGkpIDogT1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICB2YXIgJG9mID0gZnVuY3Rpb24gb2YoLyogLi4uaXRlbXMgKi8pIHtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciByZXN1bHQgPSBhbGxvY2F0ZSh0aGlzLCBsZW5ndGgpO1xuICAgIHdoaWxlIChsZW5ndGggPiBpbmRleCkgcmVzdWx0W2luZGV4XSA9IGFyZ3VtZW50c1tpbmRleCsrXTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIGlPUyBTYWZhcmkgNi54IGZhaWxzIGhlcmVcbiAgdmFyIFRPX0xPQ0FMRV9CVUcgPSAhIVVpbnQ4QXJyYXkgJiYgZmFpbHMoZnVuY3Rpb24gKCkgeyBhcnJheVRvTG9jYWxlU3RyaW5nLmNhbGwobmV3IFVpbnQ4QXJyYXkoMSkpOyB9KTtcblxuICB2YXIgJHRvTG9jYWxlU3RyaW5nID0gZnVuY3Rpb24gdG9Mb2NhbGVTdHJpbmcoKSB7XG4gICAgcmV0dXJuIGFycmF5VG9Mb2NhbGVTdHJpbmcuYXBwbHkoVE9fTE9DQUxFX0JVRyA/IGFycmF5U2xpY2UuY2FsbCh2YWxpZGF0ZSh0aGlzKSkgOiB2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgfTtcblxuICB2YXIgcHJvdG8gPSB7XG4gICAgY29weVdpdGhpbjogZnVuY3Rpb24gY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0IC8qICwgZW5kICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlDb3B5V2l0aGluLmNhbGwodmFsaWRhdGUodGhpcyksIHRhcmdldCwgc3RhcnQsIGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGV2ZXJ5OiBmdW5jdGlvbiBldmVyeShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIGFycmF5RXZlcnkodmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGZpbGw6IGZ1bmN0aW9uIGZpbGwodmFsdWUgLyogLCBzdGFydCwgZW5kICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheUZpbGwuYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBmaWx0ZXI6IGZ1bmN0aW9uIGZpbHRlcihjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIHNwZWNpZXNGcm9tTGlzdCh0aGlzLCBhcnJheUZpbHRlcih2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbixcbiAgICAgICAgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpKTtcbiAgICB9LFxuICAgIGZpbmQ6IGZ1bmN0aW9uIGZpbmQocHJlZGljYXRlIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIGFycmF5RmluZCh2YWxpZGF0ZSh0aGlzKSwgcHJlZGljYXRlLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBmaW5kSW5kZXg6IGZ1bmN0aW9uIGZpbmRJbmRleChwcmVkaWNhdGUgLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlGaW5kSW5kZXgodmFsaWRhdGUodGhpcyksIHByZWRpY2F0ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgYXJyYXlGb3JFYWNoKHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBpbmRleE9mOiBmdW5jdGlvbiBpbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUluZGV4T2YodmFsaWRhdGUodGhpcyksIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlJbmNsdWRlcyh2YWxpZGF0ZSh0aGlzKSwgc2VhcmNoRWxlbWVudCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgam9pbjogZnVuY3Rpb24gam9pbihzZXBhcmF0b3IpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5Sm9pbi5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIGxhc3RJbmRleE9mOiBmdW5jdGlvbiBsYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheUxhc3RJbmRleE9mLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgbWFwOiBmdW5jdGlvbiBtYXAobWFwZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gJG1hcCh2YWxpZGF0ZSh0aGlzKSwgbWFwZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIHJlZHVjZTogZnVuY3Rpb24gcmVkdWNlKGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5UmVkdWNlLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgcmVkdWNlUmlnaHQ6IGZ1bmN0aW9uIHJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5UmVkdWNlUmlnaHQuYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICByZXZlcnNlOiBmdW5jdGlvbiByZXZlcnNlKCkge1xuICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgdmFyIGxlbmd0aCA9IHZhbGlkYXRlKHRoYXQpLmxlbmd0aDtcbiAgICAgIHZhciBtaWRkbGUgPSBNYXRoLmZsb29yKGxlbmd0aCAvIDIpO1xuICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgIHZhciB2YWx1ZTtcbiAgICAgIHdoaWxlIChpbmRleCA8IG1pZGRsZSkge1xuICAgICAgICB2YWx1ZSA9IHRoYXRbaW5kZXhdO1xuICAgICAgICB0aGF0W2luZGV4KytdID0gdGhhdFstLWxlbmd0aF07XG4gICAgICAgIHRoYXRbbGVuZ3RoXSA9IHZhbHVlO1xuICAgICAgfSByZXR1cm4gdGhhdDtcbiAgICB9LFxuICAgIHNvbWU6IGZ1bmN0aW9uIHNvbWUoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheVNvbWUodmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIHNvcnQ6IGZ1bmN0aW9uIHNvcnQoY29tcGFyZWZuKSB7XG4gICAgICByZXR1cm4gYXJyYXlTb3J0LmNhbGwodmFsaWRhdGUodGhpcyksIGNvbXBhcmVmbik7XG4gICAgfSxcbiAgICBzdWJhcnJheTogZnVuY3Rpb24gc3ViYXJyYXkoYmVnaW4sIGVuZCkge1xuICAgICAgdmFyIE8gPSB2YWxpZGF0ZSh0aGlzKTtcbiAgICAgIHZhciBsZW5ndGggPSBPLmxlbmd0aDtcbiAgICAgIHZhciAkYmVnaW4gPSB0b0Fic29sdXRlSW5kZXgoYmVnaW4sIGxlbmd0aCk7XG4gICAgICByZXR1cm4gbmV3IChzcGVjaWVzQ29uc3RydWN0b3IoTywgT1tERUZfQ09OU1RSVUNUT1JdKSkoXG4gICAgICAgIE8uYnVmZmVyLFxuICAgICAgICBPLmJ5dGVPZmZzZXQgKyAkYmVnaW4gKiBPLkJZVEVTX1BFUl9FTEVNRU5ULFxuICAgICAgICB0b0xlbmd0aCgoZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW5ndGgpKSAtICRiZWdpbilcbiAgICAgICk7XG4gICAgfVxuICB9O1xuXG4gIHZhciAkc2xpY2UgPSBmdW5jdGlvbiBzbGljZShzdGFydCwgZW5kKSB7XG4gICAgcmV0dXJuIHNwZWNpZXNGcm9tTGlzdCh0aGlzLCBhcnJheVNsaWNlLmNhbGwodmFsaWRhdGUodGhpcyksIHN0YXJ0LCBlbmQpKTtcbiAgfTtcblxuICB2YXIgJHNldCA9IGZ1bmN0aW9uIHNldChhcnJheUxpa2UgLyogLCBvZmZzZXQgKi8pIHtcbiAgICB2YWxpZGF0ZSh0aGlzKTtcbiAgICB2YXIgb2Zmc2V0ID0gdG9PZmZzZXQoYXJndW1lbnRzWzFdLCAxKTtcbiAgICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGg7XG4gICAgdmFyIHNyYyA9IHRvT2JqZWN0KGFycmF5TGlrZSk7XG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKHNyYy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgaWYgKGxlbiArIG9mZnNldCA+IGxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgIHdoaWxlIChpbmRleCA8IGxlbikgdGhpc1tvZmZzZXQgKyBpbmRleF0gPSBzcmNbaW5kZXgrK107XG4gIH07XG5cbiAgdmFyICRpdGVyYXRvcnMgPSB7XG4gICAgZW50cmllczogZnVuY3Rpb24gZW50cmllcygpIHtcbiAgICAgIHJldHVybiBhcnJheUVudHJpZXMuY2FsbCh2YWxpZGF0ZSh0aGlzKSk7XG4gICAgfSxcbiAgICBrZXlzOiBmdW5jdGlvbiBrZXlzKCkge1xuICAgICAgcmV0dXJuIGFycmF5S2V5cy5jYWxsKHZhbGlkYXRlKHRoaXMpKTtcbiAgICB9LFxuICAgIHZhbHVlczogZnVuY3Rpb24gdmFsdWVzKCkge1xuICAgICAgcmV0dXJuIGFycmF5VmFsdWVzLmNhbGwodmFsaWRhdGUodGhpcykpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaXNUQUluZGV4ID0gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KHRhcmdldClcbiAgICAgICYmIHRhcmdldFtUWVBFRF9BUlJBWV1cbiAgICAgICYmIHR5cGVvZiBrZXkgIT0gJ3N5bWJvbCdcbiAgICAgICYmIGtleSBpbiB0YXJnZXRcbiAgICAgICYmIFN0cmluZygra2V5KSA9PSBTdHJpbmcoa2V5KTtcbiAgfTtcbiAgdmFyICRnZXREZXNjID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSB7XG4gICAgcmV0dXJuIGlzVEFJbmRleCh0YXJnZXQsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpXG4gICAgICA/IHByb3BlcnR5RGVzYygyLCB0YXJnZXRba2V5XSlcbiAgICAgIDogZ09QRCh0YXJnZXQsIGtleSk7XG4gIH07XG4gIHZhciAkc2V0RGVzYyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBkZXNjKSB7XG4gICAgaWYgKGlzVEFJbmRleCh0YXJnZXQsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpXG4gICAgICAmJiBpc09iamVjdChkZXNjKVxuICAgICAgJiYgaGFzKGRlc2MsICd2YWx1ZScpXG4gICAgICAmJiAhaGFzKGRlc2MsICdnZXQnKVxuICAgICAgJiYgIWhhcyhkZXNjLCAnc2V0JylcbiAgICAgIC8vIFRPRE86IGFkZCB2YWxpZGF0aW9uIGRlc2NyaXB0b3Igdy9vIGNhbGxpbmcgYWNjZXNzb3JzXG4gICAgICAmJiAhZGVzYy5jb25maWd1cmFibGVcbiAgICAgICYmICghaGFzKGRlc2MsICd3cml0YWJsZScpIHx8IGRlc2Mud3JpdGFibGUpXG4gICAgICAmJiAoIWhhcyhkZXNjLCAnZW51bWVyYWJsZScpIHx8IGRlc2MuZW51bWVyYWJsZSlcbiAgICApIHtcbiAgICAgIHRhcmdldFtrZXldID0gZGVzYy52YWx1ZTtcbiAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfSByZXR1cm4gZFAodGFyZ2V0LCBrZXksIGRlc2MpO1xuICB9O1xuXG4gIGlmICghQUxMX0NPTlNUUlVDVE9SUykge1xuICAgICRHT1BELmYgPSAkZ2V0RGVzYztcbiAgICAkRFAuZiA9ICRzZXREZXNjO1xuICB9XG5cbiAgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhQUxMX0NPTlNUUlVDVE9SUywgJ09iamVjdCcsIHtcbiAgICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ICRnZXREZXNjLFxuICAgIGRlZmluZVByb3BlcnR5OiAkc2V0RGVzY1xuICB9KTtcblxuICBpZiAoZmFpbHMoZnVuY3Rpb24gKCkgeyBhcnJheVRvU3RyaW5nLmNhbGwoe30pOyB9KSkge1xuICAgIGFycmF5VG9TdHJpbmcgPSBhcnJheVRvTG9jYWxlU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICByZXR1cm4gYXJyYXlKb2luLmNhbGwodGhpcyk7XG4gICAgfTtcbiAgfVxuXG4gIHZhciAkVHlwZWRBcnJheVByb3RvdHlwZSQgPSByZWRlZmluZUFsbCh7fSwgcHJvdG8pO1xuICByZWRlZmluZUFsbCgkVHlwZWRBcnJheVByb3RvdHlwZSQsICRpdGVyYXRvcnMpO1xuICBoaWRlKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgSVRFUkFUT1IsICRpdGVyYXRvcnMudmFsdWVzKTtcbiAgcmVkZWZpbmVBbGwoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCB7XG4gICAgc2xpY2U6ICRzbGljZSxcbiAgICBzZXQ6ICRzZXQsXG4gICAgY29uc3RydWN0b3I6IGZ1bmN0aW9uICgpIHsgLyogbm9vcCAqLyB9LFxuICAgIHRvU3RyaW5nOiBhcnJheVRvU3RyaW5nLFxuICAgIHRvTG9jYWxlU3RyaW5nOiAkdG9Mb2NhbGVTdHJpbmdcbiAgfSk7XG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdidWZmZXInLCAnYicpO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnYnl0ZU9mZnNldCcsICdvJyk7XG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdieXRlTGVuZ3RoJywgJ2wnKTtcbiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2xlbmd0aCcsICdlJyk7XG4gIGRQKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgVEFHLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzW1RZUEVEX0FSUkFZXTsgfVxuICB9KTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LXN0YXRlbWVudHNcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBCWVRFUywgd3JhcHBlciwgQ0xBTVBFRCkge1xuICAgIENMQU1QRUQgPSAhIUNMQU1QRUQ7XG4gICAgdmFyIE5BTUUgPSBLRVkgKyAoQ0xBTVBFRCA/ICdDbGFtcGVkJyA6ICcnKSArICdBcnJheSc7XG4gICAgdmFyIEdFVFRFUiA9ICdnZXQnICsgS0VZO1xuICAgIHZhciBTRVRURVIgPSAnc2V0JyArIEtFWTtcbiAgICB2YXIgVHlwZWRBcnJheSA9IGdsb2JhbFtOQU1FXTtcbiAgICB2YXIgQmFzZSA9IFR5cGVkQXJyYXkgfHwge307XG4gICAgdmFyIFRBQyA9IFR5cGVkQXJyYXkgJiYgZ2V0UHJvdG90eXBlT2YoVHlwZWRBcnJheSk7XG4gICAgdmFyIEZPUkNFRCA9ICFUeXBlZEFycmF5IHx8ICEkdHlwZWQuQUJWO1xuICAgIHZhciBPID0ge307XG4gICAgdmFyIFR5cGVkQXJyYXlQcm90b3R5cGUgPSBUeXBlZEFycmF5ICYmIFR5cGVkQXJyYXlbUFJPVE9UWVBFXTtcbiAgICB2YXIgZ2V0dGVyID0gZnVuY3Rpb24gKHRoYXQsIGluZGV4KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoYXQuX2Q7XG4gICAgICByZXR1cm4gZGF0YS52W0dFVFRFUl0oaW5kZXggKiBCWVRFUyArIGRhdGEubywgTElUVExFX0VORElBTik7XG4gICAgfTtcbiAgICB2YXIgc2V0dGVyID0gZnVuY3Rpb24gKHRoYXQsIGluZGV4LCB2YWx1ZSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGF0Ll9kO1xuICAgICAgaWYgKENMQU1QRUQpIHZhbHVlID0gKHZhbHVlID0gTWF0aC5yb3VuZCh2YWx1ZSkpIDwgMCA/IDAgOiB2YWx1ZSA+IDB4ZmYgPyAweGZmIDogdmFsdWUgJiAweGZmO1xuICAgICAgZGF0YS52W1NFVFRFUl0oaW5kZXggKiBCWVRFUyArIGRhdGEubywgdmFsdWUsIExJVFRMRV9FTkRJQU4pO1xuICAgIH07XG4gICAgdmFyIGFkZEVsZW1lbnQgPSBmdW5jdGlvbiAodGhhdCwgaW5kZXgpIHtcbiAgICAgIGRQKHRoYXQsIGluZGV4LCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBnZXR0ZXIodGhpcywgaW5kZXgpO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBzZXR0ZXIodGhpcywgaW5kZXgsIHZhbHVlKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgfTtcbiAgICBpZiAoRk9SQ0VEKSB7XG4gICAgICBUeXBlZEFycmF5ID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgZGF0YSwgJG9mZnNldCwgJGxlbmd0aCkge1xuICAgICAgICBhbkluc3RhbmNlKHRoYXQsIFR5cGVkQXJyYXksIE5BTUUsICdfZCcpO1xuICAgICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgICB2YXIgb2Zmc2V0ID0gMDtcbiAgICAgICAgdmFyIGJ1ZmZlciwgYnl0ZUxlbmd0aCwgbGVuZ3RoLCBrbGFzcztcbiAgICAgICAgaWYgKCFpc09iamVjdChkYXRhKSkge1xuICAgICAgICAgIGxlbmd0aCA9IHRvSW5kZXgoZGF0YSk7XG4gICAgICAgICAgYnl0ZUxlbmd0aCA9IGxlbmd0aCAqIEJZVEVTO1xuICAgICAgICAgIGJ1ZmZlciA9IG5ldyAkQXJyYXlCdWZmZXIoYnl0ZUxlbmd0aCk7XG4gICAgICAgIH0gZWxzZSBpZiAoZGF0YSBpbnN0YW5jZW9mICRBcnJheUJ1ZmZlciB8fCAoa2xhc3MgPSBjbGFzc29mKGRhdGEpKSA9PSBBUlJBWV9CVUZGRVIgfHwga2xhc3MgPT0gU0hBUkVEX0JVRkZFUikge1xuICAgICAgICAgIGJ1ZmZlciA9IGRhdGE7XG4gICAgICAgICAgb2Zmc2V0ID0gdG9PZmZzZXQoJG9mZnNldCwgQllURVMpO1xuICAgICAgICAgIHZhciAkbGVuID0gZGF0YS5ieXRlTGVuZ3RoO1xuICAgICAgICAgIGlmICgkbGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmICgkbGVuICUgQllURVMpIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICAgICAgICAgIGJ5dGVMZW5ndGggPSAkbGVuIC0gb2Zmc2V0O1xuICAgICAgICAgICAgaWYgKGJ5dGVMZW5ndGggPCAwKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJ5dGVMZW5ndGggPSB0b0xlbmd0aCgkbGVuZ3RoKSAqIEJZVEVTO1xuICAgICAgICAgICAgaWYgKGJ5dGVMZW5ndGggKyBvZmZzZXQgPiAkbGVuKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGxlbmd0aCA9IGJ5dGVMZW5ndGggLyBCWVRFUztcbiAgICAgICAgfSBlbHNlIGlmIChUWVBFRF9BUlJBWSBpbiBkYXRhKSB7XG4gICAgICAgICAgcmV0dXJuIGZyb21MaXN0KFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiAkZnJvbS5jYWxsKFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGhpZGUodGhhdCwgJ19kJywge1xuICAgICAgICAgIGI6IGJ1ZmZlcixcbiAgICAgICAgICBvOiBvZmZzZXQsXG4gICAgICAgICAgbDogYnl0ZUxlbmd0aCxcbiAgICAgICAgICBlOiBsZW5ndGgsXG4gICAgICAgICAgdjogbmV3ICREYXRhVmlldyhidWZmZXIpXG4gICAgICAgIH0pO1xuICAgICAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIGFkZEVsZW1lbnQodGhhdCwgaW5kZXgrKyk7XG4gICAgICB9KTtcbiAgICAgIFR5cGVkQXJyYXlQcm90b3R5cGUgPSBUeXBlZEFycmF5W1BST1RPVFlQRV0gPSBjcmVhdGUoJFR5cGVkQXJyYXlQcm90b3R5cGUkKTtcbiAgICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgJ2NvbnN0cnVjdG9yJywgVHlwZWRBcnJheSk7XG4gICAgfSBlbHNlIGlmICghZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgVHlwZWRBcnJheSgxKTtcbiAgICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgbmV3IFR5cGVkQXJyYXkoLTEpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIH0pIHx8ICEkaXRlckRldGVjdChmdW5jdGlvbiAoaXRlcikge1xuICAgICAgbmV3IFR5cGVkQXJyYXkoKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAgIG5ldyBUeXBlZEFycmF5KG51bGwpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgICAgbmV3IFR5cGVkQXJyYXkoMS41KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAgIG5ldyBUeXBlZEFycmF5KGl0ZXIpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIH0sIHRydWUpKSB7XG4gICAgICBUeXBlZEFycmF5ID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgZGF0YSwgJG9mZnNldCwgJGxlbmd0aCkge1xuICAgICAgICBhbkluc3RhbmNlKHRoYXQsIFR5cGVkQXJyYXksIE5BTUUpO1xuICAgICAgICB2YXIga2xhc3M7XG4gICAgICAgIC8vIGB3c2AgbW9kdWxlIGJ1ZywgdGVtcG9yYXJpbHkgcmVtb3ZlIHZhbGlkYXRpb24gbGVuZ3RoIGZvciBVaW50OEFycmF5XG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJzb2NrZXRzL3dzL3B1bGwvNjQ1XG4gICAgICAgIGlmICghaXNPYmplY3QoZGF0YSkpIHJldHVybiBuZXcgQmFzZSh0b0luZGV4KGRhdGEpKTtcbiAgICAgICAgaWYgKGRhdGEgaW5zdGFuY2VvZiAkQXJyYXlCdWZmZXIgfHwgKGtsYXNzID0gY2xhc3NvZihkYXRhKSkgPT0gQVJSQVlfQlVGRkVSIHx8IGtsYXNzID09IFNIQVJFRF9CVUZGRVIpIHtcbiAgICAgICAgICByZXR1cm4gJGxlbmd0aCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IG5ldyBCYXNlKGRhdGEsIHRvT2Zmc2V0KCRvZmZzZXQsIEJZVEVTKSwgJGxlbmd0aClcbiAgICAgICAgICAgIDogJG9mZnNldCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgID8gbmV3IEJhc2UoZGF0YSwgdG9PZmZzZXQoJG9mZnNldCwgQllURVMpKVxuICAgICAgICAgICAgICA6IG5ldyBCYXNlKGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChUWVBFRF9BUlJBWSBpbiBkYXRhKSByZXR1cm4gZnJvbUxpc3QoVHlwZWRBcnJheSwgZGF0YSk7XG4gICAgICAgIHJldHVybiAkZnJvbS5jYWxsKFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgfSk7XG4gICAgICBhcnJheUZvckVhY2goVEFDICE9PSBGdW5jdGlvbi5wcm90b3R5cGUgPyBnT1BOKEJhc2UpLmNvbmNhdChnT1BOKFRBQykpIDogZ09QTihCYXNlKSwgZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBpZiAoIShrZXkgaW4gVHlwZWRBcnJheSkpIGhpZGUoVHlwZWRBcnJheSwga2V5LCBCYXNlW2tleV0pO1xuICAgICAgfSk7XG4gICAgICBUeXBlZEFycmF5W1BST1RPVFlQRV0gPSBUeXBlZEFycmF5UHJvdG90eXBlO1xuICAgICAgaWYgKCFMSUJSQVJZKSBUeXBlZEFycmF5UHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVHlwZWRBcnJheTtcbiAgICB9XG4gICAgdmFyICRuYXRpdmVJdGVyYXRvciA9IFR5cGVkQXJyYXlQcm90b3R5cGVbSVRFUkFUT1JdO1xuICAgIHZhciBDT1JSRUNUX0lURVJfTkFNRSA9ICEhJG5hdGl2ZUl0ZXJhdG9yXG4gICAgICAmJiAoJG5hdGl2ZUl0ZXJhdG9yLm5hbWUgPT0gJ3ZhbHVlcycgfHwgJG5hdGl2ZUl0ZXJhdG9yLm5hbWUgPT0gdW5kZWZpbmVkKTtcbiAgICB2YXIgJGl0ZXJhdG9yID0gJGl0ZXJhdG9ycy52YWx1ZXM7XG4gICAgaGlkZShUeXBlZEFycmF5LCBUWVBFRF9DT05TVFJVQ1RPUiwgdHJ1ZSk7XG4gICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBUWVBFRF9BUlJBWSwgTkFNRSk7XG4gICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBWSUVXLCB0cnVlKTtcbiAgICBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIERFRl9DT05TVFJVQ1RPUiwgVHlwZWRBcnJheSk7XG5cbiAgICBpZiAoQ0xBTVBFRCA/IG5ldyBUeXBlZEFycmF5KDEpW1RBR10gIT0gTkFNRSA6ICEoVEFHIGluIFR5cGVkQXJyYXlQcm90b3R5cGUpKSB7XG4gICAgICBkUChUeXBlZEFycmF5UHJvdG90eXBlLCBUQUcsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBOQU1FOyB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBPW05BTUVdID0gVHlwZWRBcnJheTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogKFR5cGVkQXJyYXkgIT0gQmFzZSksIE8pO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlMsIE5BTUUsIHtcbiAgICAgIEJZVEVTX1BFUl9FTEVNRU5UOiBCWVRFU1xuICAgIH0pO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbiAoKSB7IEJhc2Uub2YuY2FsbChUeXBlZEFycmF5LCAxKTsgfSksIE5BTUUsIHtcbiAgICAgIGZyb206ICRmcm9tLFxuICAgICAgb2Y6ICRvZlxuICAgIH0pO1xuXG4gICAgaWYgKCEoQllURVNfUEVSX0VMRU1FTlQgaW4gVHlwZWRBcnJheVByb3RvdHlwZSkpIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgQllURVNfUEVSX0VMRU1FTlQsIEJZVEVTKTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QLCBOQU1FLCBwcm90byk7XG5cbiAgICBzZXRTcGVjaWVzKE5BTUUpO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBGT1JDRURfU0VULCBOQU1FLCB7IHNldDogJHNldCB9KTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIUNPUlJFQ1RfSVRFUl9OQU1FLCBOQU1FLCAkaXRlcmF0b3JzKTtcblxuICAgIGlmICghTElCUkFSWSAmJiBUeXBlZEFycmF5UHJvdG90eXBlLnRvU3RyaW5nICE9IGFycmF5VG9TdHJpbmcpIFR5cGVkQXJyYXlQcm90b3R5cGUudG9TdHJpbmcgPSBhcnJheVRvU3RyaW5nO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICBuZXcgVHlwZWRBcnJheSgxKS5zbGljZSgpO1xuICAgIH0pLCBOQU1FLCB7IHNsaWNlOiAkc2xpY2UgfSk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gWzEsIDJdLnRvTG9jYWxlU3RyaW5nKCkgIT0gbmV3IFR5cGVkQXJyYXkoWzEsIDJdKS50b0xvY2FsZVN0cmluZygpO1xuICAgIH0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICBUeXBlZEFycmF5UHJvdG90eXBlLnRvTG9jYWxlU3RyaW5nLmNhbGwoWzEsIDJdKTtcbiAgICB9KSksIE5BTUUsIHsgdG9Mb2NhbGVTdHJpbmc6ICR0b0xvY2FsZVN0cmluZyB9KTtcblxuICAgIEl0ZXJhdG9yc1tOQU1FXSA9IENPUlJFQ1RfSVRFUl9OQU1FID8gJG5hdGl2ZUl0ZXJhdG9yIDogJGl0ZXJhdG9yO1xuICAgIGlmICghTElCUkFSWSAmJiAhQ09SUkVDVF9JVEVSX05BTUUpIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgSVRFUkFUT1IsICRpdGVyYXRvcik7XG4gIH07XG59IGVsc2UgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG4iLCJ2YXIgTWFwID0gcmVxdWlyZSgnLi9lczYubWFwJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCdtZXRhZGF0YScpO1xudmFyIHN0b3JlID0gc2hhcmVkLnN0b3JlIHx8IChzaGFyZWQuc3RvcmUgPSBuZXcgKHJlcXVpcmUoJy4vZXM2LndlYWstbWFwJykpKCkpO1xuXG52YXIgZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcCA9IGZ1bmN0aW9uICh0YXJnZXQsIHRhcmdldEtleSwgY3JlYXRlKSB7XG4gIHZhciB0YXJnZXRNZXRhZGF0YSA9IHN0b3JlLmdldCh0YXJnZXQpO1xuICBpZiAoIXRhcmdldE1ldGFkYXRhKSB7XG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgc3RvcmUuc2V0KHRhcmdldCwgdGFyZ2V0TWV0YWRhdGEgPSBuZXcgTWFwKCkpO1xuICB9XG4gIHZhciBrZXlNZXRhZGF0YSA9IHRhcmdldE1ldGFkYXRhLmdldCh0YXJnZXRLZXkpO1xuICBpZiAoIWtleU1ldGFkYXRhKSB7XG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgdGFyZ2V0TWV0YWRhdGEuc2V0KHRhcmdldEtleSwga2V5TWV0YWRhdGEgPSBuZXcgTWFwKCkpO1xuICB9IHJldHVybiBrZXlNZXRhZGF0YTtcbn07XG52YXIgb3JkaW5hcnlIYXNPd25NZXRhZGF0YSA9IGZ1bmN0aW9uIChNZXRhZGF0YUtleSwgTywgUCkge1xuICB2YXIgbWV0YWRhdGFNYXAgPSBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKE8sIFAsIGZhbHNlKTtcbiAgcmV0dXJuIG1ldGFkYXRhTWFwID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IG1ldGFkYXRhTWFwLmhhcyhNZXRhZGF0YUtleSk7XG59O1xudmFyIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEgPSBmdW5jdGlvbiAoTWV0YWRhdGFLZXksIE8sIFApIHtcbiAgdmFyIG1ldGFkYXRhTWFwID0gZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcChPLCBQLCBmYWxzZSk7XG4gIHJldHVybiBtZXRhZGF0YU1hcCA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogbWV0YWRhdGFNYXAuZ2V0KE1ldGFkYXRhS2V5KTtcbn07XG52YXIgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YSA9IGZ1bmN0aW9uIChNZXRhZGF0YUtleSwgTWV0YWRhdGFWYWx1ZSwgTywgUCkge1xuICBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKE8sIFAsIHRydWUpLnNldChNZXRhZGF0YUtleSwgTWV0YWRhdGFWYWx1ZSk7XG59O1xudmFyIG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzID0gZnVuY3Rpb24gKHRhcmdldCwgdGFyZ2V0S2V5KSB7XG4gIHZhciBtZXRhZGF0YU1hcCA9IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAodGFyZ2V0LCB0YXJnZXRLZXksIGZhbHNlKTtcbiAgdmFyIGtleXMgPSBbXTtcbiAgaWYgKG1ldGFkYXRhTWFwKSBtZXRhZGF0YU1hcC5mb3JFYWNoKGZ1bmN0aW9uIChfLCBrZXkpIHsga2V5cy5wdXNoKGtleSk7IH0pO1xuICByZXR1cm4ga2V5cztcbn07XG52YXIgdG9NZXRhS2V5ID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiBpdCA9PSAnc3ltYm9sJyA/IGl0IDogU3RyaW5nKGl0KTtcbn07XG52YXIgZXhwID0gZnVuY3Rpb24gKE8pIHtcbiAgJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgTyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc3RvcmU6IHN0b3JlLFxuICBtYXA6IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAsXG4gIGhhczogb3JkaW5hcnlIYXNPd25NZXRhZGF0YSxcbiAgZ2V0OiBvcmRpbmFyeUdldE93bk1ldGFkYXRhLFxuICBzZXQ6IG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEsXG4gIGtleXM6IG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzLFxuICBrZXk6IHRvTWV0YUtleSxcbiAgZXhwOiBleHBcbn07XG4iLCJ2YXIgTUVUQSA9IHJlcXVpcmUoJy4vX3VpZCcpKCdtZXRhJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBzZXREZXNjID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBpZCA9IDA7XG52YXIgaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZSB8fCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0cnVlO1xufTtcbnZhciBGUkVFWkUgPSAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBpc0V4dGVuc2libGUoT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKHt9KSk7XG59KTtcbnZhciBzZXRNZXRhID0gZnVuY3Rpb24gKGl0KSB7XG4gIHNldERlc2MoaXQsIE1FVEEsIHsgdmFsdWU6IHtcbiAgICBpOiAnTycgKyArK2lkLCAvLyBvYmplY3QgSURcbiAgICB3OiB7fSAgICAgICAgICAvLyB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IH0pO1xufTtcbnZhciBmYXN0S2V5ID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHtcbiAgLy8gcmV0dXJuIHByaW1pdGl2ZSB3aXRoIHByZWZpeFxuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJyA/IGl0IDogKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyA/ICdTJyA6ICdQJykgKyBpdDtcbiAgaWYgKCFoYXMoaXQsIE1FVEEpKSB7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZiAoIWlzRXh0ZW5zaWJsZShpdCkpIHJldHVybiAnRic7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuICdFJztcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGEoaXQpO1xuICAvLyByZXR1cm4gb2JqZWN0IElEXG4gIH0gcmV0dXJuIGl0W01FVEFdLmk7XG59O1xudmFyIGdldFdlYWsgPSBmdW5jdGlvbiAoaXQsIGNyZWF0ZSkge1xuICBpZiAoIWhhcyhpdCwgTUVUQSkpIHtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmICghaXNFeHRlbnNpYmxlKGl0KSkgcmV0dXJuIHRydWU7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuIGZhbHNlO1xuICAgIC8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhXG4gICAgc2V0TWV0YShpdCk7XG4gIC8vIHJldHVybiBoYXNoIHdlYWsgY29sbGVjdGlvbnMgSURzXG4gIH0gcmV0dXJuIGl0W01FVEFdLnc7XG59O1xuLy8gYWRkIG1ldGFkYXRhIG9uIGZyZWV6ZS1mYW1pbHkgbWV0aG9kcyBjYWxsaW5nXG52YXIgb25GcmVlemUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKEZSRUVaRSAmJiBtZXRhLk5FRUQgJiYgaXNFeHRlbnNpYmxlKGl0KSAmJiAhaGFzKGl0LCBNRVRBKSkgc2V0TWV0YShpdCk7XG4gIHJldHVybiBpdDtcbn07XG52YXIgbWV0YSA9IG1vZHVsZS5leHBvcnRzID0ge1xuICBLRVk6IE1FVEEsXG4gIE5FRUQ6IGZhbHNlLFxuICBmYXN0S2V5OiBmYXN0S2V5LFxuICBnZXRXZWFrOiBnZXRXZWFrLFxuICBvbkZyZWV6ZTogb25GcmVlemVcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZhbHNlO1xuIiwiLy8gMjIuMS4zLjMxIEFycmF5LnByb3RvdHlwZVtAQHVuc2NvcGFibGVzXVxudmFyIFVOU0NPUEFCTEVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3Vuc2NvcGFibGVzJyk7XG52YXIgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcbmlmIChBcnJheVByb3RvW1VOU0NPUEFCTEVTXSA9PSB1bmRlZmluZWQpIHJlcXVpcmUoJy4vX2hpZGUnKShBcnJheVByb3RvLCBVTlNDT1BBQkxFUywge30pO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIEFycmF5UHJvdG9bVU5TQ09QQUJMRVNdW2tleV0gPSB0cnVlO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGJpdG1hcCwgdmFsdWUpIHtcbiAgcmV0dXJuIHtcbiAgICBlbnVtZXJhYmxlOiAhKGJpdG1hcCAmIDEpLFxuICAgIGNvbmZpZ3VyYWJsZTogIShiaXRtYXAgJiAyKSxcbiAgICB3cml0YWJsZTogIShiaXRtYXAgJiA0KSxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfTtcbn07XG4iLCJ2YXIgaWQgPSAwO1xudmFyIHB4ID0gTWF0aC5yYW5kb20oKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gJ1N5bWJvbCgnLmNvbmNhdChrZXkgPT09IHVuZGVmaW5lZCA/ICcnIDoga2V5LCAnKV8nLCAoKytpZCArIHB4KS50b1N0cmluZygzNikpO1xufTtcbiIsIi8vIDE5LjEuMi4xNCAvIDE1LjIuMy4xNCBPYmplY3Qua2V5cyhPKVxudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pIHtcbiAgcmV0dXJuICRrZXlzKE8sIGVudW1CdWdLZXlzKTtcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICBpbmRleCA9IHRvSW50ZWdlcihpbmRleCk7XG4gIHJldHVybiBpbmRleCA8IDAgPyBtYXgoaW5kZXggKyBsZW5ndGgsIDApIDogbWluKGluZGV4LCBsZW5ndGgpO1xufTtcbiIsIi8vIDE5LjEuMi4yIC8gMTUuMi4zLjUgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZFBzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwcycpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xudmFyIEVtcHR5ID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgaWZyYW1lIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgY3JlYXRlRGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gVGhyYXNoLCB3YXN0ZSBhbmQgc29kb215OiBJRSBHQyBidWdcbiAgdmFyIGlmcmFtZSA9IHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnaWZyYW1lJyk7XG4gIHZhciBpID0gZW51bUJ1Z0tleXMubGVuZ3RoO1xuICB2YXIgbHQgPSAnPCc7XG4gIHZhciBndCA9ICc+JztcbiAgdmFyIGlmcmFtZURvY3VtZW50O1xuICBpZnJhbWUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgcmVxdWlyZSgnLi9faHRtbCcpLmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gIGlmcmFtZS5zcmMgPSAnamF2YXNjcmlwdDonOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNjcmlwdC11cmxcbiAgLy8gY3JlYXRlRGljdCA9IGlmcmFtZS5jb250ZW50V2luZG93Lk9iamVjdDtcbiAgLy8gaHRtbC5yZW1vdmVDaGlsZChpZnJhbWUpO1xuICBpZnJhbWVEb2N1bWVudCA9IGlmcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50O1xuICBpZnJhbWVEb2N1bWVudC5vcGVuKCk7XG4gIGlmcmFtZURvY3VtZW50LndyaXRlKGx0ICsgJ3NjcmlwdCcgKyBndCArICdkb2N1bWVudC5GPU9iamVjdCcgKyBsdCArICcvc2NyaXB0JyArIGd0KTtcbiAgaWZyYW1lRG9jdW1lbnQuY2xvc2UoKTtcbiAgY3JlYXRlRGljdCA9IGlmcmFtZURvY3VtZW50LkY7XG4gIHdoaWxlIChpLS0pIGRlbGV0ZSBjcmVhdGVEaWN0W1BST1RPVFlQRV1bZW51bUJ1Z0tleXNbaV1dO1xuICByZXR1cm4gY3JlYXRlRGljdCgpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuY3JlYXRlIHx8IGZ1bmN0aW9uIGNyZWF0ZShPLCBQcm9wZXJ0aWVzKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmIChPICE9PSBudWxsKSB7XG4gICAgRW1wdHlbUFJPVE9UWVBFXSA9IGFuT2JqZWN0KE8pO1xuICAgIHJlc3VsdCA9IG5ldyBFbXB0eSgpO1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBudWxsO1xuICAgIC8vIGFkZCBcIl9fcHJvdG9fX1wiIGZvciBPYmplY3QuZ2V0UHJvdG90eXBlT2YgcG9seWZpbGxcbiAgICByZXN1bHRbSUVfUFJPVE9dID0gTztcbiAgfSBlbHNlIHJlc3VsdCA9IGNyZWF0ZURpY3QoKTtcbiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGRQcyhyZXN1bHQsIFByb3BlcnRpZXMpO1xufTtcbiIsIi8vIDE5LjEuMi43IC8gMTUuMi4zLjQgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKS5jb25jYXQoJ2xlbmd0aCcsICdwcm90b3R5cGUnKTtcblxuZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgfHwgZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKSB7XG4gIHJldHVybiAka2V5cyhPLCBoaWRkZW5LZXlzKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgU1BFQ0lFUyA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSkge1xuICB2YXIgQyA9IGdsb2JhbFtLRVldO1xuICBpZiAoREVTQ1JJUFRPUlMgJiYgQyAmJiAhQ1tTUEVDSUVTXSkgZFAuZihDLCBTUEVDSUVTLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfVxuICB9KTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgQ29uc3RydWN0b3IsIG5hbWUsIGZvcmJpZGRlbkZpZWxkKSB7XG4gIGlmICghKGl0IGluc3RhbmNlb2YgQ29uc3RydWN0b3IpIHx8IChmb3JiaWRkZW5GaWVsZCAhPT0gdW5kZWZpbmVkICYmIGZvcmJpZGRlbkZpZWxkIGluIGl0KSkge1xuICAgIHRocm93IFR5cGVFcnJvcihuYW1lICsgJzogaW5jb3JyZWN0IGludm9jYXRpb24hJyk7XG4gIH0gcmV0dXJuIGl0O1xufTtcbiIsInZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi9faXRlci1jYWxsJyk7XG52YXIgaXNBcnJheUl0ZXIgPSByZXF1aXJlKCcuL19pcy1hcnJheS1pdGVyJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGdldEl0ZXJGbiA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgQlJFQUsgPSB7fTtcbnZhciBSRVRVUk4gPSB7fTtcbnZhciBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmFibGUsIGVudHJpZXMsIGZuLCB0aGF0LCBJVEVSQVRPUikge1xuICB2YXIgaXRlckZuID0gSVRFUkFUT1IgPyBmdW5jdGlvbiAoKSB7IHJldHVybiBpdGVyYWJsZTsgfSA6IGdldEl0ZXJGbihpdGVyYWJsZSk7XG4gIHZhciBmID0gY3R4KGZuLCB0aGF0LCBlbnRyaWVzID8gMiA6IDEpO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGVuZ3RoLCBzdGVwLCBpdGVyYXRvciwgcmVzdWx0O1xuICBpZiAodHlwZW9mIGl0ZXJGbiAhPSAnZnVuY3Rpb24nKSB0aHJvdyBUeXBlRXJyb3IoaXRlcmFibGUgKyAnIGlzIG5vdCBpdGVyYWJsZSEnKTtcbiAgLy8gZmFzdCBjYXNlIGZvciBhcnJheXMgd2l0aCBkZWZhdWx0IGl0ZXJhdG9yXG4gIGlmIChpc0FycmF5SXRlcihpdGVyRm4pKSBmb3IgKGxlbmd0aCA9IHRvTGVuZ3RoKGl0ZXJhYmxlLmxlbmd0aCk7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgcmVzdWx0ID0gZW50cmllcyA/IGYoYW5PYmplY3Qoc3RlcCA9IGl0ZXJhYmxlW2luZGV4XSlbMF0sIHN0ZXBbMV0pIDogZihpdGVyYWJsZVtpbmRleF0pO1xuICAgIGlmIChyZXN1bHQgPT09IEJSRUFLIHx8IHJlc3VsdCA9PT0gUkVUVVJOKSByZXR1cm4gcmVzdWx0O1xuICB9IGVsc2UgZm9yIChpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKGl0ZXJhYmxlKTsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOykge1xuICAgIHJlc3VsdCA9IGNhbGwoaXRlcmF0b3IsIGYsIHN0ZXAudmFsdWUsIGVudHJpZXMpO1xuICAgIGlmIChyZXN1bHQgPT09IEJSRUFLIHx8IHJlc3VsdCA9PT0gUkVUVVJOKSByZXR1cm4gcmVzdWx0O1xuICB9XG59O1xuZXhwb3J0cy5CUkVBSyA9IEJSRUFLO1xuZXhwb3J0cy5SRVRVUk4gPSBSRVRVUk47XG4iLCJ2YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0LCBzcmMsIHNhZmUpIHtcbiAgZm9yICh2YXIga2V5IGluIHNyYykgcmVkZWZpbmUodGFyZ2V0LCBrZXksIHNyY1trZXldLCBzYWZlKTtcbiAgcmV0dXJuIHRhcmdldDtcbn07XG4iLCJ2YXIgZGVmID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIHRhZywgc3RhdCkge1xuICBpZiAoaXQgJiYgIWhhcyhpdCA9IHN0YXQgPyBpdCA6IGl0LnByb3RvdHlwZSwgVEFHKSkgZGVmKGl0LCBUQUcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogdGFnIH0pO1xufTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgc3BhY2VzID0gcmVxdWlyZSgnLi9fc3RyaW5nLXdzJyk7XG52YXIgc3BhY2UgPSAnWycgKyBzcGFjZXMgKyAnXSc7XG52YXIgbm9uID0gJ1xcdTIwMGJcXHUwMDg1JztcbnZhciBsdHJpbSA9IFJlZ0V4cCgnXicgKyBzcGFjZSArIHNwYWNlICsgJyonKTtcbnZhciBydHJpbSA9IFJlZ0V4cChzcGFjZSArIHNwYWNlICsgJyokJyk7XG5cbnZhciBleHBvcnRlciA9IGZ1bmN0aW9uIChLRVksIGV4ZWMsIEFMSUFTKSB7XG4gIHZhciBleHAgPSB7fTtcbiAgdmFyIEZPUkNFID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAhIXNwYWNlc1tLRVldKCkgfHwgbm9uW0tFWV0oKSAhPSBub247XG4gIH0pO1xuICB2YXIgZm4gPSBleHBbS0VZXSA9IEZPUkNFID8gZXhlYyh0cmltKSA6IHNwYWNlc1tLRVldO1xuICBpZiAoQUxJQVMpIGV4cFtBTElBU10gPSBmbjtcbiAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBGT1JDRSwgJ1N0cmluZycsIGV4cCk7XG59O1xuXG4vLyAxIC0+IFN0cmluZyN0cmltTGVmdFxuLy8gMiAtPiBTdHJpbmcjdHJpbVJpZ2h0XG4vLyAzIC0+IFN0cmluZyN0cmltXG52YXIgdHJpbSA9IGV4cG9ydGVyLnRyaW0gPSBmdW5jdGlvbiAoc3RyaW5nLCBUWVBFKSB7XG4gIHN0cmluZyA9IFN0cmluZyhkZWZpbmVkKHN0cmluZykpO1xuICBpZiAoVFlQRSAmIDEpIHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKGx0cmltLCAnJyk7XG4gIGlmIChUWVBFICYgMikgc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UocnRyaW0sICcnKTtcbiAgcmV0dXJuIHN0cmluZztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0ZXI7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHt9O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgVFlQRSkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSB8fCBpdC5fdCAhPT0gVFlQRSkgdGhyb3cgVHlwZUVycm9yKCdJbmNvbXBhdGlibGUgcmVjZWl2ZXIsICcgKyBUWVBFICsgJyByZXF1aXJlZCEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIi8vIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgYW5kIG5vbi1lbnVtZXJhYmxlIG9sZCBWOCBzdHJpbmdzXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdCgneicpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApID8gT2JqZWN0IDogZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBjb2YoaXQpID09ICdTdHJpbmcnID8gaXQuc3BsaXQoJycpIDogT2JqZWN0KGl0KTtcbn07XG4iLCJleHBvcnRzLmYgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiIsIi8vIGdldHRpbmcgdGFnIGZyb20gMTkuMS4zLjYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZygpXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG52YXIgVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyk7XG4vLyBFUzMgd3JvbmcgaGVyZVxudmFyIEFSRyA9IGNvZihmdW5jdGlvbiAoKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPT0gJ0FyZ3VtZW50cyc7XG5cbi8vIGZhbGxiYWNrIGZvciBJRTExIFNjcmlwdCBBY2Nlc3MgRGVuaWVkIGVycm9yXG52YXIgdHJ5R2V0ID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gaXRba2V5XTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgTywgVCwgQjtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyAnVW5kZWZpbmVkJyA6IGl0ID09PSBudWxsID8gJ051bGwnXG4gICAgLy8gQEB0b1N0cmluZ1RhZyBjYXNlXG4gICAgOiB0eXBlb2YgKFQgPSB0cnlHZXQoTyA9IE9iamVjdChpdCksIFRBRykpID09ICdzdHJpbmcnID8gVFxuICAgIC8vIGJ1aWx0aW5UYWcgY2FzZVxuICAgIDogQVJHID8gY29mKE8pXG4gICAgLy8gRVMzIGFyZ3VtZW50cyBmYWxsYmFja1xuICAgIDogKEIgPSBjb2YoTykpID09ICdPYmplY3QnICYmIHR5cGVvZiBPLmNhbGxlZSA9PSAnZnVuY3Rpb24nID8gJ0FyZ3VtZW50cycgOiBCO1xufTtcbiIsImV4cG9ydCBjb25zdCBlbGVtZW50cyA9IHtcclxuICBzZWFyY2hJbnB1dDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNlYXJjaF9fZmllbGQnKSxcclxuICBzZWFyY2hGb3JtOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2VhcmNoJyksXHJcbiAgcmVuZGVyUmVjaXBlc0xpc3Q6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5yZXN1bHRzX19saXN0JyksXHJcbiAgcmVzdWx0c0Jsb2NrOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucmVzdWx0cycpLFxyXG4gIHBhZ2luUGFnZXM6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5yZXN1bHRzX19wYWdlcycpLFxyXG4gIHJlY2lwZTogZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnJlY2lwZScpLFxyXG4gIHNlcnZpbmc6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5yZWNpcGVfX2luZm8tZGF0YS0tcGVvcGxlJyksXHJcbiAgc2hvcHBpbmdMaXN0OiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2hvcHBpbmdfX2xpc3QnKSxcclxuICBidXR0b25MaWtlczogZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmxpa2VzJyksXHJcbiAgbGlrZXNMaXN0OiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubGlrZXNfX2xpc3QnKVxyXG59OyBcclxuXHJcbmV4cG9ydCBjb25zdCByZW5kZXJTcGlubmVyID0gKHBhcmVudCkgPT4ge1xyXG4gIGxldCBsb2FkZXIgPSBgXHJcbiAgICA8ZGl2IGNsYXNzPVwibG9hZGVyXCI+XHJcbiAgICAgICAgPHN2Zz5cclxuICAgICAgICAgICAgPHVzZSBocmVmPVwiaW1nL2ljb25zLnN2ZyNpY29uLWN3XCI+PC91c2U+XHJcbiAgICAgICAgPC9zdmc+XHJcbiAgICA8L2Rpdj5cclxuICBgO1xyXG4gIHBhcmVudC5pbnNlcnRBZGphY2VudEhUTUwoICdhZnRlcmJlZ2luJywgbG9hZGVyICk7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgZGVsU3Bpbm5lciA9ICgpID0+IHtcclxuICBsZXQgbG9hZGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmxvYWRlcicpO1xyXG4gIGxvYWRlci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGxvYWRlcik7XHJcbn07XHJcbiIsInZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIFNIQVJFRCA9ICdfX2NvcmUtanNfc2hhcmVkX18nO1xudmFyIHN0b3JlID0gZ2xvYmFsW1NIQVJFRF0gfHwgKGdsb2JhbFtTSEFSRURdID0ge30pO1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICByZXR1cm4gc3RvcmVba2V5XSB8fCAoc3RvcmVba2V5XSA9IHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IHt9KTtcbn0pKCd2ZXJzaW9ucycsIFtdKS5wdXNoKHtcbiAgdmVyc2lvbjogY29yZS52ZXJzaW9uLFxuICBtb2RlOiByZXF1aXJlKCcuL19saWJyYXJ5JykgPyAncHVyZScgOiAnZ2xvYmFsJyxcbiAgY29weXJpZ2h0OiAnwqkgMjAxOCBEZW5pcyBQdXNoa2FyZXYgKHpsb2lyb2NrLnJ1KSdcbn0pO1xuIiwiLy8gZmFsc2UgLT4gQXJyYXkjaW5kZXhPZlxuLy8gdHJ1ZSAgLT4gQXJyYXkjaW5jbHVkZXNcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoSVNfSU5DTFVERVMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgZWwsIGZyb21JbmRleCkge1xuICAgIHZhciBPID0gdG9JT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChmcm9tSW5kZXgsIGxlbmd0aCk7XG4gICAgdmFyIHZhbHVlO1xuICAgIC8vIEFycmF5I2luY2x1ZGVzIHVzZXMgU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgaWYgKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKSB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIGlmICh2YWx1ZSAhPSB2YWx1ZSkgcmV0dXJuIHRydWU7XG4gICAgLy8gQXJyYXkjaW5kZXhPZiBpZ25vcmVzIGhvbGVzLCBBcnJheSNpbmNsdWRlcyAtIG5vdFxuICAgIH0gZWxzZSBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKElTX0lOQ0xVREVTIHx8IGluZGV4IGluIE8pIHtcbiAgICAgIGlmIChPW2luZGV4XSA9PT0gZWwpIHJldHVybiBJU19JTkNMVURFUyB8fCBpbmRleCB8fCAwO1xuICAgIH0gcmV0dXJuICFJU19JTkNMVURFUyAmJiAtMTtcbiAgfTtcbn07XG4iLCJleHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuIiwiLy8gNy4yLjIgSXNBcnJheShhcmd1bWVudClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiBpc0FycmF5KGFyZykge1xuICByZXR1cm4gY29mKGFyZykgPT0gJ0FycmF5Jztcbn07XG4iLCIvLyA3LjIuOCBJc1JlZ0V4cChhcmd1bWVudClcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xudmFyIE1BVENIID0gcmVxdWlyZSgnLi9fd2tzJykoJ21hdGNoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgaXNSZWdFeHA7XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgKChpc1JlZ0V4cCA9IGl0W01BVENIXSkgIT09IHVuZGVmaW5lZCA/ICEhaXNSZWdFeHAgOiBjb2YoaXQpID09ICdSZWdFeHAnKTtcbn07XG4iLCJ2YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBTQUZFX0NMT1NJTkcgPSBmYWxzZTtcblxudHJ5IHtcbiAgdmFyIHJpdGVyID0gWzddW0lURVJBVE9SXSgpO1xuICByaXRlclsncmV0dXJuJ10gPSBmdW5jdGlvbiAoKSB7IFNBRkVfQ0xPU0lORyA9IHRydWU7IH07XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby10aHJvdy1saXRlcmFsXG4gIEFycmF5LmZyb20ocml0ZXIsIGZ1bmN0aW9uICgpIHsgdGhyb3cgMjsgfSk7XG59IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYywgc2tpcENsb3NpbmcpIHtcbiAgaWYgKCFza2lwQ2xvc2luZyAmJiAhU0FGRV9DTE9TSU5HKSByZXR1cm4gZmFsc2U7XG4gIHZhciBzYWZlID0gZmFsc2U7XG4gIHRyeSB7XG4gICAgdmFyIGFyciA9IFs3XTtcbiAgICB2YXIgaXRlciA9IGFycltJVEVSQVRPUl0oKTtcbiAgICBpdGVyLm5leHQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB7IGRvbmU6IHNhZmUgPSB0cnVlIH07IH07XG4gICAgYXJyW0lURVJBVE9SXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGl0ZXI7IH07XG4gICAgZXhlYyhhcnIpO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuIHNhZmU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjEuMi41LjMgZ2V0IFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3NcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB0aGF0ID0gYW5PYmplY3QodGhpcyk7XG4gIHZhciByZXN1bHQgPSAnJztcbiAgaWYgKHRoYXQuZ2xvYmFsKSByZXN1bHQgKz0gJ2cnO1xuICBpZiAodGhhdC5pZ25vcmVDYXNlKSByZXN1bHQgKz0gJ2knO1xuICBpZiAodGhhdC5tdWx0aWxpbmUpIHJlc3VsdCArPSAnbSc7XG4gIGlmICh0aGF0LnVuaWNvZGUpIHJlc3VsdCArPSAndSc7XG4gIGlmICh0aGF0LnN0aWNreSkgcmVzdWx0ICs9ICd5JztcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSwgbGVuZ3RoLCBleGVjKSB7XG4gIHZhciBTWU1CT0wgPSB3a3MoS0VZKTtcbiAgdmFyIGZucyA9IGV4ZWMoZGVmaW5lZCwgU1lNQk9MLCAnJ1tLRVldKTtcbiAgdmFyIHN0cmZuID0gZm5zWzBdO1xuICB2YXIgcnhmbiA9IGZuc1sxXTtcbiAgaWYgKGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgTyA9IHt9O1xuICAgIE9bU1lNQk9MXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH07XG4gICAgcmV0dXJuICcnW0tFWV0oTykgIT0gNztcbiAgfSkpIHtcbiAgICByZWRlZmluZShTdHJpbmcucHJvdG90eXBlLCBLRVksIHN0cmZuKTtcbiAgICBoaWRlKFJlZ0V4cC5wcm90b3R5cGUsIFNZTUJPTCwgbGVuZ3RoID09IDJcbiAgICAgIC8vIDIxLjIuNS44IFJlZ0V4cC5wcm90b3R5cGVbQEByZXBsYWNlXShzdHJpbmcsIHJlcGxhY2VWYWx1ZSlcbiAgICAgIC8vIDIxLjIuNS4xMSBSZWdFeHAucHJvdG90eXBlW0BAc3BsaXRdKHN0cmluZywgbGltaXQpXG4gICAgICA/IGZ1bmN0aW9uIChzdHJpbmcsIGFyZykgeyByZXR1cm4gcnhmbi5jYWxsKHN0cmluZywgdGhpcywgYXJnKTsgfVxuICAgICAgLy8gMjEuMi41LjYgUmVnRXhwLnByb3RvdHlwZVtAQG1hdGNoXShzdHJpbmcpXG4gICAgICAvLyAyMS4yLjUuOSBSZWdFeHAucHJvdG90eXBlW0BAc2VhcmNoXShzdHJpbmcpXG4gICAgICA6IGZ1bmN0aW9uIChzdHJpbmcpIHsgcmV0dXJuIHJ4Zm4uY2FsbChzdHJpbmcsIHRoaXMpOyB9XG4gICAgKTtcbiAgfVxufTtcbiIsIi8vIDcuMy4yMCBTcGVjaWVzQ29uc3RydWN0b3IoTywgZGVmYXVsdENvbnN0cnVjdG9yKVxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIFNQRUNJRVMgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywgRCkge1xuICB2YXIgQyA9IGFuT2JqZWN0KE8pLmNvbnN0cnVjdG9yO1xuICB2YXIgUztcbiAgcmV0dXJuIEMgPT09IHVuZGVmaW5lZCB8fCAoUyA9IGFuT2JqZWN0KEMpW1NQRUNJRVNdKSA9PSB1bmRlZmluZWQgPyBEIDogYUZ1bmN0aW9uKFMpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBuYXZpZ2F0b3IgPSBnbG9iYWwubmF2aWdhdG9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5hdmlnYXRvciAmJiBuYXZpZ2F0b3IudXNlckFnZW50IHx8ICcnO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgJGl0ZXJEZXRlY3QgPSByZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4vX2luaGVyaXQtaWYtcmVxdWlyZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTkFNRSwgd3JhcHBlciwgbWV0aG9kcywgY29tbW9uLCBJU19NQVAsIElTX1dFQUspIHtcbiAgdmFyIEJhc2UgPSBnbG9iYWxbTkFNRV07XG4gIHZhciBDID0gQmFzZTtcbiAgdmFyIEFEREVSID0gSVNfTUFQID8gJ3NldCcgOiAnYWRkJztcbiAgdmFyIHByb3RvID0gQyAmJiBDLnByb3RvdHlwZTtcbiAgdmFyIE8gPSB7fTtcbiAgdmFyIGZpeE1ldGhvZCA9IGZ1bmN0aW9uIChLRVkpIHtcbiAgICB2YXIgZm4gPSBwcm90b1tLRVldO1xuICAgIHJlZGVmaW5lKHByb3RvLCBLRVksXG4gICAgICBLRVkgPT0gJ2RlbGV0ZScgPyBmdW5jdGlvbiAoYSkge1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkgPyBmYWxzZSA6IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTtcbiAgICAgIH0gOiBLRVkgPT0gJ2hhcycgPyBmdW5jdGlvbiBoYXMoYSkge1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkgPyBmYWxzZSA6IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTtcbiAgICAgIH0gOiBLRVkgPT0gJ2dldCcgPyBmdW5jdGlvbiBnZXQoYSkge1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkgPyB1bmRlZmluZWQgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgICB9IDogS0VZID09ICdhZGQnID8gZnVuY3Rpb24gYWRkKGEpIHsgZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpOyByZXR1cm4gdGhpczsgfVxuICAgICAgICA6IGZ1bmN0aW9uIHNldChhLCBiKSB7IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhLCBiKTsgcmV0dXJuIHRoaXM7IH1cbiAgICApO1xuICB9O1xuICBpZiAodHlwZW9mIEMgIT0gJ2Z1bmN0aW9uJyB8fCAhKElTX1dFQUsgfHwgcHJvdG8uZm9yRWFjaCAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyBDKCkuZW50cmllcygpLm5leHQoKTtcbiAgfSkpKSB7XG4gICAgLy8gY3JlYXRlIGNvbGxlY3Rpb24gY29uc3RydWN0b3JcbiAgICBDID0gY29tbW9uLmdldENvbnN0cnVjdG9yKHdyYXBwZXIsIE5BTUUsIElTX01BUCwgQURERVIpO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCBtZXRob2RzKTtcbiAgICBtZXRhLk5FRUQgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHZhciBpbnN0YW5jZSA9IG5ldyBDKCk7XG4gICAgLy8gZWFybHkgaW1wbGVtZW50YXRpb25zIG5vdCBzdXBwb3J0cyBjaGFpbmluZ1xuICAgIHZhciBIQVNOVF9DSEFJTklORyA9IGluc3RhbmNlW0FEREVSXShJU19XRUFLID8ge30gOiAtMCwgMSkgIT0gaW5zdGFuY2U7XG4gICAgLy8gVjggfiAgQ2hyb21pdW0gNDAtIHdlYWstY29sbGVjdGlvbnMgdGhyb3dzIG9uIHByaW1pdGl2ZXMsIGJ1dCBzaG91bGQgcmV0dXJuIGZhbHNlXG4gICAgdmFyIFRIUk9XU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyBpbnN0YW5jZS5oYXMoMSk7IH0pO1xuICAgIC8vIG1vc3QgZWFybHkgaW1wbGVtZW50YXRpb25zIGRvZXNuJ3Qgc3VwcG9ydHMgaXRlcmFibGVzLCBtb3N0IG1vZGVybiAtIG5vdCBjbG9zZSBpdCBjb3JyZWN0bHlcbiAgICB2YXIgQUNDRVBUX0lURVJBQkxFUyA9ICRpdGVyRGV0ZWN0KGZ1bmN0aW9uIChpdGVyKSB7IG5ldyBDKGl0ZXIpOyB9KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAvLyBmb3IgZWFybHkgaW1wbGVtZW50YXRpb25zIC0wIGFuZCArMCBub3QgdGhlIHNhbWVcbiAgICB2YXIgQlVHR1lfWkVSTyA9ICFJU19XRUFLICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIFY4IH4gQ2hyb21pdW0gNDItIGZhaWxzIG9ubHkgd2l0aCA1KyBlbGVtZW50c1xuICAgICAgdmFyICRpbnN0YW5jZSA9IG5ldyBDKCk7XG4gICAgICB2YXIgaW5kZXggPSA1O1xuICAgICAgd2hpbGUgKGluZGV4LS0pICRpbnN0YW5jZVtBRERFUl0oaW5kZXgsIGluZGV4KTtcbiAgICAgIHJldHVybiAhJGluc3RhbmNlLmhhcygtMCk7XG4gICAgfSk7XG4gICAgaWYgKCFBQ0NFUFRfSVRFUkFCTEVTKSB7XG4gICAgICBDID0gd3JhcHBlcihmdW5jdGlvbiAodGFyZ2V0LCBpdGVyYWJsZSkge1xuICAgICAgICBhbkluc3RhbmNlKHRhcmdldCwgQywgTkFNRSk7XG4gICAgICAgIHZhciB0aGF0ID0gaW5oZXJpdElmUmVxdWlyZWQobmV3IEJhc2UoKSwgdGFyZ2V0LCBDKTtcbiAgICAgICAgaWYgKGl0ZXJhYmxlICE9IHVuZGVmaW5lZCkgZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xuICAgICAgICByZXR1cm4gdGhhdDtcbiAgICAgIH0pO1xuICAgICAgQy5wcm90b3R5cGUgPSBwcm90bztcbiAgICAgIHByb3RvLmNvbnN0cnVjdG9yID0gQztcbiAgICB9XG4gICAgaWYgKFRIUk9XU19PTl9QUklNSVRJVkVTIHx8IEJVR0dZX1pFUk8pIHtcbiAgICAgIGZpeE1ldGhvZCgnZGVsZXRlJyk7XG4gICAgICBmaXhNZXRob2QoJ2hhcycpO1xuICAgICAgSVNfTUFQICYmIGZpeE1ldGhvZCgnZ2V0Jyk7XG4gICAgfVxuICAgIGlmIChCVUdHWV9aRVJPIHx8IEhBU05UX0NIQUlOSU5HKSBmaXhNZXRob2QoQURERVIpO1xuICAgIC8vIHdlYWsgY29sbGVjdGlvbnMgc2hvdWxkIG5vdCBjb250YWlucyAuY2xlYXIgbWV0aG9kXG4gICAgaWYgKElTX1dFQUsgJiYgcHJvdG8uY2xlYXIpIGRlbGV0ZSBwcm90by5jbGVhcjtcbiAgfVxuXG4gIHNldFRvU3RyaW5nVGFnKEMsIE5BTUUpO1xuXG4gIE9bTkFNRV0gPSBDO1xuICAkZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChDICE9IEJhc2UpLCBPKTtcblxuICBpZiAoIUlTX1dFQUspIGNvbW1vbi5zZXRTdHJvbmcoQywgTkFNRSwgSVNfTUFQKTtcblxuICByZXR1cm4gQztcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciBUWVBFRCA9IHVpZCgndHlwZWRfYXJyYXknKTtcbnZhciBWSUVXID0gdWlkKCd2aWV3Jyk7XG52YXIgQUJWID0gISEoZ2xvYmFsLkFycmF5QnVmZmVyICYmIGdsb2JhbC5EYXRhVmlldyk7XG52YXIgQ09OU1RSID0gQUJWO1xudmFyIGkgPSAwO1xudmFyIGwgPSA5O1xudmFyIFR5cGVkO1xuXG52YXIgVHlwZWRBcnJheUNvbnN0cnVjdG9ycyA9IChcbiAgJ0ludDhBcnJheSxVaW50OEFycmF5LFVpbnQ4Q2xhbXBlZEFycmF5LEludDE2QXJyYXksVWludDE2QXJyYXksSW50MzJBcnJheSxVaW50MzJBcnJheSxGbG9hdDMyQXJyYXksRmxvYXQ2NEFycmF5J1xuKS5zcGxpdCgnLCcpO1xuXG53aGlsZSAoaSA8IGwpIHtcbiAgaWYgKFR5cGVkID0gZ2xvYmFsW1R5cGVkQXJyYXlDb25zdHJ1Y3RvcnNbaSsrXV0pIHtcbiAgICBoaWRlKFR5cGVkLnByb3RvdHlwZSwgVFlQRUQsIHRydWUpO1xuICAgIGhpZGUoVHlwZWQucHJvdG90eXBlLCBWSUVXLCB0cnVlKTtcbiAgfSBlbHNlIENPTlNUUiA9IGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQUJWOiBBQlYsXG4gIENPTlNUUjogQ09OU1RSLFxuICBUWVBFRDogVFlQRUQsXG4gIFZJRVc6IFZJRVdcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyBGb3JjZWQgcmVwbGFjZW1lbnQgcHJvdG90eXBlIGFjY2Vzc29ycyBtZXRob2RzXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKSB8fCAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHZhciBLID0gTWF0aC5yYW5kb20oKTtcbiAgLy8gSW4gRkYgdGhyb3dzIG9ubHkgZGVmaW5lIG1ldGhvZHNcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmLCBuby11c2VsZXNzLWNhbGxcbiAgX19kZWZpbmVTZXR0ZXJfXy5jYWxsKG51bGwsIEssIGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG4gIGRlbGV0ZSByZXF1aXJlKCcuL19nbG9iYWwnKVtLXTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ09MTEVDVElPTikge1xuICAkZXhwb3J0KCRleHBvcnQuUywgQ09MTEVDVElPTiwgeyBvZjogZnVuY3Rpb24gb2YoKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIEEgPSBuZXcgQXJyYXkobGVuZ3RoKTtcbiAgICB3aGlsZSAobGVuZ3RoLS0pIEFbbGVuZ3RoXSA9IGFyZ3VtZW50c1tsZW5ndGhdO1xuICAgIHJldHVybiBuZXcgdGhpcyhBKTtcbiAgfSB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDT0xMRUNUSU9OKSB7XG4gICRleHBvcnQoJGV4cG9ydC5TLCBDT0xMRUNUSU9OLCB7IGZyb206IGZ1bmN0aW9uIGZyb20oc291cmNlIC8qICwgbWFwRm4sIHRoaXNBcmcgKi8pIHtcbiAgICB2YXIgbWFwRm4gPSBhcmd1bWVudHNbMV07XG4gICAgdmFyIG1hcHBpbmcsIEEsIG4sIGNiO1xuICAgIGFGdW5jdGlvbih0aGlzKTtcbiAgICBtYXBwaW5nID0gbWFwRm4gIT09IHVuZGVmaW5lZDtcbiAgICBpZiAobWFwcGluZykgYUZ1bmN0aW9uKG1hcEZuKTtcbiAgICBpZiAoc291cmNlID09IHVuZGVmaW5lZCkgcmV0dXJuIG5ldyB0aGlzKCk7XG4gICAgQSA9IFtdO1xuICAgIGlmIChtYXBwaW5nKSB7XG4gICAgICBuID0gMDtcbiAgICAgIGNiID0gY3R4KG1hcEZuLCBhcmd1bWVudHNbMl0sIDIpO1xuICAgICAgZm9yT2Yoc291cmNlLCBmYWxzZSwgZnVuY3Rpb24gKG5leHRJdGVtKSB7XG4gICAgICAgIEEucHVzaChjYihuZXh0SXRlbSwgbisrKSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yT2Yoc291cmNlLCBmYWxzZSwgQS5wdXNoLCBBKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyB0aGlzKEEpO1xuICB9IH0pO1xufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQ7XG4vLyB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyAnb2JqZWN0JyBpbiBvbGQgSUVcbnZhciBpcyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpcyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciB3a3NFeHQgPSByZXF1aXJlKCcuL193a3MtZXh0Jyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICB2YXIgJFN5bWJvbCA9IGNvcmUuU3ltYm9sIHx8IChjb3JlLlN5bWJvbCA9IExJQlJBUlkgPyB7fSA6IGdsb2JhbC5TeW1ib2wgfHwge30pO1xuICBpZiAobmFtZS5jaGFyQXQoMCkgIT0gJ18nICYmICEobmFtZSBpbiAkU3ltYm9sKSkgZGVmaW5lUHJvcGVydHkoJFN5bWJvbCwgbmFtZSwgeyB2YWx1ZTogd2tzRXh0LmYobmFtZSkgfSk7XG59O1xuIiwidmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCdrZXlzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIHNoYXJlZFtrZXldIHx8IChzaGFyZWRba2V5XSA9IHVpZChrZXkpKTtcbn07XG4iLCIvLyBJRSA4LSBkb24ndCBlbnVtIGJ1ZyBrZXlzXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgJ2NvbnN0cnVjdG9yLGhhc093blByb3BlcnR5LGlzUHJvdG90eXBlT2YscHJvcGVydHlJc0VudW1lcmFibGUsdG9Mb2NhbGVTdHJpbmcsdG9TdHJpbmcsdmFsdWVPZidcbikuc3BsaXQoJywnKTtcbiIsInZhciBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50O1xubW9kdWxlLmV4cG9ydHMgPSBkb2N1bWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4iLCIvLyBXb3JrcyB3aXRoIF9fcHJvdG9fXyBvbmx5LiBPbGQgdjggY2FuJ3Qgd29yayB3aXRoIG51bGwgcHJvdG8gb2JqZWN0cy5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGNoZWNrID0gZnVuY3Rpb24gKE8sIHByb3RvKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBpZiAoIWlzT2JqZWN0KHByb3RvKSAmJiBwcm90byAhPT0gbnVsbCkgdGhyb3cgVHlwZUVycm9yKHByb3RvICsgXCI6IGNhbid0IHNldCBhcyBwcm90b3R5cGUhXCIpO1xufTtcbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCAoJ19fcHJvdG9fXycgaW4ge30gPyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgZnVuY3Rpb24gKHRlc3QsIGJ1Z2d5LCBzZXQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHNldCA9IHJlcXVpcmUoJy4vX2N0eCcpKEZ1bmN0aW9uLmNhbGwsIHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZihPYmplY3QucHJvdG90eXBlLCAnX19wcm90b19fJykuc2V0LCAyKTtcbiAgICAgICAgc2V0KHRlc3QsIFtdKTtcbiAgICAgICAgYnVnZ3kgPSAhKHRlc3QgaW5zdGFuY2VvZiBBcnJheSk7XG4gICAgICB9IGNhdGNoIChlKSB7IGJ1Z2d5ID0gdHJ1ZTsgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKE8sIHByb3RvKSB7XG4gICAgICAgIGNoZWNrKE8sIHByb3RvKTtcbiAgICAgICAgaWYgKGJ1Z2d5KSBPLl9fcHJvdG9fXyA9IHByb3RvO1xuICAgICAgICBlbHNlIHNldChPLCBwcm90byk7XG4gICAgICAgIHJldHVybiBPO1xuICAgICAgfTtcbiAgICB9KHt9LCBmYWxzZSkgOiB1bmRlZmluZWQpLFxuICBjaGVjazogY2hlY2tcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9ICdcXHgwOVxceDBBXFx4MEJcXHgwQ1xceDBEXFx4MjBcXHhBMFxcdTE2ODBcXHUxODBFXFx1MjAwMFxcdTIwMDFcXHUyMDAyXFx1MjAwMycgK1xuICAnXFx1MjAwNFxcdTIwMDVcXHUyMDA2XFx1MjAwN1xcdTIwMDhcXHUyMDA5XFx1MjAwQVxcdTIwMkZcXHUyMDVGXFx1MzAwMFxcdTIwMjhcXHUyMDI5XFx1RkVGRic7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX3NldC1wcm90bycpLnNldDtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRoYXQsIHRhcmdldCwgQykge1xuICB2YXIgUyA9IHRhcmdldC5jb25zdHJ1Y3RvcjtcbiAgdmFyIFA7XG4gIGlmIChTICE9PSBDICYmIHR5cGVvZiBTID09ICdmdW5jdGlvbicgJiYgKFAgPSBTLnByb3RvdHlwZSkgIT09IEMucHJvdG90eXBlICYmIGlzT2JqZWN0KFApICYmIHNldFByb3RvdHlwZU9mKSB7XG4gICAgc2V0UHJvdG90eXBlT2YodGhhdCwgUCk7XG4gIH0gcmV0dXJuIHRoYXQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHJlcGVhdChjb3VudCkge1xuICB2YXIgc3RyID0gU3RyaW5nKGRlZmluZWQodGhpcykpO1xuICB2YXIgcmVzID0gJyc7XG4gIHZhciBuID0gdG9JbnRlZ2VyKGNvdW50KTtcbiAgaWYgKG4gPCAwIHx8IG4gPT0gSW5maW5pdHkpIHRocm93IFJhbmdlRXJyb3IoXCJDb3VudCBjYW4ndCBiZSBuZWdhdGl2ZVwiKTtcbiAgZm9yICg7biA+IDA7IChuID4+Pj0gMSkgJiYgKHN0ciArPSBzdHIpKSBpZiAobiAmIDEpIHJlcyArPSBzdHI7XG4gIHJldHVybiByZXM7XG59O1xuIiwiLy8gMjAuMi4yLjI4IE1hdGguc2lnbih4KVxubW9kdWxlLmV4cG9ydHMgPSBNYXRoLnNpZ24gfHwgZnVuY3Rpb24gc2lnbih4KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgcmV0dXJuICh4ID0gK3gpID09IDAgfHwgeCAhPSB4ID8geCA6IHggPCAwID8gLTEgOiAxO1xufTtcbiIsIi8vIDIwLjIuMi4xNCBNYXRoLmV4cG0xKHgpXG52YXIgJGV4cG0xID0gTWF0aC5leHBtMTtcbm1vZHVsZS5leHBvcnRzID0gKCEkZXhwbTFcbiAgLy8gT2xkIEZGIGJ1Z1xuICB8fCAkZXhwbTEoMTApID4gMjIwMjUuNDY1Nzk0ODA2NzE5IHx8ICRleHBtMSgxMCkgPCAyMjAyNS40NjU3OTQ4MDY3MTY1MTY4XG4gIC8vIFRvciBCcm93c2VyIGJ1Z1xuICB8fCAkZXhwbTEoLTJlLTE3KSAhPSAtMmUtMTdcbikgPyBmdW5jdGlvbiBleHBtMSh4KSB7XG4gIHJldHVybiAoeCA9ICt4KSA9PSAwID8geCA6IHggPiAtMWUtNiAmJiB4IDwgMWUtNiA/IHggKyB4ICogeCAvIDIgOiBNYXRoLmV4cCh4KSAtIDE7XG59IDogJGV4cG0xO1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuLy8gdHJ1ZSAgLT4gU3RyaW5nI2F0XG4vLyBmYWxzZSAtPiBTdHJpbmcjY29kZVBvaW50QXRcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFRPX1NUUklORykge1xuICByZXR1cm4gZnVuY3Rpb24gKHRoYXQsIHBvcykge1xuICAgIHZhciBzID0gU3RyaW5nKGRlZmluZWQodGhhdCkpO1xuICAgIHZhciBpID0gdG9JbnRlZ2VyKHBvcyk7XG4gICAgdmFyIGwgPSBzLmxlbmd0aDtcbiAgICB2YXIgYSwgYjtcbiAgICBpZiAoaSA8IDAgfHwgaSA+PSBsKSByZXR1cm4gVE9fU1RSSU5HID8gJycgOiB1bmRlZmluZWQ7XG4gICAgYSA9IHMuY2hhckNvZGVBdChpKTtcbiAgICByZXR1cm4gYSA8IDB4ZDgwMCB8fCBhID4gMHhkYmZmIHx8IGkgKyAxID09PSBsIHx8IChiID0gcy5jaGFyQ29kZUF0KGkgKyAxKSkgPCAweGRjMDAgfHwgYiA+IDB4ZGZmZlxuICAgICAgPyBUT19TVFJJTkcgPyBzLmNoYXJBdChpKSA6IGFcbiAgICAgIDogVE9fU1RSSU5HID8gcy5zbGljZShpLCBpICsgMikgOiAoYSAtIDB4ZDgwMCA8PCAxMCkgKyAoYiAtIDB4ZGMwMCkgKyAweDEwMDAwO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciAkaXRlckNyZWF0ZSA9IHJlcXVpcmUoJy4vX2l0ZXItY3JlYXRlJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgQlVHR1kgPSAhKFtdLmtleXMgJiYgJ25leHQnIGluIFtdLmtleXMoKSk7IC8vIFNhZmFyaSBoYXMgYnVnZ3kgaXRlcmF0b3JzIHcvbyBgbmV4dGBcbnZhciBGRl9JVEVSQVRPUiA9ICdAQGl0ZXJhdG9yJztcbnZhciBLRVlTID0gJ2tleXMnO1xudmFyIFZBTFVFUyA9ICd2YWx1ZXMnO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEJhc2UsIE5BTUUsIENvbnN0cnVjdG9yLCBuZXh0LCBERUZBVUxULCBJU19TRVQsIEZPUkNFRCkge1xuICAkaXRlckNyZWF0ZShDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCk7XG4gIHZhciBnZXRNZXRob2QgPSBmdW5jdGlvbiAoa2luZCkge1xuICAgIGlmICghQlVHR1kgJiYga2luZCBpbiBwcm90bykgcmV0dXJuIHByb3RvW2tpbmRdO1xuICAgIHN3aXRjaCAoa2luZCkge1xuICAgICAgY2FzZSBLRVlTOiByZXR1cm4gZnVuY3Rpb24ga2V5cygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICAgIGNhc2UgVkFMVUVTOiByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgIH0gcmV0dXJuIGZ1bmN0aW9uIGVudHJpZXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gIH07XG4gIHZhciBUQUcgPSBOQU1FICsgJyBJdGVyYXRvcic7XG4gIHZhciBERUZfVkFMVUVTID0gREVGQVVMVCA9PSBWQUxVRVM7XG4gIHZhciBWQUxVRVNfQlVHID0gZmFsc2U7XG4gIHZhciBwcm90byA9IEJhc2UucHJvdG90eXBlO1xuICB2YXIgJG5hdGl2ZSA9IHByb3RvW0lURVJBVE9SXSB8fCBwcm90b1tGRl9JVEVSQVRPUl0gfHwgREVGQVVMVCAmJiBwcm90b1tERUZBVUxUXTtcbiAgdmFyICRkZWZhdWx0ID0gJG5hdGl2ZSB8fCBnZXRNZXRob2QoREVGQVVMVCk7XG4gIHZhciAkZW50cmllcyA9IERFRkFVTFQgPyAhREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKCdlbnRyaWVzJykgOiB1bmRlZmluZWQ7XG4gIHZhciAkYW55TmF0aXZlID0gTkFNRSA9PSAnQXJyYXknID8gcHJvdG8uZW50cmllcyB8fCAkbmF0aXZlIDogJG5hdGl2ZTtcbiAgdmFyIG1ldGhvZHMsIGtleSwgSXRlcmF0b3JQcm90b3R5cGU7XG4gIC8vIEZpeCBuYXRpdmVcbiAgaWYgKCRhbnlOYXRpdmUpIHtcbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKCRhbnlOYXRpdmUuY2FsbChuZXcgQmFzZSgpKSk7XG4gICAgaWYgKEl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlICYmIEl0ZXJhdG9yUHJvdG90eXBlLm5leHQpIHtcbiAgICAgIC8vIFNldCBAQHRvU3RyaW5nVGFnIHRvIG5hdGl2ZSBpdGVyYXRvcnNcbiAgICAgIHNldFRvU3RyaW5nVGFnKEl0ZXJhdG9yUHJvdG90eXBlLCBUQUcsIHRydWUpO1xuICAgICAgLy8gZml4IGZvciBzb21lIG9sZCBlbmdpbmVzXG4gICAgICBpZiAoIUxJQlJBUlkgJiYgdHlwZW9mIEl0ZXJhdG9yUHJvdG90eXBlW0lURVJBVE9SXSAhPSAnZnVuY3Rpb24nKSBoaWRlKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG4gICAgfVxuICB9XG4gIC8vIGZpeCBBcnJheSN7dmFsdWVzLCBAQGl0ZXJhdG9yfS5uYW1lIGluIFY4IC8gRkZcbiAgaWYgKERFRl9WQUxVRVMgJiYgJG5hdGl2ZSAmJiAkbmF0aXZlLm5hbWUgIT09IFZBTFVFUykge1xuICAgIFZBTFVFU19CVUcgPSB0cnVlO1xuICAgICRkZWZhdWx0ID0gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gJG5hdGl2ZS5jYWxsKHRoaXMpOyB9O1xuICB9XG4gIC8vIERlZmluZSBpdGVyYXRvclxuICBpZiAoKCFMSUJSQVJZIHx8IEZPUkNFRCkgJiYgKEJVR0dZIHx8IFZBTFVFU19CVUcgfHwgIXByb3RvW0lURVJBVE9SXSkpIHtcbiAgICBoaWRlKHByb3RvLCBJVEVSQVRPUiwgJGRlZmF1bHQpO1xuICB9XG4gIC8vIFBsdWcgZm9yIGxpYnJhcnlcbiAgSXRlcmF0b3JzW05BTUVdID0gJGRlZmF1bHQ7XG4gIEl0ZXJhdG9yc1tUQUddID0gcmV0dXJuVGhpcztcbiAgaWYgKERFRkFVTFQpIHtcbiAgICBtZXRob2RzID0ge1xuICAgICAgdmFsdWVzOiBERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoVkFMVUVTKSxcbiAgICAgIGtleXM6IElTX1NFVCA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKEtFWVMpLFxuICAgICAgZW50cmllczogJGVudHJpZXNcbiAgICB9O1xuICAgIGlmIChGT1JDRUQpIGZvciAoa2V5IGluIG1ldGhvZHMpIHtcbiAgICAgIGlmICghKGtleSBpbiBwcm90bykpIHJlZGVmaW5lKHByb3RvLCBrZXksIG1ldGhvZHNba2V5XSk7XG4gICAgfSBlbHNlICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKEJVR0dZIHx8IFZBTFVFU19CVUcpLCBOQU1FLCBtZXRob2RzKTtcbiAgfVxuICByZXR1cm4gbWV0aG9kcztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIGRlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG5cbi8vIDI1LjEuMi4xLjEgJUl0ZXJhdG9yUHJvdG90eXBlJVtAQGl0ZXJhdG9yXSgpXG5yZXF1aXJlKCcuL19oaWRlJykoSXRlcmF0b3JQcm90b3R5cGUsIHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpLCBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpIHtcbiAgQ29uc3RydWN0b3IucHJvdG90eXBlID0gY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlLCB7IG5leHQ6IGRlc2NyaXB0b3IoMSwgbmV4dCkgfSk7XG4gIHNldFRvU3RyaW5nVGFnKENvbnN0cnVjdG9yLCBOQU1FICsgJyBJdGVyYXRvcicpO1xufTtcbiIsIi8vIGhlbHBlciBmb3IgU3RyaW5nI3tzdGFydHNXaXRoLCBlbmRzV2l0aCwgaW5jbHVkZXN9XG52YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuL19pcy1yZWdleHAnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCBzZWFyY2hTdHJpbmcsIE5BTUUpIHtcbiAgaWYgKGlzUmVnRXhwKHNlYXJjaFN0cmluZykpIHRocm93IFR5cGVFcnJvcignU3RyaW5nIycgKyBOQU1FICsgXCIgZG9lc24ndCBhY2NlcHQgcmVnZXghXCIpO1xuICByZXR1cm4gU3RyaW5nKGRlZmluZWQodGhhdCkpO1xufTtcbiIsInZhciBNQVRDSCA9IHJlcXVpcmUoJy4vX3drcycpKCdtYXRjaCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZKSB7XG4gIHZhciByZSA9IC8uLztcbiAgdHJ5IHtcbiAgICAnLy4vJ1tLRVldKHJlKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRyeSB7XG4gICAgICByZVtNQVRDSF0gPSBmYWxzZTtcbiAgICAgIHJldHVybiAhJy8uLydbS0VZXShyZSk7XG4gICAgfSBjYXRjaCAoZikgeyAvKiBlbXB0eSAqLyB9XG4gIH0gcmV0dXJuIHRydWU7XG59O1xuIiwiLy8gY2hlY2sgb24gZGVmYXVsdCBBcnJheSBpdGVyYXRvclxudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ICE9PSB1bmRlZmluZWQgJiYgKEl0ZXJhdG9ycy5BcnJheSA9PT0gaXQgfHwgQXJyYXlQcm90b1tJVEVSQVRPUl0gPT09IGl0KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBpbmRleCwgdmFsdWUpIHtcbiAgaWYgKGluZGV4IGluIG9iamVjdCkgJGRlZmluZVByb3BlcnR5LmYob2JqZWN0LCBpbmRleCwgY3JlYXRlRGVzYygwLCB2YWx1ZSkpO1xuICBlbHNlIG9iamVjdFtpbmRleF0gPSB2YWx1ZTtcbn07XG4iLCJ2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb3JlJykuZ2V0SXRlcmF0b3JNZXRob2QgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ICE9IHVuZGVmaW5lZCkgcmV0dXJuIGl0W0lURVJBVE9SXVxuICAgIHx8IGl0WydAQGl0ZXJhdG9yJ11cbiAgICB8fCBJdGVyYXRvcnNbY2xhc3NvZihpdCldO1xufTtcbiIsIi8vIDkuNC4yLjMgQXJyYXlTcGVjaWVzQ3JlYXRlKG9yaWdpbmFsQXJyYXksIGxlbmd0aClcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9yaWdpbmFsLCBsZW5ndGgpIHtcbiAgcmV0dXJuIG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKG9yaWdpbmFsKSkobGVuZ3RoKTtcbn07XG4iLCIvLyAyMi4xLjMuNiBBcnJheS5wcm90b3R5cGUuZmlsbCh2YWx1ZSwgc3RhcnQgPSAwLCBlbmQgPSB0aGlzLmxlbmd0aClcbid1c2Ugc3RyaWN0JztcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZmlsbCh2YWx1ZSAvKiAsIHN0YXJ0ID0gMCwgZW5kID0gQGxlbmd0aCAqLykge1xuICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChhTGVuID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgbGVuZ3RoKTtcbiAgdmFyIGVuZCA9IGFMZW4gPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkO1xuICB2YXIgZW5kUG9zID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW5ndGgpO1xuICB3aGlsZSAoZW5kUG9zID4gaW5kZXgpIE9baW5kZXgrK10gPSB2YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKTtcbnZhciBzdGVwID0gcmVxdWlyZSgnLi9faXRlci1zdGVwJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xuXG4vLyAyMi4xLjMuNCBBcnJheS5wcm90b3R5cGUuZW50cmllcygpXG4vLyAyMi4xLjMuMTMgQXJyYXkucHJvdG90eXBlLmtleXMoKVxuLy8gMjIuMS4zLjI5IEFycmF5LnByb3RvdHlwZS52YWx1ZXMoKVxuLy8gMjIuMS4zLjMwIEFycmF5LnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJykoQXJyYXksICdBcnJheScsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICB0aGlzLl90ID0gdG9JT2JqZWN0KGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4gIHRoaXMuX2sgPSBraW5kOyAgICAgICAgICAgICAgICAvLyBraW5kXG4vLyAyMi4xLjUuMi4xICVBcnJheUl0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uICgpIHtcbiAgdmFyIE8gPSB0aGlzLl90O1xuICB2YXIga2luZCA9IHRoaXMuX2s7XG4gIHZhciBpbmRleCA9IHRoaXMuX2krKztcbiAgaWYgKCFPIHx8IGluZGV4ID49IE8ubGVuZ3RoKSB7XG4gICAgdGhpcy5fdCA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gc3RlcCgxKTtcbiAgfVxuICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiBzdGVwKDAsIGluZGV4KTtcbiAgaWYgKGtpbmQgPT0gJ3ZhbHVlcycpIHJldHVybiBzdGVwKDAsIE9baW5kZXhdKTtcbiAgcmV0dXJuIHN0ZXAoMCwgW2luZGV4LCBPW2luZGV4XV0pO1xufSwgJ3ZhbHVlcycpO1xuXG4vLyBhcmd1bWVudHNMaXN0W0BAaXRlcmF0b3JdIGlzICVBcnJheVByb3RvX3ZhbHVlcyUgKDkuNC40LjYsIDkuNC40LjcpXG5JdGVyYXRvcnMuQXJndW1lbnRzID0gSXRlcmF0b3JzLkFycmF5O1xuXG5hZGRUb1Vuc2NvcGFibGVzKCdrZXlzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCd2YWx1ZXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ2VudHJpZXMnKTtcbiIsInZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBpbnZva2UgPSByZXF1aXJlKCcuL19pbnZva2UnKTtcbnZhciBodG1sID0gcmVxdWlyZSgnLi9faHRtbCcpO1xudmFyIGNlbCA9IHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgc2V0VGFzayA9IGdsb2JhbC5zZXRJbW1lZGlhdGU7XG52YXIgY2xlYXJUYXNrID0gZ2xvYmFsLmNsZWFySW1tZWRpYXRlO1xudmFyIE1lc3NhZ2VDaGFubmVsID0gZ2xvYmFsLk1lc3NhZ2VDaGFubmVsO1xudmFyIERpc3BhdGNoID0gZ2xvYmFsLkRpc3BhdGNoO1xudmFyIGNvdW50ZXIgPSAwO1xudmFyIHF1ZXVlID0ge307XG52YXIgT05SRUFEWVNUQVRFQ0hBTkdFID0gJ29ucmVhZHlzdGF0ZWNoYW5nZSc7XG52YXIgZGVmZXIsIGNoYW5uZWwsIHBvcnQ7XG52YXIgcnVuID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaWQgPSArdGhpcztcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICBpZiAocXVldWUuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgdmFyIGZuID0gcXVldWVbaWRdO1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gICAgZm4oKTtcbiAgfVxufTtcbnZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uIChldmVudCkge1xuICBydW4uY2FsbChldmVudC5kYXRhKTtcbn07XG4vLyBOb2RlLmpzIDAuOSsgJiBJRTEwKyBoYXMgc2V0SW1tZWRpYXRlLCBvdGhlcndpc2U6XG5pZiAoIXNldFRhc2sgfHwgIWNsZWFyVGFzaykge1xuICBzZXRUYXNrID0gZnVuY3Rpb24gc2V0SW1tZWRpYXRlKGZuKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICB2YXIgaSA9IDE7XG4gICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpKSBhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgIHF1ZXVlWysrY291bnRlcl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICAgIGludm9rZSh0eXBlb2YgZm4gPT0gJ2Z1bmN0aW9uJyA/IGZuIDogRnVuY3Rpb24oZm4pLCBhcmdzKTtcbiAgICB9O1xuICAgIGRlZmVyKGNvdW50ZXIpO1xuICAgIHJldHVybiBjb3VudGVyO1xuICB9O1xuICBjbGVhclRhc2sgPSBmdW5jdGlvbiBjbGVhckltbWVkaWF0ZShpZCkge1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gIH07XG4gIC8vIE5vZGUuanMgMC44LVxuICBpZiAocmVxdWlyZSgnLi9fY29mJykocHJvY2VzcykgPT0gJ3Byb2Nlc3MnKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soY3R4KHJ1biwgaWQsIDEpKTtcbiAgICB9O1xuICAvLyBTcGhlcmUgKEpTIGdhbWUgZW5naW5lKSBEaXNwYXRjaCBBUElcbiAgfSBlbHNlIGlmIChEaXNwYXRjaCAmJiBEaXNwYXRjaC5ub3cpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgRGlzcGF0Y2gubm93KGN0eChydW4sIGlkLCAxKSk7XG4gICAgfTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBNZXNzYWdlQ2hhbm5lbCwgaW5jbHVkZXMgV2ViV29ya2Vyc1xuICB9IGVsc2UgaWYgKE1lc3NhZ2VDaGFubmVsKSB7XG4gICAgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuICAgIHBvcnQgPSBjaGFubmVsLnBvcnQyO1xuICAgIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gbGlzdGVuZXI7XG4gICAgZGVmZXIgPSBjdHgocG9ydC5wb3N0TWVzc2FnZSwgcG9ydCwgMSk7XG4gIC8vIEJyb3dzZXJzIHdpdGggcG9zdE1lc3NhZ2UsIHNraXAgV2ViV29ya2Vyc1xuICAvLyBJRTggaGFzIHBvc3RNZXNzYWdlLCBidXQgaXQncyBzeW5jICYgdHlwZW9mIGl0cyBwb3N0TWVzc2FnZSBpcyAnb2JqZWN0J1xuICB9IGVsc2UgaWYgKGdsb2JhbC5hZGRFdmVudExpc3RlbmVyICYmIHR5cGVvZiBwb3N0TWVzc2FnZSA9PSAnZnVuY3Rpb24nICYmICFnbG9iYWwuaW1wb3J0U2NyaXB0cykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBnbG9iYWwucG9zdE1lc3NhZ2UoaWQgKyAnJywgJyonKTtcbiAgICB9O1xuICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgbGlzdGVuZXIsIGZhbHNlKTtcbiAgLy8gSUU4LVxuICB9IGVsc2UgaWYgKE9OUkVBRFlTVEFURUNIQU5HRSBpbiBjZWwoJ3NjcmlwdCcpKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIGh0bWwuYXBwZW5kQ2hpbGQoY2VsKCdzY3JpcHQnKSlbT05SRUFEWVNUQVRFQ0hBTkdFXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaHRtbC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICAgICAgcnVuLmNhbGwoaWQpO1xuICAgICAgfTtcbiAgICB9O1xuICAvLyBSZXN0IG9sZCBicm93c2Vyc1xuICB9IGVsc2Uge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBzZXRUaW1lb3V0KGN0eChydW4sIGlkLCAxKSwgMCk7XG4gICAgfTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogc2V0VGFzayxcbiAgY2xlYXI6IGNsZWFyVGFza1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBtYWNyb3Rhc2sgPSByZXF1aXJlKCcuL190YXNrJykuc2V0O1xudmFyIE9ic2VydmVyID0gZ2xvYmFsLk11dGF0aW9uT2JzZXJ2ZXIgfHwgZ2xvYmFsLldlYktpdE11dGF0aW9uT2JzZXJ2ZXI7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIFByb21pc2UgPSBnbG9iYWwuUHJvbWlzZTtcbnZhciBpc05vZGUgPSByZXF1aXJlKCcuL19jb2YnKShwcm9jZXNzKSA9PSAncHJvY2Vzcyc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaGVhZCwgbGFzdCwgbm90aWZ5O1xuXG4gIHZhciBmbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcGFyZW50LCBmbjtcbiAgICBpZiAoaXNOb2RlICYmIChwYXJlbnQgPSBwcm9jZXNzLmRvbWFpbikpIHBhcmVudC5leGl0KCk7XG4gICAgd2hpbGUgKGhlYWQpIHtcbiAgICAgIGZuID0gaGVhZC5mbjtcbiAgICAgIGhlYWQgPSBoZWFkLm5leHQ7XG4gICAgICB0cnkge1xuICAgICAgICBmbigpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoaGVhZCkgbm90aWZ5KCk7XG4gICAgICAgIGVsc2UgbGFzdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9IGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgaWYgKHBhcmVudCkgcGFyZW50LmVudGVyKCk7XG4gIH07XG5cbiAgLy8gTm9kZS5qc1xuICBpZiAoaXNOb2RlKSB7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhmbHVzaCk7XG4gICAgfTtcbiAgLy8gYnJvd3NlcnMgd2l0aCBNdXRhdGlvbk9ic2VydmVyLCBleGNlcHQgaU9TIFNhZmFyaSAtIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8zMzlcbiAgfSBlbHNlIGlmIChPYnNlcnZlciAmJiAhKGdsb2JhbC5uYXZpZ2F0b3IgJiYgZ2xvYmFsLm5hdmlnYXRvci5zdGFuZGFsb25lKSkge1xuICAgIHZhciB0b2dnbGUgPSB0cnVlO1xuICAgIHZhciBub2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpO1xuICAgIG5ldyBPYnNlcnZlcihmbHVzaCkub2JzZXJ2ZShub2RlLCB7IGNoYXJhY3RlckRhdGE6IHRydWUgfSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgbm9kZS5kYXRhID0gdG9nZ2xlID0gIXRvZ2dsZTtcbiAgICB9O1xuICAvLyBlbnZpcm9ubWVudHMgd2l0aCBtYXliZSBub24tY29tcGxldGVseSBjb3JyZWN0LCBidXQgZXhpc3RlbnQgUHJvbWlzZVxuICB9IGVsc2UgaWYgKFByb21pc2UgJiYgUHJvbWlzZS5yZXNvbHZlKSB7XG4gICAgLy8gUHJvbWlzZS5yZXNvbHZlIHdpdGhvdXQgYW4gYXJndW1lbnQgdGhyb3dzIGFuIGVycm9yIGluIExHIFdlYk9TIDJcbiAgICB2YXIgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSh1bmRlZmluZWQpO1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHByb21pc2UudGhlbihmbHVzaCk7XG4gICAgfTtcbiAgLy8gZm9yIG90aGVyIGVudmlyb25tZW50cyAtIG1hY3JvdGFzayBiYXNlZCBvbjpcbiAgLy8gLSBzZXRJbW1lZGlhdGVcbiAgLy8gLSBNZXNzYWdlQ2hhbm5lbFxuICAvLyAtIHdpbmRvdy5wb3N0TWVzc2FnXG4gIC8vIC0gb25yZWFkeXN0YXRlY2hhbmdlXG4gIC8vIC0gc2V0VGltZW91dFxuICB9IGVsc2Uge1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIHN0cmFuZ2UgSUUgKyB3ZWJwYWNrIGRldiBzZXJ2ZXIgYnVnIC0gdXNlIC5jYWxsKGdsb2JhbClcbiAgICAgIG1hY3JvdGFzay5jYWxsKGdsb2JhbCwgZmx1c2gpO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGZuKSB7XG4gICAgdmFyIHRhc2sgPSB7IGZuOiBmbiwgbmV4dDogdW5kZWZpbmVkIH07XG4gICAgaWYgKGxhc3QpIGxhc3QubmV4dCA9IHRhc2s7XG4gICAgaWYgKCFoZWFkKSB7XG4gICAgICBoZWFkID0gdGFzaztcbiAgICAgIG5vdGlmeSgpO1xuICAgIH0gbGFzdCA9IHRhc2s7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjUuNC4xLjUgTmV3UHJvbWlzZUNhcGFiaWxpdHkoQylcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5cbmZ1bmN0aW9uIFByb21pc2VDYXBhYmlsaXR5KEMpIHtcbiAgdmFyIHJlc29sdmUsIHJlamVjdDtcbiAgdGhpcy5wcm9taXNlID0gbmV3IEMoZnVuY3Rpb24gKCQkcmVzb2x2ZSwgJCRyZWplY3QpIHtcbiAgICBpZiAocmVzb2x2ZSAhPT0gdW5kZWZpbmVkIHx8IHJlamVjdCAhPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoJ0JhZCBQcm9taXNlIGNvbnN0cnVjdG9yJyk7XG4gICAgcmVzb2x2ZSA9ICQkcmVzb2x2ZTtcbiAgICByZWplY3QgPSAkJHJlamVjdDtcbiAgfSk7XG4gIHRoaXMucmVzb2x2ZSA9IGFGdW5jdGlvbihyZXNvbHZlKTtcbiAgdGhpcy5yZWplY3QgPSBhRnVuY3Rpb24ocmVqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIChDKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZUNhcGFiaWxpdHkoQyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyICR0eXBlZCA9IHJlcXVpcmUoJy4vX3R5cGVkJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciB0b0luZGV4ID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKTtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBhcnJheUZpbGwgPSByZXF1aXJlKCcuL19hcnJheS1maWxsJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEFSUkFZX0JVRkZFUiA9ICdBcnJheUJ1ZmZlcic7XG52YXIgREFUQV9WSUVXID0gJ0RhdGFWaWV3JztcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBXUk9OR19MRU5HVEggPSAnV3JvbmcgbGVuZ3RoISc7XG52YXIgV1JPTkdfSU5ERVggPSAnV3JvbmcgaW5kZXghJztcbnZhciAkQXJyYXlCdWZmZXIgPSBnbG9iYWxbQVJSQVlfQlVGRkVSXTtcbnZhciAkRGF0YVZpZXcgPSBnbG9iYWxbREFUQV9WSUVXXTtcbnZhciBNYXRoID0gZ2xvYmFsLk1hdGg7XG52YXIgUmFuZ2VFcnJvciA9IGdsb2JhbC5SYW5nZUVycm9yO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNoYWRvdy1yZXN0cmljdGVkLW5hbWVzXG52YXIgSW5maW5pdHkgPSBnbG9iYWwuSW5maW5pdHk7XG52YXIgQmFzZUJ1ZmZlciA9ICRBcnJheUJ1ZmZlcjtcbnZhciBhYnMgPSBNYXRoLmFicztcbnZhciBwb3cgPSBNYXRoLnBvdztcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgbG9nID0gTWF0aC5sb2c7XG52YXIgTE4yID0gTWF0aC5MTjI7XG52YXIgQlVGRkVSID0gJ2J1ZmZlcic7XG52YXIgQllURV9MRU5HVEggPSAnYnl0ZUxlbmd0aCc7XG52YXIgQllURV9PRkZTRVQgPSAnYnl0ZU9mZnNldCc7XG52YXIgJEJVRkZFUiA9IERFU0NSSVBUT1JTID8gJ19iJyA6IEJVRkZFUjtcbnZhciAkTEVOR1RIID0gREVTQ1JJUFRPUlMgPyAnX2wnIDogQllURV9MRU5HVEg7XG52YXIgJE9GRlNFVCA9IERFU0NSSVBUT1JTID8gJ19vJyA6IEJZVEVfT0ZGU0VUO1xuXG4vLyBJRUVFNzU0IGNvbnZlcnNpb25zIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvaWVlZTc1NFxuZnVuY3Rpb24gcGFja0lFRUU3NTQodmFsdWUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgYnVmZmVyID0gbmV3IEFycmF5KG5CeXRlcyk7XG4gIHZhciBlTGVuID0gbkJ5dGVzICogOCAtIG1MZW4gLSAxO1xuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMTtcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxO1xuICB2YXIgcnQgPSBtTGVuID09PSAyMyA/IHBvdygyLCAtMjQpIC0gcG93KDIsIC03NykgOiAwO1xuICB2YXIgaSA9IDA7XG4gIHZhciBzID0gdmFsdWUgPCAwIHx8IHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDAgPyAxIDogMDtcbiAgdmFyIGUsIG0sIGM7XG4gIHZhbHVlID0gYWJzKHZhbHVlKTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICBpZiAodmFsdWUgIT0gdmFsdWUgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIG0gPSB2YWx1ZSAhPSB2YWx1ZSA/IDEgOiAwO1xuICAgIGUgPSBlTWF4O1xuICB9IGVsc2Uge1xuICAgIGUgPSBmbG9vcihsb2codmFsdWUpIC8gTE4yKTtcbiAgICBpZiAodmFsdWUgKiAoYyA9IHBvdygyLCAtZSkpIDwgMSkge1xuICAgICAgZS0tO1xuICAgICAgYyAqPSAyO1xuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gYztcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgKz0gcnQgKiBwb3coMiwgMSAtIGVCaWFzKTtcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKys7XG4gICAgICBjIC89IDI7XG4gICAgfVxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDA7XG4gICAgICBlID0gZU1heDtcbiAgICB9IGVsc2UgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBtID0gKHZhbHVlICogYyAtIDEpICogcG93KDIsIG1MZW4pO1xuICAgICAgZSA9IGUgKyBlQmlhcztcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogcG93KDIsIGVCaWFzIC0gMSkgKiBwb3coMiwgbUxlbik7XG4gICAgICBlID0gMDtcbiAgICB9XG4gIH1cbiAgZm9yICg7IG1MZW4gPj0gODsgYnVmZmVyW2krK10gPSBtICYgMjU1LCBtIC89IDI1NiwgbUxlbiAtPSA4KTtcbiAgZSA9IGUgPDwgbUxlbiB8IG07XG4gIGVMZW4gKz0gbUxlbjtcbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbaSsrXSA9IGUgJiAyNTUsIGUgLz0gMjU2LCBlTGVuIC09IDgpO1xuICBidWZmZXJbLS1pXSB8PSBzICogMTI4O1xuICByZXR1cm4gYnVmZmVyO1xufVxuZnVuY3Rpb24gdW5wYWNrSUVFRTc1NChidWZmZXIsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMTtcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDE7XG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMTtcbiAgdmFyIG5CaXRzID0gZUxlbiAtIDc7XG4gIHZhciBpID0gbkJ5dGVzIC0gMTtcbiAgdmFyIHMgPSBidWZmZXJbaS0tXTtcbiAgdmFyIGUgPSBzICYgMTI3O1xuICB2YXIgbTtcbiAgcyA+Pj0gNztcbiAgZm9yICg7IG5CaXRzID4gMDsgZSA9IGUgKiAyNTYgKyBidWZmZXJbaV0sIGktLSwgbkJpdHMgLT0gOCk7XG4gIG0gPSBlICYgKDEgPDwgLW5CaXRzKSAtIDE7XG4gIGUgPj49IC1uQml0cztcbiAgbkJpdHMgKz0gbUxlbjtcbiAgZm9yICg7IG5CaXRzID4gMDsgbSA9IG0gKiAyNTYgKyBidWZmZXJbaV0sIGktLSwgbkJpdHMgLT0gOCk7XG4gIGlmIChlID09PSAwKSB7XG4gICAgZSA9IDEgLSBlQmlhcztcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiBzID8gLUluZmluaXR5IDogSW5maW5pdHk7XG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBwb3coMiwgbUxlbik7XG4gICAgZSA9IGUgLSBlQmlhcztcbiAgfSByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIHBvdygyLCBlIC0gbUxlbik7XG59XG5cbmZ1bmN0aW9uIHVucGFja0kzMihieXRlcykge1xuICByZXR1cm4gYnl0ZXNbM10gPDwgMjQgfCBieXRlc1syXSA8PCAxNiB8IGJ5dGVzWzFdIDw8IDggfCBieXRlc1swXTtcbn1cbmZ1bmN0aW9uIHBhY2tJOChpdCkge1xuICByZXR1cm4gW2l0ICYgMHhmZl07XG59XG5mdW5jdGlvbiBwYWNrSTE2KGl0KSB7XG4gIHJldHVybiBbaXQgJiAweGZmLCBpdCA+PiA4ICYgMHhmZl07XG59XG5mdW5jdGlvbiBwYWNrSTMyKGl0KSB7XG4gIHJldHVybiBbaXQgJiAweGZmLCBpdCA+PiA4ICYgMHhmZiwgaXQgPj4gMTYgJiAweGZmLCBpdCA+PiAyNCAmIDB4ZmZdO1xufVxuZnVuY3Rpb24gcGFja0Y2NChpdCkge1xuICByZXR1cm4gcGFja0lFRUU3NTQoaXQsIDUyLCA4KTtcbn1cbmZ1bmN0aW9uIHBhY2tGMzIoaXQpIHtcbiAgcmV0dXJuIHBhY2tJRUVFNzU0KGl0LCAyMywgNCk7XG59XG5cbmZ1bmN0aW9uIGFkZEdldHRlcihDLCBrZXksIGludGVybmFsKSB7XG4gIGRQKENbUFJPVE9UWVBFXSwga2V5LCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpc1tpbnRlcm5hbF07IH0gfSk7XG59XG5cbmZ1bmN0aW9uIGdldCh2aWV3LCBieXRlcywgaW5kZXgsIGlzTGl0dGxlRW5kaWFuKSB7XG4gIHZhciBudW1JbmRleCA9ICtpbmRleDtcbiAgdmFyIGludEluZGV4ID0gdG9JbmRleChudW1JbmRleCk7XG4gIGlmIChpbnRJbmRleCArIGJ5dGVzID4gdmlld1skTEVOR1RIXSkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19JTkRFWCk7XG4gIHZhciBzdG9yZSA9IHZpZXdbJEJVRkZFUl0uX2I7XG4gIHZhciBzdGFydCA9IGludEluZGV4ICsgdmlld1skT0ZGU0VUXTtcbiAgdmFyIHBhY2sgPSBzdG9yZS5zbGljZShzdGFydCwgc3RhcnQgKyBieXRlcyk7XG4gIHJldHVybiBpc0xpdHRsZUVuZGlhbiA/IHBhY2sgOiBwYWNrLnJldmVyc2UoKTtcbn1cbmZ1bmN0aW9uIHNldCh2aWV3LCBieXRlcywgaW5kZXgsIGNvbnZlcnNpb24sIHZhbHVlLCBpc0xpdHRsZUVuZGlhbikge1xuICB2YXIgbnVtSW5kZXggPSAraW5kZXg7XG4gIHZhciBpbnRJbmRleCA9IHRvSW5kZXgobnVtSW5kZXgpO1xuICBpZiAoaW50SW5kZXggKyBieXRlcyA+IHZpZXdbJExFTkdUSF0pIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfSU5ERVgpO1xuICB2YXIgc3RvcmUgPSB2aWV3WyRCVUZGRVJdLl9iO1xuICB2YXIgc3RhcnQgPSBpbnRJbmRleCArIHZpZXdbJE9GRlNFVF07XG4gIHZhciBwYWNrID0gY29udmVyc2lvbigrdmFsdWUpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzOyBpKyspIHN0b3JlW3N0YXJ0ICsgaV0gPSBwYWNrW2lzTGl0dGxlRW5kaWFuID8gaSA6IGJ5dGVzIC0gaSAtIDFdO1xufVxuXG5pZiAoISR0eXBlZC5BQlYpIHtcbiAgJEFycmF5QnVmZmVyID0gZnVuY3Rpb24gQXJyYXlCdWZmZXIobGVuZ3RoKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkQXJyYXlCdWZmZXIsIEFSUkFZX0JVRkZFUik7XG4gICAgdmFyIGJ5dGVMZW5ndGggPSB0b0luZGV4KGxlbmd0aCk7XG4gICAgdGhpcy5fYiA9IGFycmF5RmlsbC5jYWxsKG5ldyBBcnJheShieXRlTGVuZ3RoKSwgMCk7XG4gICAgdGhpc1skTEVOR1RIXSA9IGJ5dGVMZW5ndGg7XG4gIH07XG5cbiAgJERhdGFWaWV3ID0gZnVuY3Rpb24gRGF0YVZpZXcoYnVmZmVyLCBieXRlT2Zmc2V0LCBieXRlTGVuZ3RoKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkRGF0YVZpZXcsIERBVEFfVklFVyk7XG4gICAgYW5JbnN0YW5jZShidWZmZXIsICRBcnJheUJ1ZmZlciwgREFUQV9WSUVXKTtcbiAgICB2YXIgYnVmZmVyTGVuZ3RoID0gYnVmZmVyWyRMRU5HVEhdO1xuICAgIHZhciBvZmZzZXQgPSB0b0ludGVnZXIoYnl0ZU9mZnNldCk7XG4gICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ID4gYnVmZmVyTGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBvZmZzZXQhJyk7XG4gICAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPT09IHVuZGVmaW5lZCA/IGJ1ZmZlckxlbmd0aCAtIG9mZnNldCA6IHRvTGVuZ3RoKGJ5dGVMZW5ndGgpO1xuICAgIGlmIChvZmZzZXQgKyBieXRlTGVuZ3RoID4gYnVmZmVyTGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgdGhpc1skQlVGRkVSXSA9IGJ1ZmZlcjtcbiAgICB0aGlzWyRPRkZTRVRdID0gb2Zmc2V0O1xuICAgIHRoaXNbJExFTkdUSF0gPSBieXRlTGVuZ3RoO1xuICB9O1xuXG4gIGlmIChERVNDUklQVE9SUykge1xuICAgIGFkZEdldHRlcigkQXJyYXlCdWZmZXIsIEJZVEVfTEVOR1RILCAnX2wnKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCVUZGRVIsICdfYicpO1xuICAgIGFkZEdldHRlcigkRGF0YVZpZXcsIEJZVEVfTEVOR1RILCAnX2wnKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCWVRFX09GRlNFVCwgJ19vJyk7XG4gIH1cblxuICByZWRlZmluZUFsbCgkRGF0YVZpZXdbUFJPVE9UWVBFXSwge1xuICAgIGdldEludDg6IGZ1bmN0aW9uIGdldEludDgoYnl0ZU9mZnNldCkge1xuICAgICAgcmV0dXJuIGdldCh0aGlzLCAxLCBieXRlT2Zmc2V0KVswXSA8PCAyNCA+PiAyNDtcbiAgICB9LFxuICAgIGdldFVpbnQ4OiBmdW5jdGlvbiBnZXRVaW50OChieXRlT2Zmc2V0KSB7XG4gICAgICByZXR1cm4gZ2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQpWzBdO1xuICAgIH0sXG4gICAgZ2V0SW50MTY6IGZ1bmN0aW9uIGdldEludDE2KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHZhciBieXRlcyA9IGdldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pO1xuICAgICAgcmV0dXJuIChieXRlc1sxXSA8PCA4IHwgYnl0ZXNbMF0pIDw8IDE2ID4+IDE2O1xuICAgIH0sXG4gICAgZ2V0VWludDE2OiBmdW5jdGlvbiBnZXRVaW50MTYoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgdmFyIGJ5dGVzID0gZ2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSk7XG4gICAgICByZXR1cm4gYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdO1xuICAgIH0sXG4gICAgZ2V0SW50MzI6IGZ1bmN0aW9uIGdldEludDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJMzIoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSkpO1xuICAgIH0sXG4gICAgZ2V0VWludDMyOiBmdW5jdGlvbiBnZXRVaW50MzIoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgcmV0dXJuIHVucGFja0kzMihnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSkgPj4+IDA7XG4gICAgfSxcbiAgICBnZXRGbG9hdDMyOiBmdW5jdGlvbiBnZXRGbG9hdDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJRUVFNzU0KGdldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pLCAyMywgNCk7XG4gICAgfSxcbiAgICBnZXRGbG9hdDY0OiBmdW5jdGlvbiBnZXRGbG9hdDY0KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJRUVFNzU0KGdldCh0aGlzLCA4LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pLCA1MiwgOCk7XG4gICAgfSxcbiAgICBzZXRJbnQ4OiBmdW5jdGlvbiBzZXRJbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICBzZXQodGhpcywgMSwgYnl0ZU9mZnNldCwgcGFja0k4LCB2YWx1ZSk7XG4gICAgfSxcbiAgICBzZXRVaW50ODogZnVuY3Rpb24gc2V0VWludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgIHNldCh0aGlzLCAxLCBieXRlT2Zmc2V0LCBwYWNrSTgsIHZhbHVlKTtcbiAgICB9LFxuICAgIHNldEludDE2OiBmdW5jdGlvbiBzZXRJbnQxNihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIHBhY2tJMTYsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0VWludDE2OiBmdW5jdGlvbiBzZXRVaW50MTYoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBwYWNrSTE2LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEludDMyOiBmdW5jdGlvbiBzZXRJbnQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tJMzIsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0VWludDMyOiBmdW5jdGlvbiBzZXRVaW50MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrSTMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEZsb2F0MzI6IGZ1bmN0aW9uIHNldEZsb2F0MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrRjMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEZsb2F0NjQ6IGZ1bmN0aW9uIHNldEZsb2F0NjQoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA4LCBieXRlT2Zmc2V0LCBwYWNrRjY0LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9XG4gIH0pO1xufSBlbHNlIHtcbiAgaWYgKCFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgJEFycmF5QnVmZmVyKDEpO1xuICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoLTEpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICB9KSB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3ICRBcnJheUJ1ZmZlcigpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoMS41KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICBuZXcgJEFycmF5QnVmZmVyKE5hTik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgcmV0dXJuICRBcnJheUJ1ZmZlci5uYW1lICE9IEFSUkFZX0JVRkZFUjtcbiAgfSkpIHtcbiAgICAkQXJyYXlCdWZmZXIgPSBmdW5jdGlvbiBBcnJheUJ1ZmZlcihsZW5ndGgpIHtcbiAgICAgIGFuSW5zdGFuY2UodGhpcywgJEFycmF5QnVmZmVyKTtcbiAgICAgIHJldHVybiBuZXcgQmFzZUJ1ZmZlcih0b0luZGV4KGxlbmd0aCkpO1xuICAgIH07XG4gICAgdmFyIEFycmF5QnVmZmVyUHJvdG8gPSAkQXJyYXlCdWZmZXJbUFJPVE9UWVBFXSA9IEJhc2VCdWZmZXJbUFJPVE9UWVBFXTtcbiAgICBmb3IgKHZhciBrZXlzID0gZ09QTihCYXNlQnVmZmVyKSwgaiA9IDAsIGtleTsga2V5cy5sZW5ndGggPiBqOykge1xuICAgICAgaWYgKCEoKGtleSA9IGtleXNbaisrXSkgaW4gJEFycmF5QnVmZmVyKSkgaGlkZSgkQXJyYXlCdWZmZXIsIGtleSwgQmFzZUJ1ZmZlcltrZXldKTtcbiAgICB9XG4gICAgaWYgKCFMSUJSQVJZKSBBcnJheUJ1ZmZlclByb3RvLmNvbnN0cnVjdG9yID0gJEFycmF5QnVmZmVyO1xuICB9XG4gIC8vIGlPUyBTYWZhcmkgNy54IGJ1Z1xuICB2YXIgdmlldyA9IG5ldyAkRGF0YVZpZXcobmV3ICRBcnJheUJ1ZmZlcigyKSk7XG4gIHZhciAkc2V0SW50OCA9ICREYXRhVmlld1tQUk9UT1RZUEVdLnNldEludDg7XG4gIHZpZXcuc2V0SW50OCgwLCAyMTQ3NDgzNjQ4KTtcbiAgdmlldy5zZXRJbnQ4KDEsIDIxNDc0ODM2NDkpO1xuICBpZiAodmlldy5nZXRJbnQ4KDApIHx8ICF2aWV3LmdldEludDgoMSkpIHJlZGVmaW5lQWxsKCREYXRhVmlld1tQUk9UT1RZUEVdLCB7XG4gICAgc2V0SW50ODogZnVuY3Rpb24gc2V0SW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgJHNldEludDguY2FsbCh0aGlzLCBieXRlT2Zmc2V0LCB2YWx1ZSA8PCAyNCA+PiAyNCk7XG4gICAgfSxcbiAgICBzZXRVaW50ODogZnVuY3Rpb24gc2V0VWludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgICRzZXRJbnQ4LmNhbGwodGhpcywgYnl0ZU9mZnNldCwgdmFsdWUgPDwgMjQgPj4gMjQpO1xuICAgIH1cbiAgfSwgdHJ1ZSk7XG59XG5zZXRUb1N0cmluZ1RhZygkQXJyYXlCdWZmZXIsIEFSUkFZX0JVRkZFUik7XG5zZXRUb1N0cmluZ1RhZygkRGF0YVZpZXcsIERBVEFfVklFVyk7XG5oaWRlKCREYXRhVmlld1tQUk9UT1RZUEVdLCAkdHlwZWQuVklFVywgdHJ1ZSk7XG5leHBvcnRzW0FSUkFZX0JVRkZFUl0gPSAkQXJyYXlCdWZmZXI7XG5leHBvcnRzW0RBVEFfVklFV10gPSAkRGF0YVZpZXc7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBub3JtYWxpemVIZWFkZXJOYW1lID0gcmVxdWlyZSgnLi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUnKTtcblxudmFyIERFRkFVTFRfQ09OVEVOVF9UWVBFID0ge1xuICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCdcbn07XG5cbmZ1bmN0aW9uIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCB2YWx1ZSkge1xuICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnMpICYmIHV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddKSkge1xuICAgIGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID0gdmFsdWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RGVmYXVsdEFkYXB0ZXIoKSB7XG4gIHZhciBhZGFwdGVyO1xuICBpZiAodHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIEZvciBicm93c2VycyB1c2UgWEhSIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi9hZGFwdGVycy94aHInKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBGb3Igbm9kZSB1c2UgSFRUUCBhZGFwdGVyXG4gICAgYWRhcHRlciA9IHJlcXVpcmUoJy4vYWRhcHRlcnMvaHR0cCcpO1xuICB9XG4gIHJldHVybiBhZGFwdGVyO1xufVxuXG52YXIgZGVmYXVsdHMgPSB7XG4gIGFkYXB0ZXI6IGdldERlZmF1bHRBZGFwdGVyKCksXG5cbiAgdHJhbnNmb3JtUmVxdWVzdDogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlcXVlc3QoZGF0YSwgaGVhZGVycykge1xuICAgIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgJ0NvbnRlbnQtVHlwZScpO1xuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0FycmF5QnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0J1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNTdHJlYW0oZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzRmlsZShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCbG9iKGRhdGEpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXJWaWV3KGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YS5idWZmZXI7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIGRhdGEudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzT2JqZWN0KGRhdGEpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGRhdGEpO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgdHJhbnNmb3JtUmVzcG9uc2U6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXNwb25zZShkYXRhKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICB9IGNhdGNoIChlKSB7IC8qIElnbm9yZSAqLyB9XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICAvKipcbiAgICogQSB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyB0byBhYm9ydCBhIHJlcXVlc3QuIElmIHNldCB0byAwIChkZWZhdWx0KSBhXG4gICAqIHRpbWVvdXQgaXMgbm90IGNyZWF0ZWQuXG4gICAqL1xuICB0aW1lb3V0OiAwLFxuXG4gIHhzcmZDb29raWVOYW1lOiAnWFNSRi1UT0tFTicsXG4gIHhzcmZIZWFkZXJOYW1lOiAnWC1YU1JGLVRPS0VOJyxcblxuICBtYXhDb250ZW50TGVuZ3RoOiAtMSxcblxuICB2YWxpZGF0ZVN0YXR1czogZnVuY3Rpb24gdmFsaWRhdGVTdGF0dXMoc3RhdHVzKSB7XG4gICAgcmV0dXJuIHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwO1xuICB9XG59O1xuXG5kZWZhdWx0cy5oZWFkZXJzID0ge1xuICBjb21tb246IHtcbiAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKidcbiAgfVxufTtcblxudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB7fTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB1dGlscy5tZXJnZShERUZBVUxUX0NPTlRFTlRfVFlQRSk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWZhdWx0cztcbiIsInZhciBnO1xyXG5cclxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcclxuZyA9IChmdW5jdGlvbigpIHtcclxuXHRyZXR1cm4gdGhpcztcclxufSkoKTtcclxuXHJcbnRyeSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXHJcblx0ZyA9IGcgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpIHx8ICgxLCBldmFsKShcInRoaXNcIik7XHJcbn0gY2F0Y2ggKGUpIHtcclxuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxyXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xyXG59XHJcblxyXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXHJcbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXHJcbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZztcclxuIiwibW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdkaXYnKSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcbiIsImV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX3drcycpO1xuIiwidmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBhcnJheUluZGV4T2YgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpKGZhbHNlKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBuYW1lcykge1xuICB2YXIgTyA9IHRvSU9iamVjdChvYmplY3QpO1xuICB2YXIgaSA9IDA7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gTykgaWYgKGtleSAhPSBJRV9QUk9UTykgaGFzKE8sIGtleSkgJiYgcmVzdWx0LnB1c2goa2V5KTtcbiAgLy8gRG9uJ3QgZW51bSBidWcgJiBoaWRkZW4ga2V5c1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkgaWYgKGhhcyhPLCBrZXkgPSBuYW1lc1tpKytdKSkge1xuICAgIH5hcnJheUluZGV4T2YocmVzdWx0LCBrZXkpIHx8IHJlc3VsdC5wdXNoKGtleSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcykge1xuICBhbk9iamVjdChPKTtcbiAgdmFyIGtleXMgPSBnZXRLZXlzKFByb3BlcnRpZXMpO1xuICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gIHZhciBpID0gMDtcbiAgdmFyIFA7XG4gIHdoaWxlIChsZW5ndGggPiBpKSBkUC5mKE8sIFAgPSBrZXlzW2krK10sIFByb3BlcnRpZXNbUF0pO1xuICByZXR1cm4gTztcbn07XG4iLCIvLyBmYWxsYmFjayBmb3IgSUUxMSBidWdneSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB3aXRoIGlmcmFtZSBhbmQgd2luZG93XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmY7XG52YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxudmFyIHdpbmRvd05hbWVzID0gdHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNcbiAgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh3aW5kb3cpIDogW107XG5cbnZhciBnZXRXaW5kb3dOYW1lcyA9IGZ1bmN0aW9uIChpdCkge1xuICB0cnkge1xuICAgIHJldHVybiBnT1BOKGl0KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB3aW5kb3dOYW1lcy5zbGljZSgpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICByZXR1cm4gd2luZG93TmFtZXMgJiYgdG9TdHJpbmcuY2FsbChpdCkgPT0gJ1tvYmplY3QgV2luZG93XScgPyBnZXRXaW5kb3dOYW1lcyhpdCkgOiBnT1BOKHRvSU9iamVjdChpdCkpO1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDE5LjEuMi4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UsIC4uLilcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BTID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKTtcbnZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyICRhc3NpZ24gPSBPYmplY3QuYXNzaWduO1xuXG4vLyBzaG91bGQgd29yayB3aXRoIHN5bWJvbHMgYW5kIHNob3VsZCBoYXZlIGRldGVybWluaXN0aWMgcHJvcGVydHkgb3JkZXIgKFY4IGJ1Zylcbm1vZHVsZS5leHBvcnRzID0gISRhc3NpZ24gfHwgcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHZhciBBID0ge307XG4gIHZhciBCID0ge307XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICB2YXIgUyA9IFN5bWJvbCgpO1xuICB2YXIgSyA9ICdhYmNkZWZnaGlqa2xtbm9wcXJzdCc7XG4gIEFbU10gPSA3O1xuICBLLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7IEJba10gPSBrOyB9KTtcbiAgcmV0dXJuICRhc3NpZ24oe30sIEEpW1NdICE9IDcgfHwgT2JqZWN0LmtleXMoJGFzc2lnbih7fSwgQikpLmpvaW4oJycpICE9IEs7XG59KSA/IGZ1bmN0aW9uIGFzc2lnbih0YXJnZXQsIHNvdXJjZSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gIHZhciBUID0gdG9PYmplY3QodGFyZ2V0KTtcbiAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAxO1xuICB2YXIgZ2V0U3ltYm9scyA9IGdPUFMuZjtcbiAgdmFyIGlzRW51bSA9IHBJRS5mO1xuICB3aGlsZSAoYUxlbiA+IGluZGV4KSB7XG4gICAgdmFyIFMgPSBJT2JqZWN0KGFyZ3VtZW50c1tpbmRleCsrXSk7XG4gICAgdmFyIGtleXMgPSBnZXRTeW1ib2xzID8gZ2V0S2V5cyhTKS5jb25jYXQoZ2V0U3ltYm9scyhTKSkgOiBnZXRLZXlzKFMpO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgaiA9IDA7XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaikgaWYgKGlzRW51bS5jYWxsKFMsIGtleSA9IGtleXNbaisrXSkpIFRba2V5XSA9IFNba2V5XTtcbiAgfSByZXR1cm4gVDtcbn0gOiAkYXNzaWduO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGludm9rZSA9IHJlcXVpcmUoJy4vX2ludm9rZScpO1xudmFyIGFycmF5U2xpY2UgPSBbXS5zbGljZTtcbnZhciBmYWN0b3JpZXMgPSB7fTtcblxudmFyIGNvbnN0cnVjdCA9IGZ1bmN0aW9uIChGLCBsZW4sIGFyZ3MpIHtcbiAgaWYgKCEobGVuIGluIGZhY3RvcmllcykpIHtcbiAgICBmb3IgKHZhciBuID0gW10sIGkgPSAwOyBpIDwgbGVuOyBpKyspIG5baV0gPSAnYVsnICsgaSArICddJztcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICBmYWN0b3JpZXNbbGVuXSA9IEZ1bmN0aW9uKCdGLGEnLCAncmV0dXJuIG5ldyBGKCcgKyBuLmpvaW4oJywnKSArICcpJyk7XG4gIH0gcmV0dXJuIGZhY3Rvcmllc1tsZW5dKEYsIGFyZ3MpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBGdW5jdGlvbi5iaW5kIHx8IGZ1bmN0aW9uIGJpbmQodGhhdCAvKiAsIC4uLmFyZ3MgKi8pIHtcbiAgdmFyIGZuID0gYUZ1bmN0aW9uKHRoaXMpO1xuICB2YXIgcGFydEFyZ3MgPSBhcnJheVNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgdmFyIGJvdW5kID0gZnVuY3Rpb24gKC8qIGFyZ3MuLi4gKi8pIHtcbiAgICB2YXIgYXJncyA9IHBhcnRBcmdzLmNvbmNhdChhcnJheVNsaWNlLmNhbGwoYXJndW1lbnRzKSk7XG4gICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBib3VuZCA/IGNvbnN0cnVjdChmbiwgYXJncy5sZW5ndGgsIGFyZ3MpIDogaW52b2tlKGZuLCBhcmdzLCB0aGF0KTtcbiAgfTtcbiAgaWYgKGlzT2JqZWN0KGZuLnByb3RvdHlwZSkpIGJvdW5kLnByb3RvdHlwZSA9IGZuLnByb3RvdHlwZTtcbiAgcmV0dXJuIGJvdW5kO1xufTtcbiIsIi8vIGZhc3QgYXBwbHksIGh0dHA6Ly9qc3BlcmYubG5raXQuY29tL2Zhc3QtYXBwbHkvNVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIGFyZ3MsIHRoYXQpIHtcbiAgdmFyIHVuID0gdGhhdCA9PT0gdW5kZWZpbmVkO1xuICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgY2FzZSAwOiByZXR1cm4gdW4gPyBmbigpXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQpO1xuICAgIGNhc2UgMTogcmV0dXJuIHVuID8gZm4oYXJnc1swXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSk7XG4gICAgY2FzZSAyOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICBjYXNlIDM6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgIGNhc2UgNDogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSk7XG4gIH0gcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3MpO1xufTtcbiIsInZhciAkcGFyc2VJbnQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5wYXJzZUludDtcbnZhciAkdHJpbSA9IHJlcXVpcmUoJy4vX3N0cmluZy10cmltJykudHJpbTtcbnZhciB3cyA9IHJlcXVpcmUoJy4vX3N0cmluZy13cycpO1xudmFyIGhleCA9IC9eWy0rXT8wW3hYXS87XG5cbm1vZHVsZS5leHBvcnRzID0gJHBhcnNlSW50KHdzICsgJzA4JykgIT09IDggfHwgJHBhcnNlSW50KHdzICsgJzB4MTYnKSAhPT0gMjIgPyBmdW5jdGlvbiBwYXJzZUludChzdHIsIHJhZGl4KSB7XG4gIHZhciBzdHJpbmcgPSAkdHJpbShTdHJpbmcoc3RyKSwgMyk7XG4gIHJldHVybiAkcGFyc2VJbnQoc3RyaW5nLCAocmFkaXggPj4+IDApIHx8IChoZXgudGVzdChzdHJpbmcpID8gMTYgOiAxMCkpO1xufSA6ICRwYXJzZUludDtcbiIsInZhciAkcGFyc2VGbG9hdCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLnBhcnNlRmxvYXQ7XG52YXIgJHRyaW0gPSByZXF1aXJlKCcuL19zdHJpbmctdHJpbScpLnRyaW07XG5cbm1vZHVsZS5leHBvcnRzID0gMSAvICRwYXJzZUZsb2F0KHJlcXVpcmUoJy4vX3N0cmluZy13cycpICsgJy0wJykgIT09IC1JbmZpbml0eSA/IGZ1bmN0aW9uIHBhcnNlRmxvYXQoc3RyKSB7XG4gIHZhciBzdHJpbmcgPSAkdHJpbShTdHJpbmcoc3RyKSwgMyk7XG4gIHZhciByZXN1bHQgPSAkcGFyc2VGbG9hdChzdHJpbmcpO1xuICByZXR1cm4gcmVzdWx0ID09PSAwICYmIHN0cmluZy5jaGFyQXQoMCkgPT0gJy0nID8gLTAgOiByZXN1bHQ7XG59IDogJHBhcnNlRmxvYXQ7XG4iLCJ2YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgbXNnKSB7XG4gIGlmICh0eXBlb2YgaXQgIT0gJ251bWJlcicgJiYgY29mKGl0KSAhPSAnTnVtYmVyJykgdGhyb3cgVHlwZUVycm9yKG1zZyk7XG4gIHJldHVybiAraXQ7XG59O1xuIiwiLy8gMjAuMS4yLjMgTnVtYmVyLmlzSW50ZWdlcihudW1iZXIpXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzSW50ZWdlcihpdCkge1xuICByZXR1cm4gIWlzT2JqZWN0KGl0KSAmJiBpc0Zpbml0ZShpdCkgJiYgZmxvb3IoaXQpID09PSBpdDtcbn07XG4iLCIvLyAyMC4yLjIuMjAgTWF0aC5sb2cxcCh4KVxubW9kdWxlLmV4cG9ydHMgPSBNYXRoLmxvZzFwIHx8IGZ1bmN0aW9uIGxvZzFwKHgpIHtcbiAgcmV0dXJuICh4ID0gK3gpID4gLTFlLTggJiYgeCA8IDFlLTggPyB4IC0geCAqIHggLyAyIDogTWF0aC5sb2coMSArIHgpO1xufTtcbiIsIi8vIDIwLjIuMi4xNiBNYXRoLmZyb3VuZCh4KVxudmFyIHNpZ24gPSByZXF1aXJlKCcuL19tYXRoLXNpZ24nKTtcbnZhciBwb3cgPSBNYXRoLnBvdztcbnZhciBFUFNJTE9OID0gcG93KDIsIC01Mik7XG52YXIgRVBTSUxPTjMyID0gcG93KDIsIC0yMyk7XG52YXIgTUFYMzIgPSBwb3coMiwgMTI3KSAqICgyIC0gRVBTSUxPTjMyKTtcbnZhciBNSU4zMiA9IHBvdygyLCAtMTI2KTtcblxudmFyIHJvdW5kVGllc1RvRXZlbiA9IGZ1bmN0aW9uIChuKSB7XG4gIHJldHVybiBuICsgMSAvIEVQU0lMT04gLSAxIC8gRVBTSUxPTjtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gTWF0aC5mcm91bmQgfHwgZnVuY3Rpb24gZnJvdW5kKHgpIHtcbiAgdmFyICRhYnMgPSBNYXRoLmFicyh4KTtcbiAgdmFyICRzaWduID0gc2lnbih4KTtcbiAgdmFyIGEsIHJlc3VsdDtcbiAgaWYgKCRhYnMgPCBNSU4zMikgcmV0dXJuICRzaWduICogcm91bmRUaWVzVG9FdmVuKCRhYnMgLyBNSU4zMiAvIEVQU0lMT04zMikgKiBNSU4zMiAqIEVQU0lMT04zMjtcbiAgYSA9ICgxICsgRVBTSUxPTjMyIC8gRVBTSUxPTikgKiAkYWJzO1xuICByZXN1bHQgPSBhIC0gKGEgLSAkYWJzKTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICBpZiAocmVzdWx0ID4gTUFYMzIgfHwgcmVzdWx0ICE9IHJlc3VsdCkgcmV0dXJuICRzaWduICogSW5maW5pdHk7XG4gIHJldHVybiAkc2lnbiAqIHJlc3VsdDtcbn07XG4iLCIvLyBjYWxsIHNvbWV0aGluZyBvbiBpdGVyYXRvciBzdGVwIHdpdGggc2FmZSBjbG9zaW5nIG9uIGVycm9yXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhdG9yLCBmbiwgdmFsdWUsIGVudHJpZXMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZW50cmllcyA/IGZuKGFuT2JqZWN0KHZhbHVlKVswXSwgdmFsdWVbMV0pIDogZm4odmFsdWUpO1xuICAvLyA3LjQuNiBJdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCBjb21wbGV0aW9uKVxuICB9IGNhdGNoIChlKSB7XG4gICAgdmFyIHJldCA9IGl0ZXJhdG9yWydyZXR1cm4nXTtcbiAgICBpZiAocmV0ICE9PSB1bmRlZmluZWQpIGFuT2JqZWN0KHJldC5jYWxsKGl0ZXJhdG9yKSk7XG4gICAgdGhyb3cgZTtcbiAgfVxufTtcbiIsInZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRoYXQsIGNhbGxiYWNrZm4sIGFMZW4sIG1lbW8sIGlzUmlnaHQpIHtcbiAgYUZ1bmN0aW9uKGNhbGxiYWNrZm4pO1xuICB2YXIgTyA9IHRvT2JqZWN0KHRoYXQpO1xuICB2YXIgc2VsZiA9IElPYmplY3QoTyk7XG4gIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gIHZhciBpbmRleCA9IGlzUmlnaHQgPyBsZW5ndGggLSAxIDogMDtcbiAgdmFyIGkgPSBpc1JpZ2h0ID8gLTEgOiAxO1xuICBpZiAoYUxlbiA8IDIpIGZvciAoOzspIHtcbiAgICBpZiAoaW5kZXggaW4gc2VsZikge1xuICAgICAgbWVtbyA9IHNlbGZbaW5kZXhdO1xuICAgICAgaW5kZXggKz0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBpbmRleCArPSBpO1xuICAgIGlmIChpc1JpZ2h0ID8gaW5kZXggPCAwIDogbGVuZ3RoIDw9IGluZGV4KSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ1JlZHVjZSBvZiBlbXB0eSBhcnJheSB3aXRoIG5vIGluaXRpYWwgdmFsdWUnKTtcbiAgICB9XG4gIH1cbiAgZm9yICg7aXNSaWdodCA/IGluZGV4ID49IDAgOiBsZW5ndGggPiBpbmRleDsgaW5kZXggKz0gaSkgaWYgKGluZGV4IGluIHNlbGYpIHtcbiAgICBtZW1vID0gY2FsbGJhY2tmbihtZW1vLCBzZWxmW2luZGV4XSwgaW5kZXgsIE8pO1xuICB9XG4gIHJldHVybiBtZW1vO1xufTtcbiIsIi8vIDIyLjEuMy4zIEFycmF5LnByb3RvdHlwZS5jb3B5V2l0aGluKHRhcmdldCwgc3RhcnQsIGVuZCA9IHRoaXMubGVuZ3RoKVxuJ3VzZSBzdHJpY3QnO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFtdLmNvcHlXaXRoaW4gfHwgZnVuY3Rpb24gY29weVdpdGhpbih0YXJnZXQgLyogPSAwICovLCBzdGFydCAvKiA9IDAsIGVuZCA9IEBsZW5ndGggKi8pIHtcbiAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgdmFyIGxlbiA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgdmFyIHRvID0gdG9BYnNvbHV0ZUluZGV4KHRhcmdldCwgbGVuKTtcbiAgdmFyIGZyb20gPSB0b0Fic29sdXRlSW5kZXgoc3RhcnQsIGxlbik7XG4gIHZhciBlbmQgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcbiAgdmFyIGNvdW50ID0gTWF0aC5taW4oKGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuKSkgLSBmcm9tLCBsZW4gLSB0byk7XG4gIHZhciBpbmMgPSAxO1xuICBpZiAoZnJvbSA8IHRvICYmIHRvIDwgZnJvbSArIGNvdW50KSB7XG4gICAgaW5jID0gLTE7XG4gICAgZnJvbSArPSBjb3VudCAtIDE7XG4gICAgdG8gKz0gY291bnQgLSAxO1xuICB9XG4gIHdoaWxlIChjb3VudC0tID4gMCkge1xuICAgIGlmIChmcm9tIGluIE8pIE9bdG9dID0gT1tmcm9tXTtcbiAgICBlbHNlIGRlbGV0ZSBPW3RvXTtcbiAgICB0byArPSBpbmM7XG4gICAgZnJvbSArPSBpbmM7XG4gIH0gcmV0dXJuIE87XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZG9uZSwgdmFsdWUpIHtcbiAgcmV0dXJuIHsgdmFsdWU6IHZhbHVlLCBkb25lOiAhIWRvbmUgfTtcbn07XG4iLCIvLyAyMS4yLjUuMyBnZXQgUmVnRXhwLnByb3RvdHlwZS5mbGFncygpXG5pZiAocmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAvLi9nLmZsYWdzICE9ICdnJykgcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZihSZWdFeHAucHJvdG90eXBlLCAnZmxhZ3MnLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiByZXF1aXJlKCcuL19mbGFncycpXG59KTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4geyBlOiBmYWxzZSwgdjogZXhlYygpIH07XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4geyBlOiB0cnVlLCB2OiBlIH07XG4gIH1cbn07XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gcmVxdWlyZSgnLi9fbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDLCB4KSB7XG4gIGFuT2JqZWN0KEMpO1xuICBpZiAoaXNPYmplY3QoeCkgJiYgeC5jb25zdHJ1Y3RvciA9PT0gQykgcmV0dXJuIHg7XG4gIHZhciBwcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5LmYoQyk7XG4gIHZhciByZXNvbHZlID0gcHJvbWlzZUNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgcmVzb2x2ZSh4KTtcbiAgcmV0dXJuIHByb21pc2VDYXBhYmlsaXR5LnByb21pc2U7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHN0cm9uZyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24tc3Ryb25nJyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgTUFQID0gJ01hcCc7XG5cbi8vIDIzLjEgTWFwIE9iamVjdHNcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKE1BUCwgZnVuY3Rpb24gKGdldCkge1xuICByZXR1cm4gZnVuY3Rpb24gTWFwKCkgeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIHtcbiAgLy8gMjMuMS4zLjYgTWFwLnByb3RvdHlwZS5nZXQoa2V5KVxuICBnZXQ6IGZ1bmN0aW9uIGdldChrZXkpIHtcbiAgICB2YXIgZW50cnkgPSBzdHJvbmcuZ2V0RW50cnkodmFsaWRhdGUodGhpcywgTUFQKSwga2V5KTtcbiAgICByZXR1cm4gZW50cnkgJiYgZW50cnkudjtcbiAgfSxcbiAgLy8gMjMuMS4zLjkgTWFwLnByb3RvdHlwZS5zZXQoa2V5LCB2YWx1ZSlcbiAgc2V0OiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkge1xuICAgIHJldHVybiBzdHJvbmcuZGVmKHZhbGlkYXRlKHRoaXMsIE1BUCksIGtleSA9PT0gMCA/IDAgOiBrZXksIHZhbHVlKTtcbiAgfVxufSwgc3Ryb25nLCB0cnVlKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcbnZhciAkaXRlckRlZmluZSA9IHJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJyk7XG52YXIgc3RlcCA9IHJlcXVpcmUoJy4vX2l0ZXItc3RlcCcpO1xudmFyIHNldFNwZWNpZXMgPSByZXF1aXJlKCcuL19zZXQtc3BlY2llcycpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBmYXN0S2V5ID0gcmVxdWlyZSgnLi9fbWV0YScpLmZhc3RLZXk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgU0laRSA9IERFU0NSSVBUT1JTID8gJ19zJyA6ICdzaXplJztcblxudmFyIGdldEVudHJ5ID0gZnVuY3Rpb24gKHRoYXQsIGtleSkge1xuICAvLyBmYXN0IGNhc2VcbiAgdmFyIGluZGV4ID0gZmFzdEtleShrZXkpO1xuICB2YXIgZW50cnk7XG4gIGlmIChpbmRleCAhPT0gJ0YnKSByZXR1cm4gdGhhdC5faVtpbmRleF07XG4gIC8vIGZyb3plbiBvYmplY3QgY2FzZVxuICBmb3IgKGVudHJ5ID0gdGhhdC5fZjsgZW50cnk7IGVudHJ5ID0gZW50cnkubikge1xuICAgIGlmIChlbnRyeS5rID09IGtleSkgcmV0dXJuIGVudHJ5O1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0Q29uc3RydWN0b3I6IGZ1bmN0aW9uICh3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKSB7XG4gICAgdmFyIEMgPSB3cmFwcGVyKGZ1bmN0aW9uICh0aGF0LCBpdGVyYWJsZSkge1xuICAgICAgYW5JbnN0YW5jZSh0aGF0LCBDLCBOQU1FLCAnX2knKTtcbiAgICAgIHRoYXQuX3QgPSBOQU1FOyAgICAgICAgIC8vIGNvbGxlY3Rpb24gdHlwZVxuICAgICAgdGhhdC5faSA9IGNyZWF0ZShudWxsKTsgLy8gaW5kZXhcbiAgICAgIHRoYXQuX2YgPSB1bmRlZmluZWQ7ICAgIC8vIGZpcnN0IGVudHJ5XG4gICAgICB0aGF0Ll9sID0gdW5kZWZpbmVkOyAgICAvLyBsYXN0IGVudHJ5XG4gICAgICB0aGF0W1NJWkVdID0gMDsgICAgICAgICAvLyBzaXplXG4gICAgICBpZiAoaXRlcmFibGUgIT0gdW5kZWZpbmVkKSBmb3JPZihpdGVyYWJsZSwgSVNfTUFQLCB0aGF0W0FEREVSXSwgdGhhdCk7XG4gICAgfSk7XG4gICAgcmVkZWZpbmVBbGwoQy5wcm90b3R5cGUsIHtcbiAgICAgIC8vIDIzLjEuMy4xIE1hcC5wcm90b3R5cGUuY2xlYXIoKVxuICAgICAgLy8gMjMuMi4zLjIgU2V0LnByb3RvdHlwZS5jbGVhcigpXG4gICAgICBjbGVhcjogZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgICAgIGZvciAodmFyIHRoYXQgPSB2YWxpZGF0ZSh0aGlzLCBOQU1FKSwgZGF0YSA9IHRoYXQuX2ksIGVudHJ5ID0gdGhhdC5fZjsgZW50cnk7IGVudHJ5ID0gZW50cnkubikge1xuICAgICAgICAgIGVudHJ5LnIgPSB0cnVlO1xuICAgICAgICAgIGlmIChlbnRyeS5wKSBlbnRyeS5wID0gZW50cnkucC5uID0gdW5kZWZpbmVkO1xuICAgICAgICAgIGRlbGV0ZSBkYXRhW2VudHJ5LmldO1xuICAgICAgICB9XG4gICAgICAgIHRoYXQuX2YgPSB0aGF0Ll9sID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGF0W1NJWkVdID0gMDtcbiAgICAgIH0sXG4gICAgICAvLyAyMy4xLjMuMyBNYXAucHJvdG90eXBlLmRlbGV0ZShrZXkpXG4gICAgICAvLyAyMy4yLjMuNCBTZXQucHJvdG90eXBlLmRlbGV0ZSh2YWx1ZSlcbiAgICAgICdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHZhciB0aGF0ID0gdmFsaWRhdGUodGhpcywgTkFNRSk7XG4gICAgICAgIHZhciBlbnRyeSA9IGdldEVudHJ5KHRoYXQsIGtleSk7XG4gICAgICAgIGlmIChlbnRyeSkge1xuICAgICAgICAgIHZhciBuZXh0ID0gZW50cnkubjtcbiAgICAgICAgICB2YXIgcHJldiA9IGVudHJ5LnA7XG4gICAgICAgICAgZGVsZXRlIHRoYXQuX2lbZW50cnkuaV07XG4gICAgICAgICAgZW50cnkuciA9IHRydWU7XG4gICAgICAgICAgaWYgKHByZXYpIHByZXYubiA9IG5leHQ7XG4gICAgICAgICAgaWYgKG5leHQpIG5leHQucCA9IHByZXY7XG4gICAgICAgICAgaWYgKHRoYXQuX2YgPT0gZW50cnkpIHRoYXQuX2YgPSBuZXh0O1xuICAgICAgICAgIGlmICh0aGF0Ll9sID09IGVudHJ5KSB0aGF0Ll9sID0gcHJldjtcbiAgICAgICAgICB0aGF0W1NJWkVdLS07XG4gICAgICAgIH0gcmV0dXJuICEhZW50cnk7XG4gICAgICB9LFxuICAgICAgLy8gMjMuMi4zLjYgU2V0LnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4sIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gICAgICAvLyAyMy4xLjMuNSBNYXAucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbiAgICAgIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoYXQgPSB1bmRlZmluZWQgKi8pIHtcbiAgICAgICAgdmFsaWRhdGUodGhpcywgTkFNRSk7XG4gICAgICAgIHZhciBmID0gY3R4KGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCAzKTtcbiAgICAgICAgdmFyIGVudHJ5O1xuICAgICAgICB3aGlsZSAoZW50cnkgPSBlbnRyeSA/IGVudHJ5Lm4gOiB0aGlzLl9mKSB7XG4gICAgICAgICAgZihlbnRyeS52LCBlbnRyeS5rLCB0aGlzKTtcbiAgICAgICAgICAvLyByZXZlcnQgdG8gdGhlIGxhc3QgZXhpc3RpbmcgZW50cnlcbiAgICAgICAgICB3aGlsZSAoZW50cnkgJiYgZW50cnkucikgZW50cnkgPSBlbnRyeS5wO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgLy8gMjMuMS4zLjcgTWFwLnByb3RvdHlwZS5oYXMoa2V5KVxuICAgICAgLy8gMjMuMi4zLjcgU2V0LnByb3RvdHlwZS5oYXModmFsdWUpXG4gICAgICBoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpIHtcbiAgICAgICAgcmV0dXJuICEhZ2V0RW50cnkodmFsaWRhdGUodGhpcywgTkFNRSksIGtleSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKERFU0NSSVBUT1JTKSBkUChDLnByb3RvdHlwZSwgJ3NpemUnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHZhbGlkYXRlKHRoaXMsIE5BTUUpW1NJWkVdO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBDO1xuICB9LFxuICBkZWY6IGZ1bmN0aW9uICh0aGF0LCBrZXksIHZhbHVlKSB7XG4gICAgdmFyIGVudHJ5ID0gZ2V0RW50cnkodGhhdCwga2V5KTtcbiAgICB2YXIgcHJldiwgaW5kZXg7XG4gICAgLy8gY2hhbmdlIGV4aXN0aW5nIGVudHJ5XG4gICAgaWYgKGVudHJ5KSB7XG4gICAgICBlbnRyeS52ID0gdmFsdWU7XG4gICAgLy8gY3JlYXRlIG5ldyBlbnRyeVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGF0Ll9sID0gZW50cnkgPSB7XG4gICAgICAgIGk6IGluZGV4ID0gZmFzdEtleShrZXksIHRydWUpLCAvLyA8LSBpbmRleFxuICAgICAgICBrOiBrZXksICAgICAgICAgICAgICAgICAgICAgICAgLy8gPC0ga2V5XG4gICAgICAgIHY6IHZhbHVlLCAgICAgICAgICAgICAgICAgICAgICAvLyA8LSB2YWx1ZVxuICAgICAgICBwOiBwcmV2ID0gdGhhdC5fbCwgICAgICAgICAgICAgLy8gPC0gcHJldmlvdXMgZW50cnlcbiAgICAgICAgbjogdW5kZWZpbmVkLCAgICAgICAgICAgICAgICAgIC8vIDwtIG5leHQgZW50cnlcbiAgICAgICAgcjogZmFsc2UgICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIHJlbW92ZWRcbiAgICAgIH07XG4gICAgICBpZiAoIXRoYXQuX2YpIHRoYXQuX2YgPSBlbnRyeTtcbiAgICAgIGlmIChwcmV2KSBwcmV2Lm4gPSBlbnRyeTtcbiAgICAgIHRoYXRbU0laRV0rKztcbiAgICAgIC8vIGFkZCB0byBpbmRleFxuICAgICAgaWYgKGluZGV4ICE9PSAnRicpIHRoYXQuX2lbaW5kZXhdID0gZW50cnk7XG4gICAgfSByZXR1cm4gdGhhdDtcbiAgfSxcbiAgZ2V0RW50cnk6IGdldEVudHJ5LFxuICBzZXRTdHJvbmc6IGZ1bmN0aW9uIChDLCBOQU1FLCBJU19NQVApIHtcbiAgICAvLyBhZGQgLmtleXMsIC52YWx1ZXMsIC5lbnRyaWVzLCBbQEBpdGVyYXRvcl1cbiAgICAvLyAyMy4xLjMuNCwgMjMuMS4zLjgsIDIzLjEuMy4xMSwgMjMuMS4zLjEyLCAyMy4yLjMuNSwgMjMuMi4zLjgsIDIzLjIuMy4xMCwgMjMuMi4zLjExXG4gICAgJGl0ZXJEZWZpbmUoQywgTkFNRSwgZnVuY3Rpb24gKGl0ZXJhdGVkLCBraW5kKSB7XG4gICAgICB0aGlzLl90ID0gdmFsaWRhdGUoaXRlcmF0ZWQsIE5BTUUpOyAvLyB0YXJnZXRcbiAgICAgIHRoaXMuX2sgPSBraW5kOyAgICAgICAgICAgICAgICAgICAgIC8vIGtpbmRcbiAgICAgIHRoaXMuX2wgPSB1bmRlZmluZWQ7ICAgICAgICAgICAgICAgIC8vIHByZXZpb3VzXG4gICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgdmFyIGtpbmQgPSB0aGF0Ll9rO1xuICAgICAgdmFyIGVudHJ5ID0gdGhhdC5fbDtcbiAgICAgIC8vIHJldmVydCB0byB0aGUgbGFzdCBleGlzdGluZyBlbnRyeVxuICAgICAgd2hpbGUgKGVudHJ5ICYmIGVudHJ5LnIpIGVudHJ5ID0gZW50cnkucDtcbiAgICAgIC8vIGdldCBuZXh0IGVudHJ5XG4gICAgICBpZiAoIXRoYXQuX3QgfHwgISh0aGF0Ll9sID0gZW50cnkgPSBlbnRyeSA/IGVudHJ5Lm4gOiB0aGF0Ll90Ll9mKSkge1xuICAgICAgICAvLyBvciBmaW5pc2ggdGhlIGl0ZXJhdGlvblxuICAgICAgICB0aGF0Ll90ID0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gc3RlcCgxKTtcbiAgICAgIH1cbiAgICAgIC8vIHJldHVybiBzdGVwIGJ5IGtpbmRcbiAgICAgIGlmIChraW5kID09ICdrZXlzJykgcmV0dXJuIHN0ZXAoMCwgZW50cnkuayk7XG4gICAgICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIHN0ZXAoMCwgZW50cnkudik7XG4gICAgICByZXR1cm4gc3RlcCgwLCBbZW50cnkuaywgZW50cnkudl0pO1xuICAgIH0sIElTX01BUCA/ICdlbnRyaWVzJyA6ICd2YWx1ZXMnLCAhSVNfTUFQLCB0cnVlKTtcblxuICAgIC8vIGFkZCBbQEBzcGVjaWVzXSwgMjMuMS4yLjIsIDIzLjIuMi4yXG4gICAgc2V0U3BlY2llcyhOQU1FKTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBzdHJvbmcgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXN0cm9uZycpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIFNFVCA9ICdTZXQnO1xuXG4vLyAyMy4yIFNldCBPYmplY3RzXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKShTRVQsIGZ1bmN0aW9uIChnZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFNldCgpIHsgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7IH07XG59LCB7XG4gIC8vIDIzLjIuMy4xIFNldC5wcm90b3R5cGUuYWRkKHZhbHVlKVxuICBhZGQ6IGZ1bmN0aW9uIGFkZCh2YWx1ZSkge1xuICAgIHJldHVybiBzdHJvbmcuZGVmKHZhbGlkYXRlKHRoaXMsIFNFVCksIHZhbHVlID0gdmFsdWUgPT09IDAgPyAwIDogdmFsdWUsIHZhbHVlKTtcbiAgfVxufSwgc3Ryb25nKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBlYWNoID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDApO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpO1xudmFyIGFzc2lnbiA9IHJlcXVpcmUoJy4vX29iamVjdC1hc3NpZ24nKTtcbnZhciB3ZWFrID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi13ZWFrJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgV0VBS19NQVAgPSAnV2Vha01hcCc7XG52YXIgZ2V0V2VhayA9IG1ldGEuZ2V0V2VhaztcbnZhciBpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlO1xudmFyIHVuY2F1Z2h0RnJvemVuU3RvcmUgPSB3ZWFrLnVmc3RvcmU7XG52YXIgdG1wID0ge307XG52YXIgSW50ZXJuYWxNYXA7XG5cbnZhciB3cmFwcGVyID0gZnVuY3Rpb24gKGdldCkge1xuICByZXR1cm4gZnVuY3Rpb24gV2Vha01hcCgpIHtcbiAgICByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTtcbiAgfTtcbn07XG5cbnZhciBtZXRob2RzID0ge1xuICAvLyAyMy4zLjMuMyBXZWFrTWFwLnByb3RvdHlwZS5nZXQoa2V5KVxuICBnZXQ6IGZ1bmN0aW9uIGdldChrZXkpIHtcbiAgICBpZiAoaXNPYmplY3Qoa2V5KSkge1xuICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrKGtleSk7XG4gICAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodmFsaWRhdGUodGhpcywgV0VBS19NQVApKS5nZXQoa2V5KTtcbiAgICAgIHJldHVybiBkYXRhID8gZGF0YVt0aGlzLl9pXSA6IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0sXG4gIC8vIDIzLjMuMy41IFdlYWtNYXAucHJvdG90eXBlLnNldChrZXksIHZhbHVlKVxuICBzZXQ6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKSB7XG4gICAgcmV0dXJuIHdlYWsuZGVmKHZhbGlkYXRlKHRoaXMsIFdFQUtfTUFQKSwga2V5LCB2YWx1ZSk7XG4gIH1cbn07XG5cbi8vIDIzLjMgV2Vha01hcCBPYmplY3RzXG52YXIgJFdlYWtNYXAgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKShXRUFLX01BUCwgd3JhcHBlciwgbWV0aG9kcywgd2VhaywgdHJ1ZSwgdHJ1ZSk7XG5cbi8vIElFMTEgV2Vha01hcCBmcm96ZW4ga2V5cyBmaXhcbmlmIChmYWlscyhmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgJFdlYWtNYXAoKS5zZXQoKE9iamVjdC5mcmVlemUgfHwgT2JqZWN0KSh0bXApLCA3KS5nZXQodG1wKSAhPSA3OyB9KSkge1xuICBJbnRlcm5hbE1hcCA9IHdlYWsuZ2V0Q29uc3RydWN0b3Iod3JhcHBlciwgV0VBS19NQVApO1xuICBhc3NpZ24oSW50ZXJuYWxNYXAucHJvdG90eXBlLCBtZXRob2RzKTtcbiAgbWV0YS5ORUVEID0gdHJ1ZTtcbiAgZWFjaChbJ2RlbGV0ZScsICdoYXMnLCAnZ2V0JywgJ3NldCddLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIHByb3RvID0gJFdlYWtNYXAucHJvdG90eXBlO1xuICAgIHZhciBtZXRob2QgPSBwcm90b1trZXldO1xuICAgIHJlZGVmaW5lKHByb3RvLCBrZXksIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAvLyBzdG9yZSBmcm96ZW4gb2JqZWN0cyBvbiBpbnRlcm5hbCB3ZWFrbWFwIHNoaW1cbiAgICAgIGlmIChpc09iamVjdChhKSAmJiAhaXNFeHRlbnNpYmxlKGEpKSB7XG4gICAgICAgIGlmICghdGhpcy5fZikgdGhpcy5fZiA9IG5ldyBJbnRlcm5hbE1hcCgpO1xuICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5fZltrZXldKGEsIGIpO1xuICAgICAgICByZXR1cm4ga2V5ID09ICdzZXQnID8gdGhpcyA6IHJlc3VsdDtcbiAgICAgIC8vIHN0b3JlIGFsbCB0aGUgcmVzdCBvbiBuYXRpdmUgd2Vha21hcFxuICAgICAgfSByZXR1cm4gbWV0aG9kLmNhbGwodGhpcywgYSwgYik7XG4gICAgfSk7XG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJyk7XG52YXIgZ2V0V2VhayA9IHJlcXVpcmUoJy4vX21ldGEnKS5nZXRXZWFrO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyIGNyZWF0ZUFycmF5TWV0aG9kID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpO1xudmFyICRoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBhcnJheUZpbmQgPSBjcmVhdGVBcnJheU1ldGhvZCg1KTtcbnZhciBhcnJheUZpbmRJbmRleCA9IGNyZWF0ZUFycmF5TWV0aG9kKDYpO1xudmFyIGlkID0gMDtcblxuLy8gZmFsbGJhY2sgZm9yIHVuY2F1Z2h0IGZyb3plbiBrZXlzXG52YXIgdW5jYXVnaHRGcm96ZW5TdG9yZSA9IGZ1bmN0aW9uICh0aGF0KSB7XG4gIHJldHVybiB0aGF0Ll9sIHx8ICh0aGF0Ll9sID0gbmV3IFVuY2F1Z2h0RnJvemVuU3RvcmUoKSk7XG59O1xudmFyIFVuY2F1Z2h0RnJvemVuU3RvcmUgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuYSA9IFtdO1xufTtcbnZhciBmaW5kVW5jYXVnaHRGcm96ZW4gPSBmdW5jdGlvbiAoc3RvcmUsIGtleSkge1xuICByZXR1cm4gYXJyYXlGaW5kKHN0b3JlLmEsIGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBpdFswXSA9PT0ga2V5O1xuICB9KTtcbn07XG5VbmNhdWdodEZyb3plblN0b3JlLnByb3RvdHlwZSA9IHtcbiAgZ2V0OiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIGVudHJ5ID0gZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gICAgaWYgKGVudHJ5KSByZXR1cm4gZW50cnlbMV07XG4gIH0sXG4gIGhhczogZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiAhIWZpbmRVbmNhdWdodEZyb3plbih0aGlzLCBrZXkpO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgdmFyIGVudHJ5ID0gZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gICAgaWYgKGVudHJ5KSBlbnRyeVsxXSA9IHZhbHVlO1xuICAgIGVsc2UgdGhpcy5hLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgfSxcbiAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgaW5kZXggPSBhcnJheUZpbmRJbmRleCh0aGlzLmEsIGZ1bmN0aW9uIChpdCkge1xuICAgICAgcmV0dXJuIGl0WzBdID09PSBrZXk7XG4gICAgfSk7XG4gICAgaWYgKH5pbmRleCkgdGhpcy5hLnNwbGljZShpbmRleCwgMSk7XG4gICAgcmV0dXJuICEhfmluZGV4O1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0Q29uc3RydWN0b3I6IGZ1bmN0aW9uICh3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKSB7XG4gICAgdmFyIEMgPSB3cmFwcGVyKGZ1bmN0aW9uICh0aGF0LCBpdGVyYWJsZSkge1xuICAgICAgYW5JbnN0YW5jZSh0aGF0LCBDLCBOQU1FLCAnX2knKTtcbiAgICAgIHRoYXQuX3QgPSBOQU1FOyAgICAgIC8vIGNvbGxlY3Rpb24gdHlwZVxuICAgICAgdGhhdC5faSA9IGlkKys7ICAgICAgLy8gY29sbGVjdGlvbiBpZFxuICAgICAgdGhhdC5fbCA9IHVuZGVmaW5lZDsgLy8gbGVhayBzdG9yZSBmb3IgdW5jYXVnaHQgZnJvemVuIG9iamVjdHNcbiAgICAgIGlmIChpdGVyYWJsZSAhPSB1bmRlZmluZWQpIGZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRoYXRbQURERVJdLCB0aGF0KTtcbiAgICB9KTtcbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwge1xuICAgICAgLy8gMjMuMy4zLjIgV2Vha01hcC5wcm90b3R5cGUuZGVsZXRlKGtleSlcbiAgICAgIC8vIDIzLjQuMy4zIFdlYWtTZXQucHJvdG90eXBlLmRlbGV0ZSh2YWx1ZSlcbiAgICAgICdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmICghaXNPYmplY3Qoa2V5KSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICB2YXIgZGF0YSA9IGdldFdlYWsoa2V5KTtcbiAgICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHZhbGlkYXRlKHRoaXMsIE5BTUUpKVsnZGVsZXRlJ10oa2V5KTtcbiAgICAgICAgcmV0dXJuIGRhdGEgJiYgJGhhcyhkYXRhLCB0aGlzLl9pKSAmJiBkZWxldGUgZGF0YVt0aGlzLl9pXTtcbiAgICAgIH0sXG4gICAgICAvLyAyMy4zLjMuNCBXZWFrTWFwLnByb3RvdHlwZS5oYXMoa2V5KVxuICAgICAgLy8gMjMuNC4zLjQgV2Vha1NldC5wcm90b3R5cGUuaGFzKHZhbHVlKVxuICAgICAgaGFzOiBmdW5jdGlvbiBoYXMoa2V5KSB7XG4gICAgICAgIGlmICghaXNPYmplY3Qoa2V5KSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICB2YXIgZGF0YSA9IGdldFdlYWsoa2V5KTtcbiAgICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHZhbGlkYXRlKHRoaXMsIE5BTUUpKS5oYXMoa2V5KTtcbiAgICAgICAgcmV0dXJuIGRhdGEgJiYgJGhhcyhkYXRhLCB0aGlzLl9pKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gQztcbiAgfSxcbiAgZGVmOiBmdW5jdGlvbiAodGhhdCwga2V5LCB2YWx1ZSkge1xuICAgIHZhciBkYXRhID0gZ2V0V2Vhayhhbk9iamVjdChrZXkpLCB0cnVlKTtcbiAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgdW5jYXVnaHRGcm96ZW5TdG9yZSh0aGF0KS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgZWxzZSBkYXRhW3RoYXQuX2ldID0gdmFsdWU7XG4gICAgcmV0dXJuIHRoYXQ7XG4gIH0sXG4gIHVmc3RvcmU6IHVuY2F1Z2h0RnJvemVuU3RvcmVcbn07XG4iLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10b2luZGV4XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIDA7XG4gIHZhciBudW1iZXIgPSB0b0ludGVnZXIoaXQpO1xuICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgobnVtYmVyKTtcbiAgaWYgKG51bWJlciAhPT0gbGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBsZW5ndGghJyk7XG4gIHJldHVybiBsZW5ndGg7XG59O1xuIiwiLy8gYWxsIG9iamVjdCBrZXlzLCBpbmNsdWRlcyBub24tZW51bWVyYWJsZSBhbmQgc3ltYm9sc1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpO1xudmFyIGdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgUmVmbGVjdCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLlJlZmxlY3Q7XG5tb2R1bGUuZXhwb3J0cyA9IFJlZmxlY3QgJiYgUmVmbGVjdC5vd25LZXlzIHx8IGZ1bmN0aW9uIG93bktleXMoaXQpIHtcbiAgdmFyIGtleXMgPSBnT1BOLmYoYW5PYmplY3QoaXQpKTtcbiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIHJldHVybiBnZXRTeW1ib2xzID8ga2V5cy5jb25jYXQoZ2V0U3ltYm9scyhpdCkpIDoga2V5cztcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLWZsYXRNYXAvI3NlYy1GbGF0dGVuSW50b0FycmF5XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vX2lzLWFycmF5Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIElTX0NPTkNBVF9TUFJFQURBQkxFID0gcmVxdWlyZSgnLi9fd2tzJykoJ2lzQ29uY2F0U3ByZWFkYWJsZScpO1xuXG5mdW5jdGlvbiBmbGF0dGVuSW50b0FycmF5KHRhcmdldCwgb3JpZ2luYWwsIHNvdXJjZSwgc291cmNlTGVuLCBzdGFydCwgZGVwdGgsIG1hcHBlciwgdGhpc0FyZykge1xuICB2YXIgdGFyZ2V0SW5kZXggPSBzdGFydDtcbiAgdmFyIHNvdXJjZUluZGV4ID0gMDtcbiAgdmFyIG1hcEZuID0gbWFwcGVyID8gY3R4KG1hcHBlciwgdGhpc0FyZywgMykgOiBmYWxzZTtcbiAgdmFyIGVsZW1lbnQsIHNwcmVhZGFibGU7XG5cbiAgd2hpbGUgKHNvdXJjZUluZGV4IDwgc291cmNlTGVuKSB7XG4gICAgaWYgKHNvdXJjZUluZGV4IGluIHNvdXJjZSkge1xuICAgICAgZWxlbWVudCA9IG1hcEZuID8gbWFwRm4oc291cmNlW3NvdXJjZUluZGV4XSwgc291cmNlSW5kZXgsIG9yaWdpbmFsKSA6IHNvdXJjZVtzb3VyY2VJbmRleF07XG5cbiAgICAgIHNwcmVhZGFibGUgPSBmYWxzZTtcbiAgICAgIGlmIChpc09iamVjdChlbGVtZW50KSkge1xuICAgICAgICBzcHJlYWRhYmxlID0gZWxlbWVudFtJU19DT05DQVRfU1BSRUFEQUJMRV07XG4gICAgICAgIHNwcmVhZGFibGUgPSBzcHJlYWRhYmxlICE9PSB1bmRlZmluZWQgPyAhIXNwcmVhZGFibGUgOiBpc0FycmF5KGVsZW1lbnQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3ByZWFkYWJsZSAmJiBkZXB0aCA+IDApIHtcbiAgICAgICAgdGFyZ2V0SW5kZXggPSBmbGF0dGVuSW50b0FycmF5KHRhcmdldCwgb3JpZ2luYWwsIGVsZW1lbnQsIHRvTGVuZ3RoKGVsZW1lbnQubGVuZ3RoKSwgdGFyZ2V0SW5kZXgsIGRlcHRoIC0gMSkgLSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHRhcmdldEluZGV4ID49IDB4MWZmZmZmZmZmZmZmZmYpIHRocm93IFR5cGVFcnJvcigpO1xuICAgICAgICB0YXJnZXRbdGFyZ2V0SW5kZXhdID0gZWxlbWVudDtcbiAgICAgIH1cblxuICAgICAgdGFyZ2V0SW5kZXgrKztcbiAgICB9XG4gICAgc291cmNlSW5kZXgrKztcbiAgfVxuICByZXR1cm4gdGFyZ2V0SW5kZXg7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZmxhdHRlbkludG9BcnJheTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXN0cmluZy1wYWQtc3RhcnQtZW5kXG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciByZXBlYXQgPSByZXF1aXJlKCcuL19zdHJpbmctcmVwZWF0Jyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGhhdCwgbWF4TGVuZ3RoLCBmaWxsU3RyaW5nLCBsZWZ0KSB7XG4gIHZhciBTID0gU3RyaW5nKGRlZmluZWQodGhhdCkpO1xuICB2YXIgc3RyaW5nTGVuZ3RoID0gUy5sZW5ndGg7XG4gIHZhciBmaWxsU3RyID0gZmlsbFN0cmluZyA9PT0gdW5kZWZpbmVkID8gJyAnIDogU3RyaW5nKGZpbGxTdHJpbmcpO1xuICB2YXIgaW50TWF4TGVuZ3RoID0gdG9MZW5ndGgobWF4TGVuZ3RoKTtcbiAgaWYgKGludE1heExlbmd0aCA8PSBzdHJpbmdMZW5ndGggfHwgZmlsbFN0ciA9PSAnJykgcmV0dXJuIFM7XG4gIHZhciBmaWxsTGVuID0gaW50TWF4TGVuZ3RoIC0gc3RyaW5nTGVuZ3RoO1xuICB2YXIgc3RyaW5nRmlsbGVyID0gcmVwZWF0LmNhbGwoZmlsbFN0ciwgTWF0aC5jZWlsKGZpbGxMZW4gLyBmaWxsU3RyLmxlbmd0aCkpO1xuICBpZiAoc3RyaW5nRmlsbGVyLmxlbmd0aCA+IGZpbGxMZW4pIHN0cmluZ0ZpbGxlciA9IHN0cmluZ0ZpbGxlci5zbGljZSgwLCBmaWxsTGVuKTtcbiAgcmV0dXJuIGxlZnQgPyBzdHJpbmdGaWxsZXIgKyBTIDogUyArIHN0cmluZ0ZpbGxlcjtcbn07XG4iLCJ2YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGlzRW51bSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKS5mO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXNFbnRyaWVzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoaXQpIHtcbiAgICB2YXIgTyA9IHRvSU9iamVjdChpdCk7XG4gICAgdmFyIGtleXMgPSBnZXRLZXlzKE8pO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGkpIGlmIChpc0VudW0uY2FsbChPLCBrZXkgPSBrZXlzW2krK10pKSB7XG4gICAgICByZXN1bHQucHVzaChpc0VudHJpZXMgPyBba2V5LCBPW2tleV1dIDogT1trZXldKTtcbiAgICB9IHJldHVybiByZXN1bHQ7XG4gIH07XG59O1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL0RhdmlkQnJ1YW50L01hcC1TZXQucHJvdG90eXBlLnRvSlNPTlxudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgZnJvbSA9IHJlcXVpcmUoJy4vX2FycmF5LWZyb20taXRlcmFibGUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE5BTUUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICBpZiAoY2xhc3NvZih0aGlzKSAhPSBOQU1FKSB0aHJvdyBUeXBlRXJyb3IoTkFNRSArIFwiI3RvSlNPTiBpc24ndCBnZW5lcmljXCIpO1xuICAgIHJldHVybiBmcm9tKHRoaXMpO1xuICB9O1xufTtcbiIsInZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyLCBJVEVSQVRPUikge1xuICB2YXIgcmVzdWx0ID0gW107XG4gIGZvck9mKGl0ZXIsIGZhbHNlLCByZXN1bHQucHVzaCwgcmVzdWx0LCBJVEVSQVRPUik7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwiLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xubW9kdWxlLmV4cG9ydHMgPSBNYXRoLnNjYWxlIHx8IGZ1bmN0aW9uIHNjYWxlKHgsIGluTG93LCBpbkhpZ2gsIG91dExvdywgb3V0SGlnaCkge1xuICBpZiAoXG4gICAgYXJndW1lbnRzLmxlbmd0aCA9PT0gMFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgfHwgeCAhPSB4XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICB8fCBpbkxvdyAhPSBpbkxvd1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgfHwgaW5IaWdoICE9IGluSGlnaFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgfHwgb3V0TG93ICE9IG91dExvd1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgfHwgb3V0SGlnaCAhPSBvdXRIaWdoXG4gICkgcmV0dXJuIE5hTjtcbiAgaWYgKHggPT09IEluZmluaXR5IHx8IHggPT09IC1JbmZpbml0eSkgcmV0dXJuIHg7XG4gIHJldHVybiAoeCAtIGluTG93KSAqIChvdXRIaWdoIC0gb3V0TG93KSAvIChpbkhpZ2ggLSBpbkxvdykgKyBvdXRMb3c7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9heGlvcycpOyIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBiaW5kKGZuLCB0aGlzQXJnKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKCkge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICB9O1xufTtcbiIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBzZXR0bGUgPSByZXF1aXJlKCcuLy4uL2NvcmUvc2V0dGxlJyk7XG52YXIgYnVpbGRVUkwgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvYnVpbGRVUkwnKTtcbnZhciBwYXJzZUhlYWRlcnMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvcGFyc2VIZWFkZXJzJyk7XG52YXIgaXNVUkxTYW1lT3JpZ2luID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbicpO1xudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi4vY29yZS9jcmVhdGVFcnJvcicpO1xudmFyIGJ0b2EgPSAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmJ0b2EgJiYgd2luZG93LmJ0b2EuYmluZCh3aW5kb3cpKSB8fCByZXF1aXJlKCcuLy4uL2hlbHBlcnMvYnRvYScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHhockFkYXB0ZXIoY29uZmlnKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiBkaXNwYXRjaFhoclJlcXVlc3QocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIHJlcXVlc3REYXRhID0gY29uZmlnLmRhdGE7XG4gICAgdmFyIHJlcXVlc3RIZWFkZXJzID0gY29uZmlnLmhlYWRlcnM7XG5cbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShyZXF1ZXN0RGF0YSkpIHtcbiAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1snQ29udGVudC1UeXBlJ107IC8vIExldCB0aGUgYnJvd3NlciBzZXQgaXRcbiAgICB9XG5cbiAgICB2YXIgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgIHZhciBsb2FkRXZlbnQgPSAnb25yZWFkeXN0YXRlY2hhbmdlJztcbiAgICB2YXIgeERvbWFpbiA9IGZhbHNlO1xuXG4gICAgLy8gRm9yIElFIDgvOSBDT1JTIHN1cHBvcnRcbiAgICAvLyBPbmx5IHN1cHBvcnRzIFBPU1QgYW5kIEdFVCBjYWxscyBhbmQgZG9lc24ndCByZXR1cm5zIHRoZSByZXNwb25zZSBoZWFkZXJzLlxuICAgIC8vIERPTidUIGRvIHRoaXMgZm9yIHRlc3RpbmcgYi9jIFhNTEh0dHBSZXF1ZXN0IGlzIG1vY2tlZCwgbm90IFhEb21haW5SZXF1ZXN0LlxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Rlc3QnICYmXG4gICAgICAgIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgIHdpbmRvdy5YRG9tYWluUmVxdWVzdCAmJiAhKCd3aXRoQ3JlZGVudGlhbHMnIGluIHJlcXVlc3QpICYmXG4gICAgICAgICFpc1VSTFNhbWVPcmlnaW4oY29uZmlnLnVybCkpIHtcbiAgICAgIHJlcXVlc3QgPSBuZXcgd2luZG93LlhEb21haW5SZXF1ZXN0KCk7XG4gICAgICBsb2FkRXZlbnQgPSAnb25sb2FkJztcbiAgICAgIHhEb21haW4gPSB0cnVlO1xuICAgICAgcmVxdWVzdC5vbnByb2dyZXNzID0gZnVuY3Rpb24gaGFuZGxlUHJvZ3Jlc3MoKSB7fTtcbiAgICAgIHJlcXVlc3Qub250aW1lb3V0ID0gZnVuY3Rpb24gaGFuZGxlVGltZW91dCgpIHt9O1xuICAgIH1cblxuICAgIC8vIEhUVFAgYmFzaWMgYXV0aGVudGljYXRpb25cbiAgICBpZiAoY29uZmlnLmF1dGgpIHtcbiAgICAgIHZhciB1c2VybmFtZSA9IGNvbmZpZy5hdXRoLnVzZXJuYW1lIHx8ICcnO1xuICAgICAgdmFyIHBhc3N3b3JkID0gY29uZmlnLmF1dGgucGFzc3dvcmQgfHwgJyc7XG4gICAgICByZXF1ZXN0SGVhZGVycy5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyBidG9hKHVzZXJuYW1lICsgJzonICsgcGFzc3dvcmQpO1xuICAgIH1cblxuICAgIHJlcXVlc3Qub3Blbihjb25maWcubWV0aG9kLnRvVXBwZXJDYXNlKCksIGJ1aWxkVVJMKGNvbmZpZy51cmwsIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKSwgdHJ1ZSk7XG5cbiAgICAvLyBTZXQgdGhlIHJlcXVlc3QgdGltZW91dCBpbiBNU1xuICAgIHJlcXVlc3QudGltZW91dCA9IGNvbmZpZy50aW1lb3V0O1xuXG4gICAgLy8gTGlzdGVuIGZvciByZWFkeSBzdGF0ZVxuICAgIHJlcXVlc3RbbG9hZEV2ZW50XSA9IGZ1bmN0aW9uIGhhbmRsZUxvYWQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QgfHwgKHJlcXVlc3QucmVhZHlTdGF0ZSAhPT0gNCAmJiAheERvbWFpbikpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBUaGUgcmVxdWVzdCBlcnJvcmVkIG91dCBhbmQgd2UgZGlkbid0IGdldCBhIHJlc3BvbnNlLCB0aGlzIHdpbGwgYmVcbiAgICAgIC8vIGhhbmRsZWQgYnkgb25lcnJvciBpbnN0ZWFkXG4gICAgICAvLyBXaXRoIG9uZSBleGNlcHRpb246IHJlcXVlc3QgdGhhdCB1c2luZyBmaWxlOiBwcm90b2NvbCwgbW9zdCBicm93c2Vyc1xuICAgICAgLy8gd2lsbCByZXR1cm4gc3RhdHVzIGFzIDAgZXZlbiB0aG91Z2ggaXQncyBhIHN1Y2Nlc3NmdWwgcmVxdWVzdFxuICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzID09PSAwICYmICEocmVxdWVzdC5yZXNwb25zZVVSTCAmJiByZXF1ZXN0LnJlc3BvbnNlVVJMLmluZGV4T2YoJ2ZpbGU6JykgPT09IDApKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gUHJlcGFyZSB0aGUgcmVzcG9uc2VcbiAgICAgIHZhciByZXNwb25zZUhlYWRlcnMgPSAnZ2V0QWxsUmVzcG9uc2VIZWFkZXJzJyBpbiByZXF1ZXN0ID8gcGFyc2VIZWFkZXJzKHJlcXVlc3QuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkpIDogbnVsbDtcbiAgICAgIHZhciByZXNwb25zZURhdGEgPSAhY29uZmlnLnJlc3BvbnNlVHlwZSB8fCBjb25maWcucmVzcG9uc2VUeXBlID09PSAndGV4dCcgPyByZXF1ZXN0LnJlc3BvbnNlVGV4dCA6IHJlcXVlc3QucmVzcG9uc2U7XG4gICAgICB2YXIgcmVzcG9uc2UgPSB7XG4gICAgICAgIGRhdGE6IHJlc3BvbnNlRGF0YSxcbiAgICAgICAgLy8gSUUgc2VuZHMgMTIyMyBpbnN0ZWFkIG9mIDIwNCAoaHR0cHM6Ly9naXRodWIuY29tL2F4aW9zL2F4aW9zL2lzc3Vlcy8yMDEpXG4gICAgICAgIHN0YXR1czogcmVxdWVzdC5zdGF0dXMgPT09IDEyMjMgPyAyMDQgOiByZXF1ZXN0LnN0YXR1cyxcbiAgICAgICAgc3RhdHVzVGV4dDogcmVxdWVzdC5zdGF0dXMgPT09IDEyMjMgPyAnTm8gQ29udGVudCcgOiByZXF1ZXN0LnN0YXR1c1RleHQsXG4gICAgICAgIGhlYWRlcnM6IHJlc3BvbnNlSGVhZGVycyxcbiAgICAgICAgY29uZmlnOiBjb25maWcsXG4gICAgICAgIHJlcXVlc3Q6IHJlcXVlc3RcbiAgICAgIH07XG5cbiAgICAgIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSBsb3cgbGV2ZWwgbmV0d29yayBlcnJvcnNcbiAgICByZXF1ZXN0Lm9uZXJyb3IgPSBmdW5jdGlvbiBoYW5kbGVFcnJvcigpIHtcbiAgICAgIC8vIFJlYWwgZXJyb3JzIGFyZSBoaWRkZW4gZnJvbSB1cyBieSB0aGUgYnJvd3NlclxuICAgICAgLy8gb25lcnJvciBzaG91bGQgb25seSBmaXJlIGlmIGl0J3MgYSBuZXR3b3JrIGVycm9yXG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IoJ05ldHdvcmsgRXJyb3InLCBjb25maWcsIG51bGwsIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSB0aW1lb3V0XG4gICAgcmVxdWVzdC5vbnRpbWVvdXQgPSBmdW5jdGlvbiBoYW5kbGVUaW1lb3V0KCkge1xuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCd0aW1lb3V0IG9mICcgKyBjb25maWcudGltZW91dCArICdtcyBleGNlZWRlZCcsIGNvbmZpZywgJ0VDT05OQUJPUlRFRCcsXG4gICAgICAgIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgIC8vIFRoaXMgaXMgb25seSBkb25lIGlmIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50LlxuICAgIC8vIFNwZWNpZmljYWxseSBub3QgaWYgd2UncmUgaW4gYSB3ZWIgd29ya2VyLCBvciByZWFjdC1uYXRpdmUuXG4gICAgaWYgKHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkpIHtcbiAgICAgIHZhciBjb29raWVzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2Nvb2tpZXMnKTtcblxuICAgICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgICB2YXIgeHNyZlZhbHVlID0gKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMgfHwgaXNVUkxTYW1lT3JpZ2luKGNvbmZpZy51cmwpKSAmJiBjb25maWcueHNyZkNvb2tpZU5hbWUgP1xuICAgICAgICAgIGNvb2tpZXMucmVhZChjb25maWcueHNyZkNvb2tpZU5hbWUpIDpcbiAgICAgICAgICB1bmRlZmluZWQ7XG5cbiAgICAgIGlmICh4c3JmVmFsdWUpIHtcbiAgICAgICAgcmVxdWVzdEhlYWRlcnNbY29uZmlnLnhzcmZIZWFkZXJOYW1lXSA9IHhzcmZWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBZGQgaGVhZGVycyB0byB0aGUgcmVxdWVzdFxuICAgIGlmICgnc2V0UmVxdWVzdEhlYWRlcicgaW4gcmVxdWVzdCkge1xuICAgICAgdXRpbHMuZm9yRWFjaChyZXF1ZXN0SGVhZGVycywgZnVuY3Rpb24gc2V0UmVxdWVzdEhlYWRlcih2YWwsIGtleSkge1xuICAgICAgICBpZiAodHlwZW9mIHJlcXVlc3REYXRhID09PSAndW5kZWZpbmVkJyAmJiBrZXkudG9Mb3dlckNhc2UoKSA9PT0gJ2NvbnRlbnQtdHlwZScpIHtcbiAgICAgICAgICAvLyBSZW1vdmUgQ29udGVudC1UeXBlIGlmIGRhdGEgaXMgdW5kZWZpbmVkXG4gICAgICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzW2tleV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gT3RoZXJ3aXNlIGFkZCBoZWFkZXIgdG8gdGhlIHJlcXVlc3RcbiAgICAgICAgICByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoa2V5LCB2YWwpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBBZGQgd2l0aENyZWRlbnRpYWxzIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMpIHtcbiAgICAgIHJlcXVlc3Qud2l0aENyZWRlbnRpYWxzID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBBZGQgcmVzcG9uc2VUeXBlIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKGNvbmZpZy5yZXNwb25zZVR5cGUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gY29uZmlnLnJlc3BvbnNlVHlwZTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gRXhwZWN0ZWQgRE9NRXhjZXB0aW9uIHRocm93biBieSBicm93c2VycyBub3QgY29tcGF0aWJsZSBYTUxIdHRwUmVxdWVzdCBMZXZlbCAyLlxuICAgICAgICAvLyBCdXQsIHRoaXMgY2FuIGJlIHN1cHByZXNzZWQgZm9yICdqc29uJyB0eXBlIGFzIGl0IGNhbiBiZSBwYXJzZWQgYnkgZGVmYXVsdCAndHJhbnNmb3JtUmVzcG9uc2UnIGZ1bmN0aW9uLlxuICAgICAgICBpZiAoY29uZmlnLnJlc3BvbnNlVHlwZSAhPT0gJ2pzb24nKSB7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEhhbmRsZSBwcm9ncmVzcyBpZiBuZWVkZWRcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25Eb3dubG9hZFByb2dyZXNzKTtcbiAgICB9XG5cbiAgICAvLyBOb3QgYWxsIGJyb3dzZXJzIHN1cHBvcnQgdXBsb2FkIGV2ZW50c1xuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicgJiYgcmVxdWVzdC51cGxvYWQpIHtcbiAgICAgIHJlcXVlc3QudXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICAgIC8vIEhhbmRsZSBjYW5jZWxsYXRpb25cbiAgICAgIGNvbmZpZy5jYW5jZWxUb2tlbi5wcm9taXNlLnRoZW4oZnVuY3Rpb24gb25DYW5jZWxlZChjYW5jZWwpIHtcbiAgICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVxdWVzdC5hYm9ydCgpO1xuICAgICAgICByZWplY3QoY2FuY2VsKTtcbiAgICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChyZXF1ZXN0RGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXF1ZXN0RGF0YSA9IG51bGw7XG4gICAgfVxuXG4gICAgLy8gU2VuZCB0aGUgcmVxdWVzdFxuICAgIHJlcXVlc3Quc2VuZChyZXF1ZXN0RGF0YSk7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGVuaGFuY2VFcnJvciA9IHJlcXVpcmUoJy4vZW5oYW5jZUVycm9yJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBtZXNzYWdlLCBjb25maWcsIGVycm9yIGNvZGUsIHJlcXVlc3QgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIFRoZSBlcnJvciBtZXNzYWdlLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBjcmVhdGVkIGVycm9yLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZUVycm9yKG1lc3NhZ2UsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgdmFyIGVycm9yID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuICByZXR1cm4gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNDYW5jZWwodmFsdWUpIHtcbiAgcmV0dXJuICEhKHZhbHVlICYmIHZhbHVlLl9fQ0FOQ0VMX18pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBBIGBDYW5jZWxgIGlzIGFuIG9iamVjdCB0aGF0IGlzIHRocm93biB3aGVuIGFuIG9wZXJhdGlvbiBpcyBjYW5jZWxlZC5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7c3RyaW5nPX0gbWVzc2FnZSBUaGUgbWVzc2FnZS5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsKG1lc3NhZ2UpIHtcbiAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbn1cblxuQ2FuY2VsLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gJ0NhbmNlbCcgKyAodGhpcy5tZXNzYWdlID8gJzogJyArIHRoaXMubWVzc2FnZSA6ICcnKTtcbn07XG5cbkNhbmNlbC5wcm90b3R5cGUuX19DQU5DRUxfXyA9IHRydWU7XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FuY2VsO1xuIiwiaW1wb3J0IHtlbGVtZW50c30gZnJvbSAnLi9iYXNlJ1xyXG5cclxuZXhwb3J0IGNvbnN0IGdldElucHV0ID0gKCkgPT4gZWxlbWVudHMuc2VhcmNoSW5wdXQudmFsdWU7XHJcblxyXG5leHBvcnQgY29uc3QgY3V0VGl0bGUgPSAodGl0bGUsIGxpbWl0ID0gMTcpID0+IHtcclxuXHJcbiAgbGV0IHdvcmRzID0gW107XHJcbiAgbGV0IGFycmF5ID0gdGl0bGUuc3BsaXQoJyAnKTtcclxuXHJcbiAgYXJyYXkucmVkdWNlKCAoYWNjLCBjdXIpID0+IHtcclxuICAgIGlmKGFjYyA8IGxpbWl0KSB7XHJcbiAgICAgIHdvcmRzLnB1c2goY3VyKTtcclxuICAgIH1cclxuICAgIHJldHVybiBhY2MgKyBjdXIubGVuZ3RoO1xyXG4gIH0sIDApXHJcbiAgcmV0dXJuIGAke3dvcmRzLmpvaW4oJyAnKX0gLi4uYDtcclxufVxyXG5cclxuY29uc3QgcmVuZGVyUmVjaXBlID0gcmVjaXBlID0+IHtcclxuICBjb25zdCBtYXJrdXAgPSBgXHJcbiAgICA8bGk+XHJcbiAgICAgICAgPGEgY2xhc3M9XCJyZXN1bHRzX19saW5rXCIgaHJlZj1cIiMke3JlY2lwZS5yZWNpcGVfaWR9XCI+XHJcbiAgICAgICAgICAgIDxmaWd1cmUgY2xhc3M9XCJyZXN1bHRzX19maWdcIj5cclxuICAgICAgICAgICAgICAgIDxpbWcgc3JjPVwiJHtyZWNpcGUuaW1hZ2VfdXJsfVwiIGFsdD1cIiR7cmVjaXBlLnRpdGxlfVwiPlxyXG4gICAgICAgICAgICA8L2ZpZ3VyZT5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInJlc3VsdHNfX2RhdGFcIj5cclxuICAgICAgICAgICAgICAgIDxoNCBjbGFzcz1cInJlc3VsdHNfX25hbWVcIj4ke2N1dFRpdGxlKHJlY2lwZS50aXRsZSwgMTMpfTwvaDQ+XHJcbiAgICAgICAgICAgICAgICA8cCBjbGFzcz1cInJlc3VsdHNfX2F1dGhvclwiPiR7cmVjaXBlLnB1Ymxpc2hlcn08L3A+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvYT5cclxuICAgIDwvbGk+XHJcbiAgYDtcclxuICBlbGVtZW50cy5yZW5kZXJSZWNpcGVzTGlzdC5pbnNlcnRBZGphY2VudEhUTUwoICdiZWZvcmVlbmQnLCBtYXJrdXAgKTtcclxufVxyXG5cclxuY29uc3QgY3JlYXRlQnV0dG9uID0gKHBhZ2UsIHR5cGUpID0+IHtcclxuICBcclxuICAgICAgICAgICAgICAgIHJldHVybiBgPGJ1dHRvbiBjbGFzcz1cImJ0bi1pbmxpbmUgcmVzdWx0c19fYnRuLS0ke3R5cGV9XCIgZGF0YS1nb3RvPSR7dHlwZSA9PT0gJ3ByZXYnID8gcGFnZS0xIDogcGFnZSsxIH0gPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuPlBhZ2UgJHt0eXBlID09PSAncHJldicgPyBwYWdlLTEgOiBwYWdlKzEgfTwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICA8c3ZnIGNsYXNzPVwic2VhcmNoX19pY29uXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx1c2UgaHJlZj1cImltZy9pY29ucy5zdmcjaWNvbi10cmlhbmdsZS0ke3R5cGUgPT09ICdwcmV2JyA/ICdsZWZ0JyA6ICdyaWdodCcgfVwiPjwvdXNlPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvc3ZnPlxyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgPC9idXR0b24+YCAgICAgICAgICAgICAgICBcclxufVxyXG5cclxuY29uc3QgcmVuZGVyQnV0dG9ucyA9IChwYWdlLCByZXNDb3VudCwgcmVzUGVyUGFnZSkgPT4ge1xyXG5cclxuICBjb25zdCBwYWdlcyA9IE1hdGguY2VpbChyZXNDb3VudC9yZXNQZXJQYWdlKTtcclxuICBsZXQgYnV0dG9uO1xyXG5cclxuICBpZihwYWdlID09PSAxICYmIHBhZ2VzID4gMSkge1xyXG4gICAgLy8gc2hvdyBuZXh0IGJ1dHRvbnNcclxuICAgIGJ1dHRvbiA9IGNyZWF0ZUJ1dHRvbihwYWdlLCAnbmV4dCcpO1xyXG5cclxuICB9ZWxzZSBpZihwYWdlID09PSBwYWdlcyAmJiBwYWdlcyA+IDEpIHtcclxuICAgIC8vIHNob3cgcHJldiBidXR0b25zXHJcbiAgICBidXR0b24gPSBjcmVhdGVCdXR0b24ocGFnZSwgJ3ByZXYnKTtcclxuXHJcbiAgfSBlbHNlIGlmKHBhZ2UgPCBwYWdlcykge1xyXG4gICAgLy8gc2hvdyBib3RoIGJ1dHRvbnNcclxuICAgIGJ1dHRvbiA9IGAke2NyZWF0ZUJ1dHRvbihwYWdlLCAncHJldicpfVxyXG4gICAgICAgICAgICAgICR7Y3JlYXRlQnV0dG9uKHBhZ2UsICduZXh0Jyl9YDtcclxuICB9XHJcbiAgZWxlbWVudHMucGFnaW5QYWdlcy5pbnNlcnRBZGphY2VudEhUTUwoICdhZnRlcmJlZ2luJywgYnV0dG9uICk7XHJcbn1cclxuZXhwb3J0IGNvbnN0IHJlbmRlclJlc3VsdHMgPSAocmVjaXBlcywgcGFnZSA9IDEsIHJlc1BlclBhZ2UgPSAxMCkgPT4ge1xyXG4gIGNvbnN0IHN0YXJ0ID0gKHBhZ2UgLSAxKSpyZXNQZXJQYWdlO1xyXG4gIGNvbnN0IGVuZCA9IHBhZ2UqcmVzUGVyUGFnZTtcclxuICByZWNpcGVzLnNsaWNlKHN0YXJ0LCBlbmQpLmZvckVhY2goIGVsID0+IHJlbmRlclJlY2lwZShlbCkpO1xyXG4gIHJlbmRlckJ1dHRvbnMocGFnZSwgcmVjaXBlcy5sZW5ndGgsIHJlc1BlclBhZ2UpO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgY2xlYXJJbnB1dCA9ICgpID0+IGVsZW1lbnRzLnNlYXJjaElucHV0LnZhbHVlID0gJyc7XHJcblxyXG5leHBvcnQgY29uc3QgY2xlYXJSZXN1bHRzID0gKCkgPT4ge1xyXG4gIGVsZW1lbnRzLnJlbmRlclJlY2lwZXNMaXN0LmlubmVySFRNTCA9ICcnO1xyXG4gIGVsZW1lbnRzLnBhZ2luUGFnZXMuaW5uZXJIVE1MID0gJyc7XHJcbn07XHJcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9zaGltXCIpO1xuXG5yZXF1aXJlKFwicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lXCIpO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9mbi9yZWdleHAvZXNjYXBlXCIpO1xuXG5pZiAoZ2xvYmFsLl9iYWJlbFBvbHlmaWxsKSB7XG4gIHRocm93IG5ldyBFcnJvcihcIm9ubHkgb25lIGluc3RhbmNlIG9mIGJhYmVsLXBvbHlmaWxsIGlzIGFsbG93ZWRcIik7XG59XG5nbG9iYWwuX2JhYmVsUG9seWZpbGwgPSB0cnVlO1xuXG52YXIgREVGSU5FX1BST1BFUlRZID0gXCJkZWZpbmVQcm9wZXJ0eVwiO1xuZnVuY3Rpb24gZGVmaW5lKE8sIGtleSwgdmFsdWUpIHtcbiAgT1trZXldIHx8IE9iamVjdFtERUZJTkVfUFJPUEVSVFldKE8sIGtleSwge1xuICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfSk7XG59XG5cbmRlZmluZShTdHJpbmcucHJvdG90eXBlLCBcInBhZExlZnRcIiwgXCJcIi5wYWRTdGFydCk7XG5kZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgXCJwYWRSaWdodFwiLCBcIlwiLnBhZEVuZCk7XG5cblwicG9wLHJldmVyc2Usc2hpZnQsa2V5cyx2YWx1ZXMsZW50cmllcyxpbmRleE9mLGV2ZXJ5LHNvbWUsZm9yRWFjaCxtYXAsZmlsdGVyLGZpbmQsZmluZEluZGV4LGluY2x1ZGVzLGpvaW4sc2xpY2UsY29uY2F0LHB1c2gsc3BsaWNlLHVuc2hpZnQsc29ydCxsYXN0SW5kZXhPZixyZWR1Y2UscmVkdWNlUmlnaHQsY29weVdpdGhpbixmaWxsXCIuc3BsaXQoXCIsXCIpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBbXVtrZXldICYmIGRlZmluZShBcnJheSwga2V5LCBGdW5jdGlvbi5jYWxsLmJpbmQoW11ba2V5XSkpO1xufSk7IiwicmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zeW1ib2wnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmNyZWF0ZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydGllcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtcHJvdG90eXBlLW9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5rZXlzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LW5hbWVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5mcmVlemUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LnNlYWwnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LnByZXZlbnQtZXh0ZW5zaW9ucycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZnJvemVuJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1zZWFsZWQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmlzLWV4dGVuc2libGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmFzc2lnbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5mdW5jdGlvbi5iaW5kJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmZ1bmN0aW9uLm5hbWUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZnVuY3Rpb24uaGFzLWluc3RhbmNlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnBhcnNlLWludCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5wYXJzZS1mbG9hdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuY29uc3RydWN0b3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLnRvLWZpeGVkJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci50by1wcmVjaXNpb24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLmVwc2lsb24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLmlzLWZpbml0ZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtaW50ZWdlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtbmFuJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5pcy1zYWZlLWludGVnZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLm1heC1zYWZlLWludGVnZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLm1pbi1zYWZlLWludGVnZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLnBhcnNlLWZsb2F0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1pbnQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5hY29zaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmFzaW5oJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguYXRhbmgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5jYnJ0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguY2x6MzInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5jb3NoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguZXhwbTEnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5mcm91bmQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5oeXBvdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmltdWwnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5sb2cxMCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmxvZzFwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGgubG9nMicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLnNpZ24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5zaW5oJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGgudGFuaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLnRydW5jJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5mcm9tLWNvZGUtcG9pbnQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnJhdycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcudHJpbScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmNvZGUtcG9pbnQtYXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmVuZHMtd2l0aCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuaW5jbHVkZXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnJlcGVhdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuc3RhcnRzLXdpdGgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmFuY2hvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuYmlnJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5ibGluaycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuYm9sZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuZml4ZWQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRjb2xvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udHNpemUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLml0YWxpY3MnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmxpbmsnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnNtYWxsJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5zdHJpa2UnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnN1YicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuc3VwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmRhdGUubm93Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmRhdGUudG8tanNvbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5kYXRlLnRvLWlzby1zdHJpbmcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZGF0ZS50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZGF0ZS50by1wcmltaXRpdmUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuaXMtYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZnJvbScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5qb2luJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LnNsaWNlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LnNvcnQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZm9yLWVhY2gnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkubWFwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZpbHRlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5zb21lJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmV2ZXJ5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LnJlZHVjZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UtcmlnaHQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuaW5kZXgtb2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkubGFzdC1pbmRleC1vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5jb3B5LXdpdGhpbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5maWxsJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZpbmQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZmluZC1pbmRleCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5zcGVjaWVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5Lml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC5jb25zdHJ1Y3RvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAudG8tc3RyaW5nJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC5mbGFncycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAubWF0Y2gnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLnJlcGxhY2UnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLnNlYXJjaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAuc3BsaXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucHJvbWlzZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc2V0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LndlYWstbWFwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LndlYWstc2V0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmFycmF5LWJ1ZmZlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5kYXRhLXZpZXcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuaW50OC1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC51aW50OC1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC51aW50OC1jbGFtcGVkLWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmludDE2LWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQxNi1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5pbnQzMi1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC51aW50MzItYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuZmxvYXQzMi1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5mbG9hdDY0LWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuYXBwbHknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5jb25zdHJ1Y3QnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5kZWZpbmUtcHJvcGVydHknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5kZWxldGUtcHJvcGVydHknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5lbnVtZXJhdGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5nZXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtcHJvdG90eXBlLW9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuaGFzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuaXMtZXh0ZW5zaWJsZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0Lm93bi1rZXlzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QucHJldmVudC1leHRlbnNpb25zJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0LXByb3RvdHlwZS1vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5hcnJheS5pbmNsdWRlcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5hcnJheS5mbGF0LW1hcCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5hcnJheS5mbGF0dGVuJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN0cmluZy5hdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zdHJpbmcucGFkLXN0YXJ0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtZW5kJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN0cmluZy50cmltLWxlZnQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tcmlnaHQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLm1hdGNoLWFsbCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zeW1ib2wuYXN5bmMtaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3ltYm9sLm9ic2VydmFibGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcnMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0LnZhbHVlcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QuZW50cmllcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QuZGVmaW5lLWdldHRlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QuZGVmaW5lLXNldHRlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QubG9va3VwLWdldHRlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QubG9va3VwLXNldHRlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXAudG8tanNvbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zZXQudG8tanNvbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXAub2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc2V0Lm9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LndlYWstbWFwLm9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LndlYWstc2V0Lm9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hcC5mcm9tJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnNldC5mcm9tJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LndlYWstbWFwLmZyb20nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcud2Vhay1zZXQuZnJvbScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5nbG9iYWwnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3lzdGVtLmdsb2JhbCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5lcnJvci5pcy1lcnJvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLmNsYW1wJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguZGVnLXBlci1yYWQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5kZWdyZWVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguZnNjYWxlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguaWFkZGgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5pc3ViaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLmltdWxoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGgucmFkLXBlci1kZWcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5yYWRpYW5zJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguc2NhbGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC51bXVsaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLnNpZ25iaXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucHJvbWlzZS5maW5hbGx5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnByb21pc2UudHJ5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZGVmaW5lLW1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZGVsZXRlLW1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW1ldGFkYXRhLWtleXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtb3duLW1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW93bi1tZXRhZGF0YS1rZXlzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuaGFzLW1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuaGFzLW93bi1tZXRhZGF0YScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0Lm1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LmFzYXAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JzZXJ2YWJsZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL3dlYi50aW1lcnMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy93ZWIuaW1tZWRpYXRlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL21vZHVsZXMvX2NvcmUnKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEVDTUFTY3JpcHQgNiBzeW1ib2xzIHNoaW1cbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBNRVRBID0gcmVxdWlyZSgnLi9fbWV0YScpLktFWTtcbnZhciAkZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciB3a3MgPSByZXF1aXJlKCcuL193a3MnKTtcbnZhciB3a3NFeHQgPSByZXF1aXJlKCcuL193a3MtZXh0Jyk7XG52YXIgd2tzRGVmaW5lID0gcmVxdWlyZSgnLi9fd2tzLWRlZmluZScpO1xudmFyIGVudW1LZXlzID0gcmVxdWlyZSgnLi9fZW51bS1rZXlzJyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vX2lzLWFycmF5Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgX2NyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciBnT1BORXh0ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4tZXh0Jyk7XG52YXIgJEdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xudmFyICREUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BEID0gJEdPUEQuZjtcbnZhciBkUCA9ICREUC5mO1xudmFyIGdPUE4gPSBnT1BORXh0LmY7XG52YXIgJFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgJEpTT04gPSBnbG9iYWwuSlNPTjtcbnZhciBfc3RyaW5naWZ5ID0gJEpTT04gJiYgJEpTT04uc3RyaW5naWZ5O1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIEhJRERFTiA9IHdrcygnX2hpZGRlbicpO1xudmFyIFRPX1BSSU1JVElWRSA9IHdrcygndG9QcmltaXRpdmUnKTtcbnZhciBpc0VudW0gPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbnZhciBTeW1ib2xSZWdpc3RyeSA9IHNoYXJlZCgnc3ltYm9sLXJlZ2lzdHJ5Jyk7XG52YXIgQWxsU3ltYm9scyA9IHNoYXJlZCgnc3ltYm9scycpO1xudmFyIE9QU3ltYm9scyA9IHNoYXJlZCgnb3Atc3ltYm9scycpO1xudmFyIE9iamVjdFByb3RvID0gT2JqZWN0W1BST1RPVFlQRV07XG52YXIgVVNFX05BVElWRSA9IHR5cGVvZiAkU3ltYm9sID09ICdmdW5jdGlvbic7XG52YXIgUU9iamVjdCA9IGdsb2JhbC5RT2JqZWN0O1xuLy8gRG9uJ3QgdXNlIHNldHRlcnMgaW4gUXQgU2NyaXB0LCBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMTczXG52YXIgc2V0dGVyID0gIVFPYmplY3QgfHwgIVFPYmplY3RbUFJPVE9UWVBFXSB8fCAhUU9iamVjdFtQUk9UT1RZUEVdLmZpbmRDaGlsZDtcblxuLy8gZmFsbGJhY2sgZm9yIG9sZCBBbmRyb2lkLCBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9Njg3XG52YXIgc2V0U3ltYm9sRGVzYyA9IERFU0NSSVBUT1JTICYmICRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBfY3JlYXRlKGRQKHt9LCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRQKHRoaXMsICdhJywgeyB2YWx1ZTogNyB9KS5hOyB9XG4gIH0pKS5hICE9IDc7XG59KSA/IGZ1bmN0aW9uIChpdCwga2V5LCBEKSB7XG4gIHZhciBwcm90b0Rlc2MgPSBnT1BEKE9iamVjdFByb3RvLCBrZXkpO1xuICBpZiAocHJvdG9EZXNjKSBkZWxldGUgT2JqZWN0UHJvdG9ba2V5XTtcbiAgZFAoaXQsIGtleSwgRCk7XG4gIGlmIChwcm90b0Rlc2MgJiYgaXQgIT09IE9iamVjdFByb3RvKSBkUChPYmplY3RQcm90bywga2V5LCBwcm90b0Rlc2MpO1xufSA6IGRQO1xuXG52YXIgd3JhcCA9IGZ1bmN0aW9uICh0YWcpIHtcbiAgdmFyIHN5bSA9IEFsbFN5bWJvbHNbdGFnXSA9IF9jcmVhdGUoJFN5bWJvbFtQUk9UT1RZUEVdKTtcbiAgc3ltLl9rID0gdGFnO1xuICByZXR1cm4gc3ltO1xufTtcblxudmFyIGlzU3ltYm9sID0gVVNFX05BVElWRSAmJiB0eXBlb2YgJFN5bWJvbC5pdGVyYXRvciA9PSAnc3ltYm9sJyA/IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnO1xufSA6IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgaW5zdGFuY2VvZiAkU3ltYm9sO1xufTtcblxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KGl0LCBrZXksIEQpIHtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90bykgJGRlZmluZVByb3BlcnR5KE9QU3ltYm9scywga2V5LCBEKTtcbiAgYW5PYmplY3QoaXQpO1xuICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xuICBhbk9iamVjdChEKTtcbiAgaWYgKGhhcyhBbGxTeW1ib2xzLCBrZXkpKSB7XG4gICAgaWYgKCFELmVudW1lcmFibGUpIHtcbiAgICAgIGlmICghaGFzKGl0LCBISURERU4pKSBkUChpdCwgSElEREVOLCBjcmVhdGVEZXNjKDEsIHt9KSk7XG4gICAgICBpdFtISURERU5dW2tleV0gPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkgaXRbSElEREVOXVtrZXldID0gZmFsc2U7XG4gICAgICBEID0gX2NyZWF0ZShELCB7IGVudW1lcmFibGU6IGNyZWF0ZURlc2MoMCwgZmFsc2UpIH0pO1xuICAgIH0gcmV0dXJuIHNldFN5bWJvbERlc2MoaXQsIGtleSwgRCk7XG4gIH0gcmV0dXJuIGRQKGl0LCBrZXksIEQpO1xufTtcbnZhciAkZGVmaW5lUHJvcGVydGllcyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoaXQsIFApIHtcbiAgYW5PYmplY3QoaXQpO1xuICB2YXIga2V5cyA9IGVudW1LZXlzKFAgPSB0b0lPYmplY3QoUCkpO1xuICB2YXIgaSA9IDA7XG4gIHZhciBsID0ga2V5cy5sZW5ndGg7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChsID4gaSkgJGRlZmluZVByb3BlcnR5KGl0LCBrZXkgPSBrZXlzW2krK10sIFBba2V5XSk7XG4gIHJldHVybiBpdDtcbn07XG52YXIgJGNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpdCwgUCkge1xuICByZXR1cm4gUCA9PT0gdW5kZWZpbmVkID8gX2NyZWF0ZShpdCkgOiAkZGVmaW5lUHJvcGVydGllcyhfY3JlYXRlKGl0KSwgUCk7XG59O1xudmFyICRwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKGtleSkge1xuICB2YXIgRSA9IGlzRW51bS5jYWxsKHRoaXMsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpO1xuICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG8gJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhPUFN5bWJvbHMsIGtleSkpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIEUgfHwgIWhhcyh0aGlzLCBrZXkpIHx8ICFoYXMoQWxsU3ltYm9scywga2V5KSB8fCBoYXModGhpcywgSElEREVOKSAmJiB0aGlzW0hJRERFTl1ba2V5XSA/IEUgOiB0cnVlO1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpIHtcbiAgaXQgPSB0b0lPYmplY3QoaXQpO1xuICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xuICBpZiAoaXQgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKSByZXR1cm47XG4gIHZhciBEID0gZ09QRChpdCwga2V5KTtcbiAgaWYgKEQgJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIShoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKSkgRC5lbnVtZXJhYmxlID0gdHJ1ZTtcbiAgcmV0dXJuIEQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eU5hbWVzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICB2YXIgbmFtZXMgPSBnT1BOKHRvSU9iamVjdChpdCkpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBpID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIHtcbiAgICBpZiAoIWhhcyhBbGxTeW1ib2xzLCBrZXkgPSBuYW1lc1tpKytdKSAmJiBrZXkgIT0gSElEREVOICYmIGtleSAhPSBNRVRBKSByZXN1bHQucHVzaChrZXkpO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpIHtcbiAgdmFyIElTX09QID0gaXQgPT09IE9iamVjdFByb3RvO1xuICB2YXIgbmFtZXMgPSBnT1BOKElTX09QID8gT1BTeW1ib2xzIDogdG9JT2JqZWN0KGl0KSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGkgPSAwO1xuICB2YXIga2V5O1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkge1xuICAgIGlmIChoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYgKElTX09QID8gaGFzKE9iamVjdFByb3RvLCBrZXkpIDogdHJ1ZSkpIHJlc3VsdC5wdXNoKEFsbFN5bWJvbHNba2V5XSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8vIDE5LjQuMS4xIFN5bWJvbChbZGVzY3JpcHRpb25dKVxuaWYgKCFVU0VfTkFUSVZFKSB7XG4gICRTeW1ib2wgPSBmdW5jdGlvbiBTeW1ib2woKSB7XG4gICAgaWYgKHRoaXMgaW5zdGFuY2VvZiAkU3ltYm9sKSB0aHJvdyBUeXBlRXJyb3IoJ1N5bWJvbCBpcyBub3QgYSBjb25zdHJ1Y3RvciEnKTtcbiAgICB2YXIgdGFnID0gdWlkKGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTtcbiAgICB2YXIgJHNldCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvKSAkc2V0LmNhbGwoT1BTeW1ib2xzLCB2YWx1ZSk7XG4gICAgICBpZiAoaGFzKHRoaXMsIEhJRERFTikgJiYgaGFzKHRoaXNbSElEREVOXSwgdGFnKSkgdGhpc1tISURERU5dW3RhZ10gPSBmYWxzZTtcbiAgICAgIHNldFN5bWJvbERlc2ModGhpcywgdGFnLCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG4gICAgfTtcbiAgICBpZiAoREVTQ1JJUFRPUlMgJiYgc2V0dGVyKSBzZXRTeW1ib2xEZXNjKE9iamVjdFByb3RvLCB0YWcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCBzZXQ6ICRzZXQgfSk7XG4gICAgcmV0dXJuIHdyYXAodGFnKTtcbiAgfTtcbiAgcmVkZWZpbmUoJFN5bWJvbFtQUk9UT1RZUEVdLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5faztcbiAgfSk7XG5cbiAgJEdPUEQuZiA9ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gICREUC5mID0gJGRlZmluZVByb3BlcnR5O1xuICByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmYgPSBnT1BORXh0LmYgPSAkZ2V0T3duUHJvcGVydHlOYW1lcztcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpLmYgPSAkcHJvcGVydHlJc0VudW1lcmFibGU7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJykuZiA9ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cbiAgaWYgKERFU0NSSVBUT1JTICYmICFyZXF1aXJlKCcuL19saWJyYXJ5JykpIHtcbiAgICByZWRlZmluZShPYmplY3RQcm90bywgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJywgJHByb3BlcnR5SXNFbnVtZXJhYmxlLCB0cnVlKTtcbiAgfVxuXG4gIHdrc0V4dC5mID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICByZXR1cm4gd3JhcCh3a3MobmFtZSkpO1xuICB9O1xufVxuXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCB7IFN5bWJvbDogJFN5bWJvbCB9KTtcblxuZm9yICh2YXIgZXM2U3ltYm9scyA9IChcbiAgLy8gMTkuNC4yLjIsIDE5LjQuMi4zLCAxOS40LjIuNCwgMTkuNC4yLjYsIDE5LjQuMi44LCAxOS40LjIuOSwgMTkuNC4yLjEwLCAxOS40LjIuMTEsIDE5LjQuMi4xMiwgMTkuNC4yLjEzLCAxOS40LjIuMTRcbiAgJ2hhc0luc3RhbmNlLGlzQ29uY2F0U3ByZWFkYWJsZSxpdGVyYXRvcixtYXRjaCxyZXBsYWNlLHNlYXJjaCxzcGVjaWVzLHNwbGl0LHRvUHJpbWl0aXZlLHRvU3RyaW5nVGFnLHVuc2NvcGFibGVzJ1xuKS5zcGxpdCgnLCcpLCBqID0gMDsgZXM2U3ltYm9scy5sZW5ndGggPiBqOyl3a3MoZXM2U3ltYm9sc1tqKytdKTtcblxuZm9yICh2YXIgd2VsbEtub3duU3ltYm9scyA9ICRrZXlzKHdrcy5zdG9yZSksIGsgPSAwOyB3ZWxsS25vd25TeW1ib2xzLmxlbmd0aCA+IGs7KSB3a3NEZWZpbmUod2VsbEtub3duU3ltYm9sc1trKytdKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgJ1N5bWJvbCcsIHtcbiAgLy8gMTkuNC4yLjEgU3ltYm9sLmZvcihrZXkpXG4gICdmb3InOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIGhhcyhTeW1ib2xSZWdpc3RyeSwga2V5ICs9ICcnKVxuICAgICAgPyBTeW1ib2xSZWdpc3RyeVtrZXldXG4gICAgICA6IFN5bWJvbFJlZ2lzdHJ5W2tleV0gPSAkU3ltYm9sKGtleSk7XG4gIH0sXG4gIC8vIDE5LjQuMi41IFN5bWJvbC5rZXlGb3Ioc3ltKVxuICBrZXlGb3I6IGZ1bmN0aW9uIGtleUZvcihzeW0pIHtcbiAgICBpZiAoIWlzU3ltYm9sKHN5bSkpIHRocm93IFR5cGVFcnJvcihzeW0gKyAnIGlzIG5vdCBhIHN5bWJvbCEnKTtcbiAgICBmb3IgKHZhciBrZXkgaW4gU3ltYm9sUmVnaXN0cnkpIGlmIChTeW1ib2xSZWdpc3RyeVtrZXldID09PSBzeW0pIHJldHVybiBrZXk7XG4gIH0sXG4gIHVzZVNldHRlcjogZnVuY3Rpb24gKCkgeyBzZXR0ZXIgPSB0cnVlOyB9LFxuICB1c2VTaW1wbGU6IGZ1bmN0aW9uICgpIHsgc2V0dGVyID0gZmFsc2U7IH1cbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCAnT2JqZWN0Jywge1xuICAvLyAxOS4xLjIuMiBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG4gIGNyZWF0ZTogJGNyZWF0ZSxcbiAgLy8gMTkuMS4yLjQgT2JqZWN0LmRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpXG4gIGRlZmluZVByb3BlcnR5OiAkZGVmaW5lUHJvcGVydHksXG4gIC8vIDE5LjEuMi4zIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpXG4gIGRlZmluZVByb3BlcnRpZXM6ICRkZWZpbmVQcm9wZXJ0aWVzLFxuICAvLyAxOS4xLjIuNiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApXG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogJGdldE93blByb3BlcnR5RGVzY3JpcHRvcixcbiAgLy8gMTkuMS4yLjcgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbiAgZ2V0T3duUHJvcGVydHlOYW1lczogJGdldE93blByb3BlcnR5TmFtZXMsXG4gIC8vIDE5LjEuMi44IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoTylcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzOiAkZ2V0T3duUHJvcGVydHlTeW1ib2xzXG59KTtcblxuLy8gMjQuMy4yIEpTT04uc3RyaW5naWZ5KHZhbHVlIFssIHJlcGxhY2VyIFssIHNwYWNlXV0pXG4kSlNPTiAmJiAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICghVVNFX05BVElWRSB8fCAkZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgUyA9ICRTeW1ib2woKTtcbiAgLy8gTVMgRWRnZSBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMge31cbiAgLy8gV2ViS2l0IGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyBudWxsXG4gIC8vIFY4IHRocm93cyBvbiBib3hlZCBzeW1ib2xzXG4gIHJldHVybiBfc3RyaW5naWZ5KFtTXSkgIT0gJ1tudWxsXScgfHwgX3N0cmluZ2lmeSh7IGE6IFMgfSkgIT0gJ3t9JyB8fCBfc3RyaW5naWZ5KE9iamVjdChTKSkgIT0gJ3t9Jztcbn0pKSwgJ0pTT04nLCB7XG4gIHN0cmluZ2lmeTogZnVuY3Rpb24gc3RyaW5naWZ5KGl0KSB7XG4gICAgdmFyIGFyZ3MgPSBbaXRdO1xuICAgIHZhciBpID0gMTtcbiAgICB2YXIgcmVwbGFjZXIsICRyZXBsYWNlcjtcbiAgICB3aGlsZSAoYXJndW1lbnRzLmxlbmd0aCA+IGkpIGFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XG4gICAgJHJlcGxhY2VyID0gcmVwbGFjZXIgPSBhcmdzWzFdO1xuICAgIGlmICghaXNPYmplY3QocmVwbGFjZXIpICYmIGl0ID09PSB1bmRlZmluZWQgfHwgaXNTeW1ib2woaXQpKSByZXR1cm47IC8vIElFOCByZXR1cm5zIHN0cmluZyBvbiB1bmRlZmluZWRcbiAgICBpZiAoIWlzQXJyYXkocmVwbGFjZXIpKSByZXBsYWNlciA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mICRyZXBsYWNlciA9PSAnZnVuY3Rpb24nKSB2YWx1ZSA9ICRyZXBsYWNlci5jYWxsKHRoaXMsIGtleSwgdmFsdWUpO1xuICAgICAgaWYgKCFpc1N5bWJvbCh2YWx1ZSkpIHJldHVybiB2YWx1ZTtcbiAgICB9O1xuICAgIGFyZ3NbMV0gPSByZXBsYWNlcjtcbiAgICByZXR1cm4gX3N0cmluZ2lmeS5hcHBseSgkSlNPTiwgYXJncyk7XG4gIH1cbn0pO1xuXG4vLyAxOS40LjMuNCBTeW1ib2wucHJvdG90eXBlW0BAdG9QcmltaXRpdmVdKGhpbnQpXG4kU3ltYm9sW1BST1RPVFlQRV1bVE9fUFJJTUlUSVZFXSB8fCByZXF1aXJlKCcuL19oaWRlJykoJFN5bWJvbFtQUk9UT1RZUEVdLCBUT19QUklNSVRJVkUsICRTeW1ib2xbUFJPVE9UWVBFXS52YWx1ZU9mKTtcbi8vIDE5LjQuMy41IFN5bWJvbC5wcm90b3R5cGVbQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKCRTeW1ib2wsICdTeW1ib2wnKTtcbi8vIDIwLjIuMS45IE1hdGhbQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKE1hdGgsICdNYXRoJywgdHJ1ZSk7XG4vLyAyNC4zLjMgSlNPTltAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoZ2xvYmFsLkpTT04sICdKU09OJywgdHJ1ZSk7XG4iLCIvLyBhbGwgZW51bWVyYWJsZSBvYmplY3Qga2V5cywgaW5jbHVkZXMgc3ltYm9sc1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIGdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciByZXN1bHQgPSBnZXRLZXlzKGl0KTtcbiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIGlmIChnZXRTeW1ib2xzKSB7XG4gICAgdmFyIHN5bWJvbHMgPSBnZXRTeW1ib2xzKGl0KTtcbiAgICB2YXIgaXNFbnVtID0gcElFLmY7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKHN5bWJvbHMubGVuZ3RoID4gaSkgaWYgKGlzRW51bS5jYWxsKGl0LCBrZXkgPSBzeW1ib2xzW2krK10pKSByZXN1bHQucHVzaChrZXkpO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbi8vIDE5LjEuMi4yIC8gMTUuMi4zLjUgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7IGNyZWF0ZTogcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpIH0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbi8vIDE5LjEuMi40IC8gMTUuMi4zLjYgT2JqZWN0LmRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpLCAnT2JqZWN0JywgeyBkZWZpbmVQcm9wZXJ0eTogcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZiB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4vLyAxOS4xLjIuMyAvIDE1LjIuMy43IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpLCAnT2JqZWN0JywgeyBkZWZpbmVQcm9wZXJ0aWVzOiByZXF1aXJlKCcuL19vYmplY3QtZHBzJykgfSk7XG4iLCIvLyAxOS4xLjIuNiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApXG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yJywgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpIHtcbiAgICByZXR1cm4gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0b0lPYmplY3QoaXQpLCBrZXkpO1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuOSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTylcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyICRnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdnZXRQcm90b3R5cGVPZicsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGdldFByb3RvdHlwZU9mKGl0KSB7XG4gICAgcmV0dXJuICRnZXRQcm90b3R5cGVPZih0b09iamVjdChpdCkpO1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuMTQgT2JqZWN0LmtleXMoTylcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdrZXlzJywgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZnVuY3Rpb24ga2V5cyhpdCkge1xuICAgIHJldHVybiAka2V5cyh0b09iamVjdChpdCkpO1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuNyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdnZXRPd25Qcm9wZXJ0eU5hbWVzJywgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4tZXh0JykuZjtcbn0pO1xuIiwiLy8gMTkuMS4yLjUgT2JqZWN0LmZyZWV6ZShPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKS5vbkZyZWV6ZTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdmcmVlemUnLCBmdW5jdGlvbiAoJGZyZWV6ZSkge1xuICByZXR1cm4gZnVuY3Rpb24gZnJlZXplKGl0KSB7XG4gICAgcmV0dXJuICRmcmVlemUgJiYgaXNPYmplY3QoaXQpID8gJGZyZWV6ZShtZXRhKGl0KSkgOiBpdDtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjE3IE9iamVjdC5zZWFsKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpLm9uRnJlZXplO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ3NlYWwnLCBmdW5jdGlvbiAoJHNlYWwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHNlYWwoaXQpIHtcbiAgICByZXR1cm4gJHNlYWwgJiYgaXNPYmplY3QoaXQpID8gJHNlYWwobWV0YShpdCkpIDogaXQ7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi4xNSBPYmplY3QucHJldmVudEV4dGVuc2lvbnMoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIG1ldGEgPSByZXF1aXJlKCcuL19tZXRhJykub25GcmVlemU7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgncHJldmVudEV4dGVuc2lvbnMnLCBmdW5jdGlvbiAoJHByZXZlbnRFeHRlbnNpb25zKSB7XG4gIHJldHVybiBmdW5jdGlvbiBwcmV2ZW50RXh0ZW5zaW9ucyhpdCkge1xuICAgIHJldHVybiAkcHJldmVudEV4dGVuc2lvbnMgJiYgaXNPYmplY3QoaXQpID8gJHByZXZlbnRFeHRlbnNpb25zKG1ldGEoaXQpKSA6IGl0O1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuMTIgT2JqZWN0LmlzRnJvemVuKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdpc0Zyb3plbicsIGZ1bmN0aW9uICgkaXNGcm96ZW4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGlzRnJvemVuKGl0KSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KGl0KSA/ICRpc0Zyb3plbiA/ICRpc0Zyb3plbihpdCkgOiBmYWxzZSA6IHRydWU7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi4xMyBPYmplY3QuaXNTZWFsZWQoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2lzU2VhbGVkJywgZnVuY3Rpb24gKCRpc1NlYWxlZCkge1xuICByZXR1cm4gZnVuY3Rpb24gaXNTZWFsZWQoaXQpIHtcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gJGlzU2VhbGVkID8gJGlzU2VhbGVkKGl0KSA6IGZhbHNlIDogdHJ1ZTtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjExIE9iamVjdC5pc0V4dGVuc2libGUoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2lzRXh0ZW5zaWJsZScsIGZ1bmN0aW9uICgkaXNFeHRlbnNpYmxlKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpc0V4dGVuc2libGUoaXQpIHtcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gJGlzRXh0ZW5zaWJsZSA/ICRpc0V4dGVuc2libGUoaXQpIDogdHJ1ZSA6IGZhbHNlO1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjMuMSBPYmplY3QuYXNzaWduKHRhcmdldCwgc291cmNlKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYsICdPYmplY3QnLCB7IGFzc2lnbjogcmVxdWlyZSgnLi9fb2JqZWN0LWFzc2lnbicpIH0pO1xuIiwiLy8gMTkuMS4zLjEwIE9iamVjdC5pcyh2YWx1ZTEsIHZhbHVlMilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHsgaXM6IHJlcXVpcmUoJy4vX3NhbWUtdmFsdWUnKSB9KTtcbiIsIi8vIDcuMi45IFNhbWVWYWx1ZSh4LCB5KVxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuaXMgfHwgZnVuY3Rpb24gaXMoeCwgeSkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIHJldHVybiB4ID09PSB5ID8geCAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHkgOiB4ICE9IHggJiYgeSAhPSB5O1xufTtcbiIsIi8vIDE5LjEuMy4xOSBPYmplY3Quc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7IHNldFByb3RvdHlwZU9mOiByZXF1aXJlKCcuL19zZXQtcHJvdG8nKS5zZXQgfSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyIHRlc3QgPSB7fTtcbnRlc3RbcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyldID0gJ3onO1xuaWYgKHRlc3QgKyAnJyAhPSAnW29iamVjdCB6XScpIHtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShPYmplY3QucHJvdG90eXBlLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gJ1tvYmplY3QgJyArIGNsYXNzb2YodGhpcykgKyAnXSc7XG4gIH0sIHRydWUpO1xufVxuIiwiLy8gMTkuMi4zLjIgLyAxNS4zLjQuNSBGdW5jdGlvbi5wcm90b3R5cGUuYmluZCh0aGlzQXJnLCBhcmdzLi4uKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdGdW5jdGlvbicsIHsgYmluZDogcmVxdWlyZSgnLi9fYmluZCcpIH0pO1xuIiwidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBGUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGU7XG52YXIgbmFtZVJFID0gL15cXHMqZnVuY3Rpb24gKFteIChdKikvO1xudmFyIE5BTUUgPSAnbmFtZSc7XG5cbi8vIDE5LjIuNC4yIG5hbWVcbk5BTUUgaW4gRlByb3RvIHx8IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgZFAoRlByb3RvLCBOQU1FLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiAoJycgKyB0aGlzKS5tYXRjaChuYW1lUkUpWzFdO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgSEFTX0lOU1RBTkNFID0gcmVxdWlyZSgnLi9fd2tzJykoJ2hhc0luc3RhbmNlJyk7XG52YXIgRnVuY3Rpb25Qcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbi8vIDE5LjIuMy42IEZ1bmN0aW9uLnByb3RvdHlwZVtAQGhhc0luc3RhbmNlXShWKVxuaWYgKCEoSEFTX0lOU1RBTkNFIGluIEZ1bmN0aW9uUHJvdG8pKSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mKEZ1bmN0aW9uUHJvdG8sIEhBU19JTlNUQU5DRSwgeyB2YWx1ZTogZnVuY3Rpb24gKE8pIHtcbiAgaWYgKHR5cGVvZiB0aGlzICE9ICdmdW5jdGlvbicgfHwgIWlzT2JqZWN0KE8pKSByZXR1cm4gZmFsc2U7XG4gIGlmICghaXNPYmplY3QodGhpcy5wcm90b3R5cGUpKSByZXR1cm4gTyBpbnN0YW5jZW9mIHRoaXM7XG4gIC8vIGZvciBlbnZpcm9ubWVudCB3L28gbmF0aXZlIGBAQGhhc0luc3RhbmNlYCBsb2dpYyBlbm91Z2ggYGluc3RhbmNlb2ZgLCBidXQgYWRkIHRoaXM6XG4gIHdoaWxlIChPID0gZ2V0UHJvdG90eXBlT2YoTykpIGlmICh0aGlzLnByb3RvdHlwZSA9PT0gTykgcmV0dXJuIHRydWU7XG4gIHJldHVybiBmYWxzZTtcbn0gfSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYXJzZUludCA9IHJlcXVpcmUoJy4vX3BhcnNlLWludCcpO1xuLy8gMTguMi41IHBhcnNlSW50KHN0cmluZywgcmFkaXgpXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuRiAqIChwYXJzZUludCAhPSAkcGFyc2VJbnQpLCB7IHBhcnNlSW50OiAkcGFyc2VJbnQgfSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYXJzZUZsb2F0ID0gcmVxdWlyZSgnLi9fcGFyc2UtZmxvYXQnKTtcbi8vIDE4LjIuNCBwYXJzZUZsb2F0KHN0cmluZylcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5GICogKHBhcnNlRmxvYXQgIT0gJHBhcnNlRmxvYXQpLCB7IHBhcnNlRmxvYXQ6ICRwYXJzZUZsb2F0IH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xudmFyIGluaGVyaXRJZlJlcXVpcmVkID0gcmVxdWlyZSgnLi9faW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmY7XG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZjtcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgJHRyaW0gPSByZXF1aXJlKCcuL19zdHJpbmctdHJpbScpLnRyaW07XG52YXIgTlVNQkVSID0gJ051bWJlcic7XG52YXIgJE51bWJlciA9IGdsb2JhbFtOVU1CRVJdO1xudmFyIEJhc2UgPSAkTnVtYmVyO1xudmFyIHByb3RvID0gJE51bWJlci5wcm90b3R5cGU7XG4vLyBPcGVyYSB+MTIgaGFzIGJyb2tlbiBPYmplY3QjdG9TdHJpbmdcbnZhciBCUk9LRU5fQ09GID0gY29mKHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKShwcm90bykpID09IE5VTUJFUjtcbnZhciBUUklNID0gJ3RyaW0nIGluIFN0cmluZy5wcm90b3R5cGU7XG5cbi8vIDcuMS4zIFRvTnVtYmVyKGFyZ3VtZW50KVxudmFyIHRvTnVtYmVyID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHZhciBpdCA9IHRvUHJpbWl0aXZlKGFyZ3VtZW50LCBmYWxzZSk7XG4gIGlmICh0eXBlb2YgaXQgPT0gJ3N0cmluZycgJiYgaXQubGVuZ3RoID4gMikge1xuICAgIGl0ID0gVFJJTSA/IGl0LnRyaW0oKSA6ICR0cmltKGl0LCAzKTtcbiAgICB2YXIgZmlyc3QgPSBpdC5jaGFyQ29kZUF0KDApO1xuICAgIHZhciB0aGlyZCwgcmFkaXgsIG1heENvZGU7XG4gICAgaWYgKGZpcnN0ID09PSA0MyB8fCBmaXJzdCA9PT0gNDUpIHtcbiAgICAgIHRoaXJkID0gaXQuY2hhckNvZGVBdCgyKTtcbiAgICAgIGlmICh0aGlyZCA9PT0gODggfHwgdGhpcmQgPT09IDEyMCkgcmV0dXJuIE5hTjsgLy8gTnVtYmVyKCcrMHgxJykgc2hvdWxkIGJlIE5hTiwgb2xkIFY4IGZpeFxuICAgIH0gZWxzZSBpZiAoZmlyc3QgPT09IDQ4KSB7XG4gICAgICBzd2l0Y2ggKGl0LmNoYXJDb2RlQXQoMSkpIHtcbiAgICAgICAgY2FzZSA2NjogY2FzZSA5ODogcmFkaXggPSAyOyBtYXhDb2RlID0gNDk7IGJyZWFrOyAvLyBmYXN0IGVxdWFsIC9eMGJbMDFdKyQvaVxuICAgICAgICBjYXNlIDc5OiBjYXNlIDExMTogcmFkaXggPSA4OyBtYXhDb2RlID0gNTU7IGJyZWFrOyAvLyBmYXN0IGVxdWFsIC9eMG9bMC03XSskL2lcbiAgICAgICAgZGVmYXVsdDogcmV0dXJuICtpdDtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGRpZ2l0cyA9IGl0LnNsaWNlKDIpLCBpID0gMCwgbCA9IGRpZ2l0cy5sZW5ndGgsIGNvZGU7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgY29kZSA9IGRpZ2l0cy5jaGFyQ29kZUF0KGkpO1xuICAgICAgICAvLyBwYXJzZUludCBwYXJzZXMgYSBzdHJpbmcgdG8gYSBmaXJzdCB1bmF2YWlsYWJsZSBzeW1ib2xcbiAgICAgICAgLy8gYnV0IFRvTnVtYmVyIHNob3VsZCByZXR1cm4gTmFOIGlmIGEgc3RyaW5nIGNvbnRhaW5zIHVuYXZhaWxhYmxlIHN5bWJvbHNcbiAgICAgICAgaWYgKGNvZGUgPCA0OCB8fCBjb2RlID4gbWF4Q29kZSkgcmV0dXJuIE5hTjtcbiAgICAgIH0gcmV0dXJuIHBhcnNlSW50KGRpZ2l0cywgcmFkaXgpO1xuICAgIH1cbiAgfSByZXR1cm4gK2l0O1xufTtcblxuaWYgKCEkTnVtYmVyKCcgMG8xJykgfHwgISROdW1iZXIoJzBiMScpIHx8ICROdW1iZXIoJysweDEnKSkge1xuICAkTnVtYmVyID0gZnVuY3Rpb24gTnVtYmVyKHZhbHVlKSB7XG4gICAgdmFyIGl0ID0gYXJndW1lbnRzLmxlbmd0aCA8IDEgPyAwIDogdmFsdWU7XG4gICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgIHJldHVybiB0aGF0IGluc3RhbmNlb2YgJE51bWJlclxuICAgICAgLy8gY2hlY2sgb24gMS4uY29uc3RydWN0b3IoZm9vKSBjYXNlXG4gICAgICAmJiAoQlJPS0VOX0NPRiA/IGZhaWxzKGZ1bmN0aW9uICgpIHsgcHJvdG8udmFsdWVPZi5jYWxsKHRoYXQpOyB9KSA6IGNvZih0aGF0KSAhPSBOVU1CRVIpXG4gICAgICAgID8gaW5oZXJpdElmUmVxdWlyZWQobmV3IEJhc2UodG9OdW1iZXIoaXQpKSwgdGhhdCwgJE51bWJlcikgOiB0b051bWJlcihpdCk7XG4gIH07XG4gIGZvciAodmFyIGtleXMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZ09QTihCYXNlKSA6IChcbiAgICAvLyBFUzM6XG4gICAgJ01BWF9WQUxVRSxNSU5fVkFMVUUsTmFOLE5FR0FUSVZFX0lORklOSVRZLFBPU0lUSVZFX0lORklOSVRZLCcgK1xuICAgIC8vIEVTNiAoaW4gY2FzZSwgaWYgbW9kdWxlcyB3aXRoIEVTNiBOdW1iZXIgc3RhdGljcyByZXF1aXJlZCBiZWZvcmUpOlxuICAgICdFUFNJTE9OLGlzRmluaXRlLGlzSW50ZWdlcixpc05hTixpc1NhZmVJbnRlZ2VyLE1BWF9TQUZFX0lOVEVHRVIsJyArXG4gICAgJ01JTl9TQUZFX0lOVEVHRVIscGFyc2VGbG9hdCxwYXJzZUludCxpc0ludGVnZXInXG4gICkuc3BsaXQoJywnKSwgaiA9IDAsIGtleTsga2V5cy5sZW5ndGggPiBqOyBqKyspIHtcbiAgICBpZiAoaGFzKEJhc2UsIGtleSA9IGtleXNbal0pICYmICFoYXMoJE51bWJlciwga2V5KSkge1xuICAgICAgZFAoJE51bWJlciwga2V5LCBnT1BEKEJhc2UsIGtleSkpO1xuICAgIH1cbiAgfVxuICAkTnVtYmVyLnByb3RvdHlwZSA9IHByb3RvO1xuICBwcm90by5jb25zdHJ1Y3RvciA9ICROdW1iZXI7XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoZ2xvYmFsLCBOVU1CRVIsICROdW1iZXIpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgYU51bWJlclZhbHVlID0gcmVxdWlyZSgnLi9fYS1udW1iZXItdmFsdWUnKTtcbnZhciByZXBlYXQgPSByZXF1aXJlKCcuL19zdHJpbmctcmVwZWF0Jyk7XG52YXIgJHRvRml4ZWQgPSAxLjAudG9GaXhlZDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgZGF0YSA9IFswLCAwLCAwLCAwLCAwLCAwXTtcbnZhciBFUlJPUiA9ICdOdW1iZXIudG9GaXhlZDogaW5jb3JyZWN0IGludm9jYXRpb24hJztcbnZhciBaRVJPID0gJzAnO1xuXG52YXIgbXVsdGlwbHkgPSBmdW5jdGlvbiAobiwgYykge1xuICB2YXIgaSA9IC0xO1xuICB2YXIgYzIgPSBjO1xuICB3aGlsZSAoKytpIDwgNikge1xuICAgIGMyICs9IG4gKiBkYXRhW2ldO1xuICAgIGRhdGFbaV0gPSBjMiAlIDFlNztcbiAgICBjMiA9IGZsb29yKGMyIC8gMWU3KTtcbiAgfVxufTtcbnZhciBkaXZpZGUgPSBmdW5jdGlvbiAobikge1xuICB2YXIgaSA9IDY7XG4gIHZhciBjID0gMDtcbiAgd2hpbGUgKC0taSA+PSAwKSB7XG4gICAgYyArPSBkYXRhW2ldO1xuICAgIGRhdGFbaV0gPSBmbG9vcihjIC8gbik7XG4gICAgYyA9IChjICUgbikgKiAxZTc7XG4gIH1cbn07XG52YXIgbnVtVG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBpID0gNjtcbiAgdmFyIHMgPSAnJztcbiAgd2hpbGUgKC0taSA+PSAwKSB7XG4gICAgaWYgKHMgIT09ICcnIHx8IGkgPT09IDAgfHwgZGF0YVtpXSAhPT0gMCkge1xuICAgICAgdmFyIHQgPSBTdHJpbmcoZGF0YVtpXSk7XG4gICAgICBzID0gcyA9PT0gJycgPyB0IDogcyArIHJlcGVhdC5jYWxsKFpFUk8sIDcgLSB0Lmxlbmd0aCkgKyB0O1xuICAgIH1cbiAgfSByZXR1cm4gcztcbn07XG52YXIgcG93ID0gZnVuY3Rpb24gKHgsIG4sIGFjYykge1xuICByZXR1cm4gbiA9PT0gMCA/IGFjYyA6IG4gJSAyID09PSAxID8gcG93KHgsIG4gLSAxLCBhY2MgKiB4KSA6IHBvdyh4ICogeCwgbiAvIDIsIGFjYyk7XG59O1xudmFyIGxvZyA9IGZ1bmN0aW9uICh4KSB7XG4gIHZhciBuID0gMDtcbiAgdmFyIHgyID0geDtcbiAgd2hpbGUgKHgyID49IDQwOTYpIHtcbiAgICBuICs9IDEyO1xuICAgIHgyIC89IDQwOTY7XG4gIH1cbiAgd2hpbGUgKHgyID49IDIpIHtcbiAgICBuICs9IDE7XG4gICAgeDIgLz0gMjtcbiAgfSByZXR1cm4gbjtcbn07XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKCEhJHRvRml4ZWQgJiYgKFxuICAwLjAwMDA4LnRvRml4ZWQoMykgIT09ICcwLjAwMCcgfHxcbiAgMC45LnRvRml4ZWQoMCkgIT09ICcxJyB8fFxuICAxLjI1NS50b0ZpeGVkKDIpICE9PSAnMS4yNScgfHxcbiAgMTAwMDAwMDAwMDAwMDAwMDEyOC4wLnRvRml4ZWQoMCkgIT09ICcxMDAwMDAwMDAwMDAwMDAwMTI4J1xuKSB8fCAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIC8vIFY4IH4gQW5kcm9pZCA0LjMtXG4gICR0b0ZpeGVkLmNhbGwoe30pO1xufSkpLCAnTnVtYmVyJywge1xuICB0b0ZpeGVkOiBmdW5jdGlvbiB0b0ZpeGVkKGZyYWN0aW9uRGlnaXRzKSB7XG4gICAgdmFyIHggPSBhTnVtYmVyVmFsdWUodGhpcywgRVJST1IpO1xuICAgIHZhciBmID0gdG9JbnRlZ2VyKGZyYWN0aW9uRGlnaXRzKTtcbiAgICB2YXIgcyA9ICcnO1xuICAgIHZhciBtID0gWkVSTztcbiAgICB2YXIgZSwgeiwgaiwgaztcbiAgICBpZiAoZiA8IDAgfHwgZiA+IDIwKSB0aHJvdyBSYW5nZUVycm9yKEVSUk9SKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgaWYgKHggIT0geCkgcmV0dXJuICdOYU4nO1xuICAgIGlmICh4IDw9IC0xZTIxIHx8IHggPj0gMWUyMSkgcmV0dXJuIFN0cmluZyh4KTtcbiAgICBpZiAoeCA8IDApIHtcbiAgICAgIHMgPSAnLSc7XG4gICAgICB4ID0gLXg7XG4gICAgfVxuICAgIGlmICh4ID4gMWUtMjEpIHtcbiAgICAgIGUgPSBsb2coeCAqIHBvdygyLCA2OSwgMSkpIC0gNjk7XG4gICAgICB6ID0gZSA8IDAgPyB4ICogcG93KDIsIC1lLCAxKSA6IHggLyBwb3coMiwgZSwgMSk7XG4gICAgICB6ICo9IDB4MTAwMDAwMDAwMDAwMDA7XG4gICAgICBlID0gNTIgLSBlO1xuICAgICAgaWYgKGUgPiAwKSB7XG4gICAgICAgIG11bHRpcGx5KDAsIHopO1xuICAgICAgICBqID0gZjtcbiAgICAgICAgd2hpbGUgKGogPj0gNykge1xuICAgICAgICAgIG11bHRpcGx5KDFlNywgMCk7XG4gICAgICAgICAgaiAtPSA3O1xuICAgICAgICB9XG4gICAgICAgIG11bHRpcGx5KHBvdygxMCwgaiwgMSksIDApO1xuICAgICAgICBqID0gZSAtIDE7XG4gICAgICAgIHdoaWxlIChqID49IDIzKSB7XG4gICAgICAgICAgZGl2aWRlKDEgPDwgMjMpO1xuICAgICAgICAgIGogLT0gMjM7XG4gICAgICAgIH1cbiAgICAgICAgZGl2aWRlKDEgPDwgaik7XG4gICAgICAgIG11bHRpcGx5KDEsIDEpO1xuICAgICAgICBkaXZpZGUoMik7XG4gICAgICAgIG0gPSBudW1Ub1N0cmluZygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbXVsdGlwbHkoMCwgeik7XG4gICAgICAgIG11bHRpcGx5KDEgPDwgLWUsIDApO1xuICAgICAgICBtID0gbnVtVG9TdHJpbmcoKSArIHJlcGVhdC5jYWxsKFpFUk8sIGYpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZiA+IDApIHtcbiAgICAgIGsgPSBtLmxlbmd0aDtcbiAgICAgIG0gPSBzICsgKGsgPD0gZiA/ICcwLicgKyByZXBlYXQuY2FsbChaRVJPLCBmIC0gaykgKyBtIDogbS5zbGljZSgwLCBrIC0gZikgKyAnLicgKyBtLnNsaWNlKGsgLSBmKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSBzICsgbTtcbiAgICB9IHJldHVybiBtO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBhTnVtYmVyVmFsdWUgPSByZXF1aXJlKCcuL19hLW51bWJlci12YWx1ZScpO1xudmFyICR0b1ByZWNpc2lvbiA9IDEuMC50b1ByZWNpc2lvbjtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gSUU3LVxuICByZXR1cm4gJHRvUHJlY2lzaW9uLmNhbGwoMSwgdW5kZWZpbmVkKSAhPT0gJzEnO1xufSkgfHwgISRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIFY4IH4gQW5kcm9pZCA0LjMtXG4gICR0b1ByZWNpc2lvbi5jYWxsKHt9KTtcbn0pKSwgJ051bWJlcicsIHtcbiAgdG9QcmVjaXNpb246IGZ1bmN0aW9uIHRvUHJlY2lzaW9uKHByZWNpc2lvbikge1xuICAgIHZhciB0aGF0ID0gYU51bWJlclZhbHVlKHRoaXMsICdOdW1iZXIjdG9QcmVjaXNpb246IGluY29ycmVjdCBpbnZvY2F0aW9uIScpO1xuICAgIHJldHVybiBwcmVjaXNpb24gPT09IHVuZGVmaW5lZCA/ICR0b1ByZWNpc2lvbi5jYWxsKHRoYXQpIDogJHRvUHJlY2lzaW9uLmNhbGwodGhhdCwgcHJlY2lzaW9uKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4xLjIuMSBOdW1iZXIuRVBTSUxPTlxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7IEVQU0lMT046IE1hdGgucG93KDIsIC01MikgfSk7XG4iLCIvLyAyMC4xLjIuMiBOdW1iZXIuaXNGaW5pdGUobnVtYmVyKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBfaXNGaW5pdGUgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5pc0Zpbml0ZTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7XG4gIGlzRmluaXRlOiBmdW5jdGlvbiBpc0Zpbml0ZShpdCkge1xuICAgIHJldHVybiB0eXBlb2YgaXQgPT0gJ251bWJlcicgJiYgX2lzRmluaXRlKGl0KTtcbiAgfVxufSk7XG4iLCIvLyAyMC4xLjIuMyBOdW1iZXIuaXNJbnRlZ2VyKG51bWJlcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywgeyBpc0ludGVnZXI6IHJlcXVpcmUoJy4vX2lzLWludGVnZXInKSB9KTtcbiIsIi8vIDIwLjEuMi40IE51bWJlci5pc05hTihudW1iZXIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHtcbiAgaXNOYU46IGZ1bmN0aW9uIGlzTmFOKG51bWJlcikge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICByZXR1cm4gbnVtYmVyICE9IG51bWJlcjtcbiAgfVxufSk7XG4iLCIvLyAyMC4xLjIuNSBOdW1iZXIuaXNTYWZlSW50ZWdlcihudW1iZXIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGlzSW50ZWdlciA9IHJlcXVpcmUoJy4vX2lzLWludGVnZXInKTtcbnZhciBhYnMgPSBNYXRoLmFicztcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7XG4gIGlzU2FmZUludGVnZXI6IGZ1bmN0aW9uIGlzU2FmZUludGVnZXIobnVtYmVyKSB7XG4gICAgcmV0dXJuIGlzSW50ZWdlcihudW1iZXIpICYmIGFicyhudW1iZXIpIDw9IDB4MWZmZmZmZmZmZmZmZmY7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMS4yLjYgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywgeyBNQVhfU0FGRV9JTlRFR0VSOiAweDFmZmZmZmZmZmZmZmZmIH0pO1xuIiwiLy8gMjAuMS4yLjEwIE51bWJlci5NSU5fU0FGRV9JTlRFR0VSXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHsgTUlOX1NBRkVfSU5URUdFUjogLTB4MWZmZmZmZmZmZmZmZmYgfSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYXJzZUZsb2F0ID0gcmVxdWlyZSgnLi9fcGFyc2UtZmxvYXQnKTtcbi8vIDIwLjEuMi4xMiBOdW1iZXIucGFyc2VGbG9hdChzdHJpbmcpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChOdW1iZXIucGFyc2VGbG9hdCAhPSAkcGFyc2VGbG9hdCksICdOdW1iZXInLCB7IHBhcnNlRmxvYXQ6ICRwYXJzZUZsb2F0IH0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFyc2VJbnQgPSByZXF1aXJlKCcuL19wYXJzZS1pbnQnKTtcbi8vIDIwLjEuMi4xMyBOdW1iZXIucGFyc2VJbnQoc3RyaW5nLCByYWRpeClcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKE51bWJlci5wYXJzZUludCAhPSAkcGFyc2VJbnQpLCAnTnVtYmVyJywgeyBwYXJzZUludDogJHBhcnNlSW50IH0pO1xuIiwiLy8gMjAuMi4yLjMgTWF0aC5hY29zaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBsb2cxcCA9IHJlcXVpcmUoJy4vX21hdGgtbG9nMXAnKTtcbnZhciBzcXJ0ID0gTWF0aC5zcXJ0O1xudmFyICRhY29zaCA9IE1hdGguYWNvc2g7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISgkYWNvc2hcbiAgLy8gVjggYnVnOiBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzUwOVxuICAmJiBNYXRoLmZsb29yKCRhY29zaChOdW1iZXIuTUFYX1ZBTFVFKSkgPT0gNzEwXG4gIC8vIFRvciBCcm93c2VyIGJ1ZzogTWF0aC5hY29zaChJbmZpbml0eSkgLT4gTmFOXG4gICYmICRhY29zaChJbmZpbml0eSkgPT0gSW5maW5pdHlcbiksICdNYXRoJywge1xuICBhY29zaDogZnVuY3Rpb24gYWNvc2goeCkge1xuICAgIHJldHVybiAoeCA9ICt4KSA8IDEgPyBOYU4gOiB4ID4gOTQ5MDYyNjUuNjI0MjUxNTZcbiAgICAgID8gTWF0aC5sb2coeCkgKyBNYXRoLkxOMlxuICAgICAgOiBsb2cxcCh4IC0gMSArIHNxcnQoeCAtIDEpICogc3FydCh4ICsgMSkpO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi41IE1hdGguYXNpbmgoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGFzaW5oID0gTWF0aC5hc2luaDtcblxuZnVuY3Rpb24gYXNpbmgoeCkge1xuICByZXR1cm4gIWlzRmluaXRlKHggPSAreCkgfHwgeCA9PSAwID8geCA6IHggPCAwID8gLWFzaW5oKC14KSA6IE1hdGgubG9nKHggKyBNYXRoLnNxcnQoeCAqIHggKyAxKSk7XG59XG5cbi8vIFRvciBCcm93c2VyIGJ1ZzogTWF0aC5hc2luaCgwKSAtPiAtMFxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKCRhc2luaCAmJiAxIC8gJGFzaW5oKDApID4gMCksICdNYXRoJywgeyBhc2luaDogYXNpbmggfSk7XG4iLCIvLyAyMC4yLjIuNyBNYXRoLmF0YW5oKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRhdGFuaCA9IE1hdGguYXRhbmg7XG5cbi8vIFRvciBCcm93c2VyIGJ1ZzogTWF0aC5hdGFuaCgtMCkgLT4gMFxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKCRhdGFuaCAmJiAxIC8gJGF0YW5oKC0wKSA8IDApLCAnTWF0aCcsIHtcbiAgYXRhbmg6IGZ1bmN0aW9uIGF0YW5oKHgpIHtcbiAgICByZXR1cm4gKHggPSAreCkgPT0gMCA/IHggOiBNYXRoLmxvZygoMSArIHgpIC8gKDEgLSB4KSkgLyAyO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi45IE1hdGguY2JydCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBzaWduID0gcmVxdWlyZSgnLi9fbWF0aC1zaWduJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgY2JydDogZnVuY3Rpb24gY2JydCh4KSB7XG4gICAgcmV0dXJuIHNpZ24oeCA9ICt4KSAqIE1hdGgucG93KE1hdGguYWJzKHgpLCAxIC8gMyk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjExIE1hdGguY2x6MzIoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgY2x6MzI6IGZ1bmN0aW9uIGNsejMyKHgpIHtcbiAgICByZXR1cm4gKHggPj4+PSAwKSA/IDMxIC0gTWF0aC5mbG9vcihNYXRoLmxvZyh4ICsgMC41KSAqIE1hdGguTE9HMkUpIDogMzI7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjEyIE1hdGguY29zaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBleHAgPSBNYXRoLmV4cDtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBjb3NoOiBmdW5jdGlvbiBjb3NoKHgpIHtcbiAgICByZXR1cm4gKGV4cCh4ID0gK3gpICsgZXhwKC14KSkgLyAyO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4xNCBNYXRoLmV4cG0xKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRleHBtMSA9IHJlcXVpcmUoJy4vX21hdGgtZXhwbTEnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoJGV4cG0xICE9IE1hdGguZXhwbTEpLCAnTWF0aCcsIHsgZXhwbTE6ICRleHBtMSB9KTtcbiIsIi8vIDIwLjIuMi4xNiBNYXRoLmZyb3VuZCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBmcm91bmQ6IHJlcXVpcmUoJy4vX21hdGgtZnJvdW5kJykgfSk7XG4iLCIvLyAyMC4yLjIuMTcgTWF0aC5oeXBvdChbdmFsdWUxWywgdmFsdWUyWywg4oCmIF1dXSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYWJzID0gTWF0aC5hYnM7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgaHlwb3Q6IGZ1bmN0aW9uIGh5cG90KHZhbHVlMSwgdmFsdWUyKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICB2YXIgc3VtID0gMDtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBsYXJnID0gMDtcbiAgICB2YXIgYXJnLCBkaXY7XG4gICAgd2hpbGUgKGkgPCBhTGVuKSB7XG4gICAgICBhcmcgPSBhYnMoYXJndW1lbnRzW2krK10pO1xuICAgICAgaWYgKGxhcmcgPCBhcmcpIHtcbiAgICAgICAgZGl2ID0gbGFyZyAvIGFyZztcbiAgICAgICAgc3VtID0gc3VtICogZGl2ICogZGl2ICsgMTtcbiAgICAgICAgbGFyZyA9IGFyZztcbiAgICAgIH0gZWxzZSBpZiAoYXJnID4gMCkge1xuICAgICAgICBkaXYgPSBhcmcgLyBsYXJnO1xuICAgICAgICBzdW0gKz0gZGl2ICogZGl2O1xuICAgICAgfSBlbHNlIHN1bSArPSBhcmc7XG4gICAgfVxuICAgIHJldHVybiBsYXJnID09PSBJbmZpbml0eSA/IEluZmluaXR5IDogbGFyZyAqIE1hdGguc3FydChzdW0pO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4xOCBNYXRoLmltdWwoeCwgeSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGltdWwgPSBNYXRoLmltdWw7XG5cbi8vIHNvbWUgV2ViS2l0IHZlcnNpb25zIGZhaWxzIHdpdGggYmlnIG51bWJlcnMsIHNvbWUgaGFzIHdyb25nIGFyaXR5XG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gJGltdWwoMHhmZmZmZmZmZiwgNSkgIT0gLTUgfHwgJGltdWwubGVuZ3RoICE9IDI7XG59KSwgJ01hdGgnLCB7XG4gIGltdWw6IGZ1bmN0aW9uIGltdWwoeCwgeSkge1xuICAgIHZhciBVSU5UMTYgPSAweGZmZmY7XG4gICAgdmFyIHhuID0gK3g7XG4gICAgdmFyIHluID0gK3k7XG4gICAgdmFyIHhsID0gVUlOVDE2ICYgeG47XG4gICAgdmFyIHlsID0gVUlOVDE2ICYgeW47XG4gICAgcmV0dXJuIDAgfCB4bCAqIHlsICsgKChVSU5UMTYgJiB4biA+Pj4gMTYpICogeWwgKyB4bCAqIChVSU5UMTYgJiB5biA+Pj4gMTYpIDw8IDE2ID4+PiAwKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMjEgTWF0aC5sb2cxMCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBsb2cxMDogZnVuY3Rpb24gbG9nMTAoeCkge1xuICAgIHJldHVybiBNYXRoLmxvZyh4KSAqIE1hdGguTE9HMTBFO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4yMCBNYXRoLmxvZzFwKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IGxvZzFwOiByZXF1aXJlKCcuL19tYXRoLWxvZzFwJykgfSk7XG4iLCIvLyAyMC4yLjIuMjIgTWF0aC5sb2cyKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGxvZzI6IGZ1bmN0aW9uIGxvZzIoeCkge1xuICAgIHJldHVybiBNYXRoLmxvZyh4KSAvIE1hdGguTE4yO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4yOCBNYXRoLnNpZ24oeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgc2lnbjogcmVxdWlyZSgnLi9fbWF0aC1zaWduJykgfSk7XG4iLCIvLyAyMC4yLjIuMzAgTWF0aC5zaW5oKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGV4cG0xID0gcmVxdWlyZSgnLi9fbWF0aC1leHBtMScpO1xudmFyIGV4cCA9IE1hdGguZXhwO1xuXG4vLyBWOCBuZWFyIENocm9taXVtIDM4IGhhcyBhIHByb2JsZW0gd2l0aCB2ZXJ5IHNtYWxsIG51bWJlcnNcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAhTWF0aC5zaW5oKC0yZS0xNykgIT0gLTJlLTE3O1xufSksICdNYXRoJywge1xuICBzaW5oOiBmdW5jdGlvbiBzaW5oKHgpIHtcbiAgICByZXR1cm4gTWF0aC5hYnMoeCA9ICt4KSA8IDFcbiAgICAgID8gKGV4cG0xKHgpIC0gZXhwbTEoLXgpKSAvIDJcbiAgICAgIDogKGV4cCh4IC0gMSkgLSBleHAoLXggLSAxKSkgKiAoTWF0aC5FIC8gMik7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjMzIE1hdGgudGFuaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBleHBtMSA9IHJlcXVpcmUoJy4vX21hdGgtZXhwbTEnKTtcbnZhciBleHAgPSBNYXRoLmV4cDtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICB0YW5oOiBmdW5jdGlvbiB0YW5oKHgpIHtcbiAgICB2YXIgYSA9IGV4cG0xKHggPSAreCk7XG4gICAgdmFyIGIgPSBleHBtMSgteCk7XG4gICAgcmV0dXJuIGEgPT0gSW5maW5pdHkgPyAxIDogYiA9PSBJbmZpbml0eSA/IC0xIDogKGEgLSBiKSAvIChleHAoeCkgKyBleHAoLXgpKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMzQgTWF0aC50cnVuYyh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICB0cnVuYzogZnVuY3Rpb24gdHJ1bmMoaXQpIHtcbiAgICByZXR1cm4gKGl0ID4gMCA/IE1hdGguZmxvb3IgOiBNYXRoLmNlaWwpKGl0KTtcbiAgfVxufSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgZnJvbUNoYXJDb2RlID0gU3RyaW5nLmZyb21DaGFyQ29kZTtcbnZhciAkZnJvbUNvZGVQb2ludCA9IFN0cmluZy5mcm9tQ29kZVBvaW50O1xuXG4vLyBsZW5ndGggc2hvdWxkIGJlIDEsIG9sZCBGRiBwcm9ibGVtXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICghISRmcm9tQ29kZVBvaW50ICYmICRmcm9tQ29kZVBvaW50Lmxlbmd0aCAhPSAxKSwgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4yLjIgU3RyaW5nLmZyb21Db2RlUG9pbnQoLi4uY29kZVBvaW50cylcbiAgZnJvbUNvZGVQb2ludDogZnVuY3Rpb24gZnJvbUNvZGVQb2ludCh4KSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICB2YXIgcmVzID0gW107XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgY29kZTtcbiAgICB3aGlsZSAoYUxlbiA+IGkpIHtcbiAgICAgIGNvZGUgPSArYXJndW1lbnRzW2krK107XG4gICAgICBpZiAodG9BYnNvbHV0ZUluZGV4KGNvZGUsIDB4MTBmZmZmKSAhPT0gY29kZSkgdGhyb3cgUmFuZ2VFcnJvcihjb2RlICsgJyBpcyBub3QgYSB2YWxpZCBjb2RlIHBvaW50Jyk7XG4gICAgICByZXMucHVzaChjb2RlIDwgMHgxMDAwMFxuICAgICAgICA/IGZyb21DaGFyQ29kZShjb2RlKVxuICAgICAgICA6IGZyb21DaGFyQ29kZSgoKGNvZGUgLT0gMHgxMDAwMCkgPj4gMTApICsgMHhkODAwLCBjb2RlICUgMHg0MDAgKyAweGRjMDApXG4gICAgICApO1xuICAgIH0gcmV0dXJuIHJlcy5qb2luKCcnKTtcbiAgfVxufSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4yLjQgU3RyaW5nLnJhdyhjYWxsU2l0ZSwgLi4uc3Vic3RpdHV0aW9ucylcbiAgcmF3OiBmdW5jdGlvbiByYXcoY2FsbFNpdGUpIHtcbiAgICB2YXIgdHBsID0gdG9JT2JqZWN0KGNhbGxTaXRlLnJhdyk7XG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKHRwbC5sZW5ndGgpO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgcmVzID0gW107XG4gICAgdmFyIGkgPSAwO1xuICAgIHdoaWxlIChsZW4gPiBpKSB7XG4gICAgICByZXMucHVzaChTdHJpbmcodHBsW2krK10pKTtcbiAgICAgIGlmIChpIDwgYUxlbikgcmVzLnB1c2goU3RyaW5nKGFyZ3VtZW50c1tpXSkpO1xuICAgIH0gcmV0dXJuIHJlcy5qb2luKCcnKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMS4xLjMuMjUgU3RyaW5nLnByb3RvdHlwZS50cmltKClcbnJlcXVpcmUoJy4vX3N0cmluZy10cmltJykoJ3RyaW0nLCBmdW5jdGlvbiAoJHRyaW0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHRyaW0oKSB7XG4gICAgcmV0dXJuICR0cmltKHRoaXMsIDMpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykodHJ1ZSk7XG5cbi8vIDIxLjEuMy4yNyBTdHJpbmcucHJvdG90eXBlW0BAaXRlcmF0b3JdKClcbnJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJykoU3RyaW5nLCAnU3RyaW5nJywgZnVuY3Rpb24gKGl0ZXJhdGVkKSB7XG4gIHRoaXMuX3QgPSBTdHJpbmcoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbi8vIDIxLjEuNS4yLjEgJVN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uICgpIHtcbiAgdmFyIE8gPSB0aGlzLl90O1xuICB2YXIgaW5kZXggPSB0aGlzLl9pO1xuICB2YXIgcG9pbnQ7XG4gIGlmIChpbmRleCA+PSBPLmxlbmd0aCkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICBwb2ludCA9ICRhdChPLCBpbmRleCk7XG4gIHRoaXMuX2kgKz0gcG9pbnQubGVuZ3RoO1xuICByZXR1cm4geyB2YWx1ZTogcG9pbnQsIGRvbmU6IGZhbHNlIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykoZmFsc2UpO1xuJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMy4zIFN0cmluZy5wcm90b3R5cGUuY29kZVBvaW50QXQocG9zKVxuICBjb2RlUG9pbnRBdDogZnVuY3Rpb24gY29kZVBvaW50QXQocG9zKSB7XG4gICAgcmV0dXJuICRhdCh0aGlzLCBwb3MpO1xuICB9XG59KTtcbiIsIi8vIDIxLjEuMy42IFN0cmluZy5wcm90b3R5cGUuZW5kc1dpdGgoc2VhcmNoU3RyaW5nIFssIGVuZFBvc2l0aW9uXSlcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBjb250ZXh0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWNvbnRleHQnKTtcbnZhciBFTkRTX1dJVEggPSAnZW5kc1dpdGgnO1xudmFyICRlbmRzV2l0aCA9ICcnW0VORFNfV0lUSF07XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMtaXMtcmVnZXhwJykoRU5EU19XSVRIKSwgJ1N0cmluZycsIHtcbiAgZW5kc1dpdGg6IGZ1bmN0aW9uIGVuZHNXaXRoKHNlYXJjaFN0cmluZyAvKiAsIGVuZFBvc2l0aW9uID0gQGxlbmd0aCAqLykge1xuICAgIHZhciB0aGF0ID0gY29udGV4dCh0aGlzLCBzZWFyY2hTdHJpbmcsIEVORFNfV0lUSCk7XG4gICAgdmFyIGVuZFBvc2l0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKHRoYXQubGVuZ3RoKTtcbiAgICB2YXIgZW5kID0gZW5kUG9zaXRpb24gPT09IHVuZGVmaW5lZCA/IGxlbiA6IE1hdGgubWluKHRvTGVuZ3RoKGVuZFBvc2l0aW9uKSwgbGVuKTtcbiAgICB2YXIgc2VhcmNoID0gU3RyaW5nKHNlYXJjaFN0cmluZyk7XG4gICAgcmV0dXJuICRlbmRzV2l0aFxuICAgICAgPyAkZW5kc1dpdGguY2FsbCh0aGF0LCBzZWFyY2gsIGVuZClcbiAgICAgIDogdGhhdC5zbGljZShlbmQgLSBzZWFyY2gubGVuZ3RoLCBlbmQpID09PSBzZWFyY2g7XG4gIH1cbn0pO1xuIiwiLy8gMjEuMS4zLjcgU3RyaW5nLnByb3RvdHlwZS5pbmNsdWRlcyhzZWFyY2hTdHJpbmcsIHBvc2l0aW9uID0gMClcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY29udGV4dCA9IHJlcXVpcmUoJy4vX3N0cmluZy1jb250ZXh0Jyk7XG52YXIgSU5DTFVERVMgPSAnaW5jbHVkZXMnO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzLWlzLXJlZ2V4cCcpKElOQ0xVREVTKSwgJ1N0cmluZycsIHtcbiAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKHNlYXJjaFN0cmluZyAvKiAsIHBvc2l0aW9uID0gMCAqLykge1xuICAgIHJldHVybiAhIX5jb250ZXh0KHRoaXMsIHNlYXJjaFN0cmluZywgSU5DTFVERVMpXG4gICAgICAuaW5kZXhPZihzZWFyY2hTdHJpbmcsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4zLjEzIFN0cmluZy5wcm90b3R5cGUucmVwZWF0KGNvdW50KVxuICByZXBlYXQ6IHJlcXVpcmUoJy4vX3N0cmluZy1yZXBlYXQnKVxufSk7XG4iLCIvLyAyMS4xLjMuMTggU3RyaW5nLnByb3RvdHlwZS5zdGFydHNXaXRoKHNlYXJjaFN0cmluZyBbLCBwb3NpdGlvbiBdKVxuJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGNvbnRleHQgPSByZXF1aXJlKCcuL19zdHJpbmctY29udGV4dCcpO1xudmFyIFNUQVJUU19XSVRIID0gJ3N0YXJ0c1dpdGgnO1xudmFyICRzdGFydHNXaXRoID0gJydbU1RBUlRTX1dJVEhdO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzLWlzLXJlZ2V4cCcpKFNUQVJUU19XSVRIKSwgJ1N0cmluZycsIHtcbiAgc3RhcnRzV2l0aDogZnVuY3Rpb24gc3RhcnRzV2l0aChzZWFyY2hTdHJpbmcgLyogLCBwb3NpdGlvbiA9IDAgKi8pIHtcbiAgICB2YXIgdGhhdCA9IGNvbnRleHQodGhpcywgc2VhcmNoU3RyaW5nLCBTVEFSVFNfV0lUSCk7XG4gICAgdmFyIGluZGV4ID0gdG9MZW5ndGgoTWF0aC5taW4oYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIHRoYXQubGVuZ3RoKSk7XG4gICAgdmFyIHNlYXJjaCA9IFN0cmluZyhzZWFyY2hTdHJpbmcpO1xuICAgIHJldHVybiAkc3RhcnRzV2l0aFxuICAgICAgPyAkc3RhcnRzV2l0aC5jYWxsKHRoYXQsIHNlYXJjaCwgaW5kZXgpXG4gICAgICA6IHRoYXQuc2xpY2UoaW5kZXgsIGluZGV4ICsgc2VhcmNoLmxlbmd0aCkgPT09IHNlYXJjaDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4yIFN0cmluZy5wcm90b3R5cGUuYW5jaG9yKG5hbWUpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdhbmNob3InLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gYW5jaG9yKG5hbWUpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYScsICduYW1lJywgbmFtZSk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjMgU3RyaW5nLnByb3RvdHlwZS5iaWcoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnYmlnJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGJpZygpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYmlnJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNCBTdHJpbmcucHJvdG90eXBlLmJsaW5rKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2JsaW5rJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGJsaW5rKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdibGluaycsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjUgU3RyaW5nLnByb3RvdHlwZS5ib2xkKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2JvbGQnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gYm9sZCgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYicsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjYgU3RyaW5nLnByb3RvdHlwZS5maXhlZCgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdmaXhlZCcsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBmaXhlZCgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAndHQnLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy43IFN0cmluZy5wcm90b3R5cGUuZm9udGNvbG9yKGNvbG9yKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnZm9udGNvbG9yJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZvbnRjb2xvcihjb2xvcikge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdmb250JywgJ2NvbG9yJywgY29sb3IpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy44IFN0cmluZy5wcm90b3R5cGUuZm9udHNpemUoc2l6ZSlcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2ZvbnRzaXplJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZvbnRzaXplKHNpemUpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnZm9udCcsICdzaXplJywgc2l6ZSk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjkgU3RyaW5nLnByb3RvdHlwZS5pdGFsaWNzKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2l0YWxpY3MnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gaXRhbGljcygpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnaScsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjEwIFN0cmluZy5wcm90b3R5cGUubGluayh1cmwpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdsaW5rJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGxpbmsodXJsKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2EnLCAnaHJlZicsIHVybCk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjExIFN0cmluZy5wcm90b3R5cGUuc21hbGwoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnc21hbGwnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gc21hbGwoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3NtYWxsJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTIgU3RyaW5nLnByb3RvdHlwZS5zdHJpa2UoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnc3RyaWtlJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHN0cmlrZSgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc3RyaWtlJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTMgU3RyaW5nLnByb3RvdHlwZS5zdWIoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnc3ViJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHN1YigpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc3ViJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTQgU3RyaW5nLnByb3RvdHlwZS5zdXAoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnc3VwJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHN1cCgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc3VwJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiLy8gMjAuMy4zLjEgLyAxNS45LjQuNCBEYXRlLm5vdygpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ0RhdGUnLCB7IG5vdzogZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCk7IH0gfSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIG5ldyBEYXRlKE5hTikudG9KU09OKCkgIT09IG51bGxcbiAgICB8fCBEYXRlLnByb3RvdHlwZS50b0pTT04uY2FsbCh7IHRvSVNPU3RyaW5nOiBmdW5jdGlvbiAoKSB7IHJldHVybiAxOyB9IH0pICE9PSAxO1xufSksICdEYXRlJywge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgdG9KU09OOiBmdW5jdGlvbiB0b0pTT04oa2V5KSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgcHYgPSB0b1ByaW1pdGl2ZShPKTtcbiAgICByZXR1cm4gdHlwZW9mIHB2ID09ICdudW1iZXInICYmICFpc0Zpbml0ZShwdikgPyBudWxsIDogTy50b0lTT1N0cmluZygpO1xuICB9XG59KTtcbiIsIi8vIDIwLjMuNC4zNiAvIDE1LjkuNS40MyBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZygpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvSVNPU3RyaW5nID0gcmVxdWlyZSgnLi9fZGF0ZS10by1pc28tc3RyaW5nJyk7XG5cbi8vIFBoYW50b21KUyAvIG9sZCBXZWJLaXQgaGFzIGEgYnJva2VuIGltcGxlbWVudGF0aW9uc1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcgIT09IHRvSVNPU3RyaW5nKSwgJ0RhdGUnLCB7XG4gIHRvSVNPU3RyaW5nOiB0b0lTT1N0cmluZ1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMC4zLjQuMzYgLyAxNS45LjUuNDMgRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcoKVxudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBnZXRUaW1lID0gRGF0ZS5wcm90b3R5cGUuZ2V0VGltZTtcbnZhciAkdG9JU09TdHJpbmcgPSBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZztcblxudmFyIGx6ID0gZnVuY3Rpb24gKG51bSkge1xuICByZXR1cm4gbnVtID4gOSA/IG51bSA6ICcwJyArIG51bTtcbn07XG5cbi8vIFBoYW50b21KUyAvIG9sZCBXZWJLaXQgaGFzIGEgYnJva2VuIGltcGxlbWVudGF0aW9uc1xubW9kdWxlLmV4cG9ydHMgPSAoZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gJHRvSVNPU3RyaW5nLmNhbGwobmV3IERhdGUoLTVlMTMgLSAxKSkgIT0gJzAzODUtMDctMjVUMDc6MDY6MzkuOTk5Wic7XG59KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAkdG9JU09TdHJpbmcuY2FsbChuZXcgRGF0ZShOYU4pKTtcbn0pKSA/IGZ1bmN0aW9uIHRvSVNPU3RyaW5nKCkge1xuICBpZiAoIWlzRmluaXRlKGdldFRpbWUuY2FsbCh0aGlzKSkpIHRocm93IFJhbmdlRXJyb3IoJ0ludmFsaWQgdGltZSB2YWx1ZScpO1xuICB2YXIgZCA9IHRoaXM7XG4gIHZhciB5ID0gZC5nZXRVVENGdWxsWWVhcigpO1xuICB2YXIgbSA9IGQuZ2V0VVRDTWlsbGlzZWNvbmRzKCk7XG4gIHZhciBzID0geSA8IDAgPyAnLScgOiB5ID4gOTk5OSA/ICcrJyA6ICcnO1xuICByZXR1cm4gcyArICgnMDAwMDAnICsgTWF0aC5hYnMoeSkpLnNsaWNlKHMgPyAtNiA6IC00KSArXG4gICAgJy0nICsgbHooZC5nZXRVVENNb250aCgpICsgMSkgKyAnLScgKyBseihkLmdldFVUQ0RhdGUoKSkgK1xuICAgICdUJyArIGx6KGQuZ2V0VVRDSG91cnMoKSkgKyAnOicgKyBseihkLmdldFVUQ01pbnV0ZXMoKSkgK1xuICAgICc6JyArIGx6KGQuZ2V0VVRDU2Vjb25kcygpKSArICcuJyArIChtID4gOTkgPyBtIDogJzAnICsgbHoobSkpICsgJ1onO1xufSA6ICR0b0lTT1N0cmluZztcbiIsInZhciBEYXRlUHJvdG8gPSBEYXRlLnByb3RvdHlwZTtcbnZhciBJTlZBTElEX0RBVEUgPSAnSW52YWxpZCBEYXRlJztcbnZhciBUT19TVFJJTkcgPSAndG9TdHJpbmcnO1xudmFyICR0b1N0cmluZyA9IERhdGVQcm90b1tUT19TVFJJTkddO1xudmFyIGdldFRpbWUgPSBEYXRlUHJvdG8uZ2V0VGltZTtcbmlmIChuZXcgRGF0ZShOYU4pICsgJycgIT0gSU5WQUxJRF9EQVRFKSB7XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoRGF0ZVByb3RvLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHZhciB2YWx1ZSA9IGdldFRpbWUuY2FsbCh0aGlzKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZSA/ICR0b1N0cmluZy5jYWxsKHRoaXMpIDogSU5WQUxJRF9EQVRFO1xuICB9KTtcbn1cbiIsInZhciBUT19QUklNSVRJVkUgPSByZXF1aXJlKCcuL193a3MnKSgndG9QcmltaXRpdmUnKTtcbnZhciBwcm90byA9IERhdGUucHJvdG90eXBlO1xuXG5pZiAoIShUT19QUklNSVRJVkUgaW4gcHJvdG8pKSByZXF1aXJlKCcuL19oaWRlJykocHJvdG8sIFRPX1BSSU1JVElWRSwgcmVxdWlyZSgnLi9fZGF0ZS10by1wcmltaXRpdmUnKSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIE5VTUJFUiA9ICdudW1iZXInO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChoaW50KSB7XG4gIGlmIChoaW50ICE9PSAnc3RyaW5nJyAmJiBoaW50ICE9PSBOVU1CRVIgJiYgaGludCAhPT0gJ2RlZmF1bHQnKSB0aHJvdyBUeXBlRXJyb3IoJ0luY29ycmVjdCBoaW50Jyk7XG4gIHJldHVybiB0b1ByaW1pdGl2ZShhbk9iamVjdCh0aGlzKSwgaGludCAhPSBOVU1CRVIpO1xufTtcbiIsIi8vIDIyLjEuMi4yIC8gMTUuNC4zLjIgQXJyYXkuaXNBcnJheShhcmcpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ0FycmF5JywgeyBpc0FycmF5OiByZXF1aXJlKCcuL19pcy1hcnJheScpIH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuL19pdGVyLWNhbGwnKTtcbnZhciBpc0FycmF5SXRlciA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fY3JlYXRlLXByb3BlcnR5Jyk7XG52YXIgZ2V0SXRlckZuID0gcmVxdWlyZSgnLi9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKShmdW5jdGlvbiAoaXRlcikgeyBBcnJheS5mcm9tKGl0ZXIpOyB9KSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjIuMSBBcnJheS5mcm9tKGFycmF5TGlrZSwgbWFwZm4gPSB1bmRlZmluZWQsIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gIGZyb206IGZ1bmN0aW9uIGZyb20oYXJyYXlMaWtlIC8qICwgbWFwZm4gPSB1bmRlZmluZWQsIHRoaXNBcmcgPSB1bmRlZmluZWQgKi8pIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KGFycmF5TGlrZSk7XG4gICAgdmFyIEMgPSB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nID8gdGhpcyA6IEFycmF5O1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgbWFwZm4gPSBhTGVuID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgbWFwcGluZyA9IG1hcGZuICE9PSB1bmRlZmluZWQ7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgaXRlckZuID0gZ2V0SXRlckZuKE8pO1xuICAgIHZhciBsZW5ndGgsIHJlc3VsdCwgc3RlcCwgaXRlcmF0b3I7XG4gICAgaWYgKG1hcHBpbmcpIG1hcGZuID0gY3R4KG1hcGZuLCBhTGVuID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCwgMik7XG4gICAgLy8gaWYgb2JqZWN0IGlzbid0IGl0ZXJhYmxlIG9yIGl0J3MgYXJyYXkgd2l0aCBkZWZhdWx0IGl0ZXJhdG9yIC0gdXNlIHNpbXBsZSBjYXNlXG4gICAgaWYgKGl0ZXJGbiAhPSB1bmRlZmluZWQgJiYgIShDID09IEFycmF5ICYmIGlzQXJyYXlJdGVyKGl0ZXJGbikpKSB7XG4gICAgICBmb3IgKGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoTyksIHJlc3VsdCA9IG5ldyBDKCk7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTsgaW5kZXgrKykge1xuICAgICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBtYXBwaW5nID8gY2FsbChpdGVyYXRvciwgbWFwZm4sIFtzdGVwLnZhbHVlLCBpbmRleF0sIHRydWUpIDogc3RlcC52YWx1ZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICAgIGZvciAocmVzdWx0ID0gbmV3IEMobGVuZ3RoKTsgbGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgbWFwcGluZyA/IG1hcGZuKE9baW5kZXhdLCBpbmRleCkgOiBPW2luZGV4XSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJlc3VsdC5sZW5ndGggPSBpbmRleDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuL19jcmVhdGUtcHJvcGVydHknKTtcblxuLy8gV2ViS2l0IEFycmF5Lm9mIGlzbid0IGdlbmVyaWNcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEYoKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuICEoQXJyYXkub2YuY2FsbChGKSBpbnN0YW5jZW9mIEYpO1xufSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4yLjMgQXJyYXkub2YoIC4uLml0ZW1zKVxuICBvZjogZnVuY3Rpb24gb2YoLyogLi4uYXJncyAqLykge1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciByZXN1bHQgPSBuZXcgKHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgPyB0aGlzIDogQXJyYXkpKGFMZW4pO1xuICAgIHdoaWxlIChhTGVuID4gaW5kZXgpIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIGFyZ3VtZW50c1tpbmRleCsrXSk7XG4gICAgcmVzdWx0Lmxlbmd0aCA9IGFMZW47XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMi4xLjMuMTMgQXJyYXkucHJvdG90eXBlLmpvaW4oc2VwYXJhdG9yKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgYXJyYXlKb2luID0gW10uam9pbjtcblxuLy8gZmFsbGJhY2sgZm9yIG5vdCBhcnJheS1saWtlIHN0cmluZ3NcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKHJlcXVpcmUoJy4vX2lvYmplY3QnKSAhPSBPYmplY3QgfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShhcnJheUpvaW4pKSwgJ0FycmF5Jywge1xuICBqb2luOiBmdW5jdGlvbiBqb2luKHNlcGFyYXRvcikge1xuICAgIHJldHVybiBhcnJheUpvaW4uY2FsbCh0b0lPYmplY3QodGhpcyksIHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkID8gJywnIDogc2VwYXJhdG9yKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGh0bWwgPSByZXF1aXJlKCcuL19odG1sJyk7XG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGFycmF5U2xpY2UgPSBbXS5zbGljZTtcblxuLy8gZmFsbGJhY2sgZm9yIG5vdCBhcnJheS1saWtlIEVTMyBzdHJpbmdzIGFuZCBET00gb2JqZWN0c1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgaWYgKGh0bWwpIGFycmF5U2xpY2UuY2FsbChodG1sKTtcbn0pLCAnQXJyYXknLCB7XG4gIHNsaWNlOiBmdW5jdGlvbiBzbGljZShiZWdpbiwgZW5kKSB7XG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKHRoaXMubGVuZ3RoKTtcbiAgICB2YXIga2xhc3MgPSBjb2YodGhpcyk7XG4gICAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiBlbmQ7XG4gICAgaWYgKGtsYXNzID09ICdBcnJheScpIHJldHVybiBhcnJheVNsaWNlLmNhbGwodGhpcywgYmVnaW4sIGVuZCk7XG4gICAgdmFyIHN0YXJ0ID0gdG9BYnNvbHV0ZUluZGV4KGJlZ2luLCBsZW4pO1xuICAgIHZhciB1cFRvID0gdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuKTtcbiAgICB2YXIgc2l6ZSA9IHRvTGVuZ3RoKHVwVG8gLSBzdGFydCk7XG4gICAgdmFyIGNsb25lZCA9IG5ldyBBcnJheShzaXplKTtcbiAgICB2YXIgaSA9IDA7XG4gICAgZm9yICg7IGkgPCBzaXplOyBpKyspIGNsb25lZFtpXSA9IGtsYXNzID09ICdTdHJpbmcnXG4gICAgICA/IHRoaXMuY2hhckF0KHN0YXJ0ICsgaSlcbiAgICAgIDogdGhpc1tzdGFydCArIGldO1xuICAgIHJldHVybiBjbG9uZWQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgJHNvcnQgPSBbXS5zb3J0O1xudmFyIHRlc3QgPSBbMSwgMiwgM107XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gSUU4LVxuICB0ZXN0LnNvcnQodW5kZWZpbmVkKTtcbn0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIFY4IGJ1Z1xuICB0ZXN0LnNvcnQobnVsbCk7XG4gIC8vIE9sZCBXZWJLaXRcbn0pIHx8ICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoJHNvcnQpKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMjUgQXJyYXkucHJvdG90eXBlLnNvcnQoY29tcGFyZWZuKVxuICBzb3J0OiBmdW5jdGlvbiBzb3J0KGNvbXBhcmVmbikge1xuICAgIHJldHVybiBjb21wYXJlZm4gPT09IHVuZGVmaW5lZFxuICAgICAgPyAkc29ydC5jYWxsKHRvT2JqZWN0KHRoaXMpKVxuICAgICAgOiAkc29ydC5jYWxsKHRvT2JqZWN0KHRoaXMpLCBhRnVuY3Rpb24oY29tcGFyZWZuKSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZm9yRWFjaCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgwKTtcbnZhciBTVFJJQ1QgPSByZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uZm9yRWFjaCwgdHJ1ZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIVNUUklDVCwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTAgLyAxNS40LjQuMTggQXJyYXkucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkZm9yRWFjaCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL19pcy1hcnJheScpO1xudmFyIFNQRUNJRVMgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbCkge1xuICB2YXIgQztcbiAgaWYgKGlzQXJyYXkob3JpZ2luYWwpKSB7XG4gICAgQyA9IG9yaWdpbmFsLmNvbnN0cnVjdG9yO1xuICAgIC8vIGNyb3NzLXJlYWxtIGZhbGxiYWNrXG4gICAgaWYgKHR5cGVvZiBDID09ICdmdW5jdGlvbicgJiYgKEMgPT09IEFycmF5IHx8IGlzQXJyYXkoQy5wcm90b3R5cGUpKSkgQyA9IHVuZGVmaW5lZDtcbiAgICBpZiAoaXNPYmplY3QoQykpIHtcbiAgICAgIEMgPSBDW1NQRUNJRVNdO1xuICAgICAgaWYgKEMgPT09IG51bGwpIEMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9IHJldHVybiBDID09PSB1bmRlZmluZWQgPyBBcnJheSA6IEM7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkbWFwID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDEpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10ubWFwLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTUgLyAxNS40LjQuMTkgQXJyYXkucHJvdG90eXBlLm1hcChjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBtYXA6IGZ1bmN0aW9uIG1hcChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkbWFwKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZmlsdGVyID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDIpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uZmlsdGVyLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuNyAvIDE1LjQuNC4yMCBBcnJheS5wcm90b3R5cGUuZmlsdGVyKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIGZpbHRlcjogZnVuY3Rpb24gZmlsdGVyKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRmaWx0ZXIodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRzb21lID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDMpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uc29tZSwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjIzIC8gMTUuNC40LjE3IEFycmF5LnByb3RvdHlwZS5zb21lKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIHNvbWU6IGZ1bmN0aW9uIHNvbWUoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJHNvbWUodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRldmVyeSA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSg0KTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLmV2ZXJ5LCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuNSAvIDE1LjQuNC4xNiBBcnJheS5wcm90b3R5cGUuZXZlcnkoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgZXZlcnk6IGZ1bmN0aW9uIGV2ZXJ5KGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRldmVyeSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHJlZHVjZSA9IHJlcXVpcmUoJy4vX2FycmF5LXJlZHVjZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10ucmVkdWNlLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTggLyAxNS40LjQuMjEgQXJyYXkucHJvdG90eXBlLnJlZHVjZShjYWxsYmFja2ZuIFssIGluaXRpYWxWYWx1ZV0pXG4gIHJlZHVjZTogZnVuY3Rpb24gcmVkdWNlKGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHtcbiAgICByZXR1cm4gJHJlZHVjZSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoLCBhcmd1bWVudHNbMV0sIGZhbHNlKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRyZWR1Y2UgPSByZXF1aXJlKCcuL19hcnJheS1yZWR1Y2UnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLnJlZHVjZVJpZ2h0LCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTkgLyAxNS40LjQuMjIgQXJyYXkucHJvdG90eXBlLnJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4gWywgaW5pdGlhbFZhbHVlXSlcbiAgcmVkdWNlUmlnaHQ6IGZ1bmN0aW9uIHJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHtcbiAgICByZXR1cm4gJHJlZHVjZSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoLCBhcmd1bWVudHNbMV0sIHRydWUpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGluZGV4T2YgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpKGZhbHNlKTtcbnZhciAkbmF0aXZlID0gW10uaW5kZXhPZjtcbnZhciBORUdBVElWRV9aRVJPID0gISEkbmF0aXZlICYmIDEgLyBbMV0uaW5kZXhPZigxLCAtMCkgPCAwO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChORUdBVElWRV9aRVJPIHx8ICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoJG5hdGl2ZSkpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xMSAvIDE1LjQuNC4xNCBBcnJheS5wcm90b3R5cGUuaW5kZXhPZihzZWFyY2hFbGVtZW50IFssIGZyb21JbmRleF0pXG4gIGluZGV4T2Y6IGZ1bmN0aW9uIGluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCA9IDAgKi8pIHtcbiAgICByZXR1cm4gTkVHQVRJVkVfWkVST1xuICAgICAgLy8gY29udmVydCAtMCB0byArMFxuICAgICAgPyAkbmF0aXZlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgMFxuICAgICAgOiAkaW5kZXhPZih0aGlzLCBzZWFyY2hFbGVtZW50LCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyICRuYXRpdmUgPSBbXS5sYXN0SW5kZXhPZjtcbnZhciBORUdBVElWRV9aRVJPID0gISEkbmF0aXZlICYmIDEgLyBbMV0ubGFzdEluZGV4T2YoMSwgLTApIDwgMDtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoTkVHQVRJVkVfWkVSTyB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKCRuYXRpdmUpKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTQgLyAxNS40LjQuMTUgQXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mKHNlYXJjaEVsZW1lbnQgWywgZnJvbUluZGV4XSlcbiAgbGFzdEluZGV4T2Y6IGZ1bmN0aW9uIGxhc3RJbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggPSBAWyotMV0gKi8pIHtcbiAgICAvLyBjb252ZXJ0IC0wIHRvICswXG4gICAgaWYgKE5FR0FUSVZFX1pFUk8pIHJldHVybiAkbmF0aXZlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgMDtcbiAgICB2YXIgTyA9IHRvSU9iamVjdCh0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IGxlbmd0aCAtIDE7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSBpbmRleCA9IE1hdGgubWluKGluZGV4LCB0b0ludGVnZXIoYXJndW1lbnRzWzFdKSk7XG4gICAgaWYgKGluZGV4IDwgMCkgaW5kZXggPSBsZW5ndGggKyBpbmRleDtcbiAgICBmb3IgKDtpbmRleCA+PSAwOyBpbmRleC0tKSBpZiAoaW5kZXggaW4gTykgaWYgKE9baW5kZXhdID09PSBzZWFyY2hFbGVtZW50KSByZXR1cm4gaW5kZXggfHwgMDtcbiAgICByZXR1cm4gLTE7XG4gIH1cbn0pO1xuIiwiLy8gMjIuMS4zLjMgQXJyYXkucHJvdG90eXBlLmNvcHlXaXRoaW4odGFyZ2V0LCBzdGFydCwgZW5kID0gdGhpcy5sZW5ndGgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5JywgeyBjb3B5V2l0aGluOiByZXF1aXJlKCcuL19hcnJheS1jb3B5LXdpdGhpbicpIH0pO1xuXG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKSgnY29weVdpdGhpbicpO1xuIiwiLy8gMjIuMS4zLjYgQXJyYXkucHJvdG90eXBlLmZpbGwodmFsdWUsIHN0YXJ0ID0gMCwgZW5kID0gdGhpcy5sZW5ndGgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5JywgeyBmaWxsOiByZXF1aXJlKCcuL19hcnJheS1maWxsJykgfSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdmaWxsJyk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMi4xLjMuOCBBcnJheS5wcm90b3R5cGUuZmluZChwcmVkaWNhdGUsIHRoaXNBcmcgPSB1bmRlZmluZWQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRmaW5kID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDUpO1xudmFyIEtFWSA9ICdmaW5kJztcbnZhciBmb3JjZWQgPSB0cnVlO1xuLy8gU2hvdWxkbid0IHNraXAgaG9sZXNcbmlmIChLRVkgaW4gW10pIEFycmF5KDEpW0tFWV0oZnVuY3Rpb24gKCkgeyBmb3JjZWQgPSBmYWxzZTsgfSk7XG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZvcmNlZCwgJ0FycmF5Jywge1xuICBmaW5kOiBmdW5jdGlvbiBmaW5kKGNhbGxiYWNrZm4gLyogLCB0aGF0ID0gdW5kZWZpbmVkICovKSB7XG4gICAgcmV0dXJuICRmaW5kKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKShLRVkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjIuMS4zLjkgQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleChwcmVkaWNhdGUsIHRoaXNBcmcgPSB1bmRlZmluZWQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRmaW5kID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDYpO1xudmFyIEtFWSA9ICdmaW5kSW5kZXgnO1xudmFyIGZvcmNlZCA9IHRydWU7XG4vLyBTaG91bGRuJ3Qgc2tpcCBob2xlc1xuaWYgKEtFWSBpbiBbXSkgQXJyYXkoMSlbS0VZXShmdW5jdGlvbiAoKSB7IGZvcmNlZCA9IGZhbHNlOyB9KTtcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZm9yY2VkLCAnQXJyYXknLCB7XG4gIGZpbmRJbmRleDogZnVuY3Rpb24gZmluZEluZGV4KGNhbGxiYWNrZm4gLyogLCB0aGF0ID0gdW5kZWZpbmVkICovKSB7XG4gICAgcmV0dXJuICRmaW5kKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKShLRVkpO1xuIiwicmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKSgnQXJyYXknKTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4vX2luaGVyaXQtaWYtcmVxdWlyZWQnKTtcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbnZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpO1xudmFyICRmbGFncyA9IHJlcXVpcmUoJy4vX2ZsYWdzJyk7XG52YXIgJFJlZ0V4cCA9IGdsb2JhbC5SZWdFeHA7XG52YXIgQmFzZSA9ICRSZWdFeHA7XG52YXIgcHJvdG8gPSAkUmVnRXhwLnByb3RvdHlwZTtcbnZhciByZTEgPSAvYS9nO1xudmFyIHJlMiA9IC9hL2c7XG4vLyBcIm5ld1wiIGNyZWF0ZXMgYSBuZXcgb2JqZWN0LCBvbGQgd2Via2l0IGJ1Z2d5IGhlcmVcbnZhciBDT1JSRUNUX05FVyA9IG5ldyAkUmVnRXhwKHJlMSkgIT09IHJlMTtcblxuaWYgKHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgKCFDT1JSRUNUX05FVyB8fCByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmUyW3JlcXVpcmUoJy4vX3drcycpKCdtYXRjaCcpXSA9IGZhbHNlO1xuICAvLyBSZWdFeHAgY29uc3RydWN0b3IgY2FuIGFsdGVyIGZsYWdzIGFuZCBJc1JlZ0V4cCB3b3JrcyBjb3JyZWN0IHdpdGggQEBtYXRjaFxuICByZXR1cm4gJFJlZ0V4cChyZTEpICE9IHJlMSB8fCAkUmVnRXhwKHJlMikgPT0gcmUyIHx8ICRSZWdFeHAocmUxLCAnaScpICE9ICcvYS9pJztcbn0pKSkge1xuICAkUmVnRXhwID0gZnVuY3Rpb24gUmVnRXhwKHAsIGYpIHtcbiAgICB2YXIgdGlSRSA9IHRoaXMgaW5zdGFuY2VvZiAkUmVnRXhwO1xuICAgIHZhciBwaVJFID0gaXNSZWdFeHAocCk7XG4gICAgdmFyIGZpVSA9IGYgPT09IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gIXRpUkUgJiYgcGlSRSAmJiBwLmNvbnN0cnVjdG9yID09PSAkUmVnRXhwICYmIGZpVSA/IHBcbiAgICAgIDogaW5oZXJpdElmUmVxdWlyZWQoQ09SUkVDVF9ORVdcbiAgICAgICAgPyBuZXcgQmFzZShwaVJFICYmICFmaVUgPyBwLnNvdXJjZSA6IHAsIGYpXG4gICAgICAgIDogQmFzZSgocGlSRSA9IHAgaW5zdGFuY2VvZiAkUmVnRXhwKSA/IHAuc291cmNlIDogcCwgcGlSRSAmJiBmaVUgPyAkZmxhZ3MuY2FsbChwKSA6IGYpXG4gICAgICAsIHRpUkUgPyB0aGlzIDogcHJvdG8sICRSZWdFeHApO1xuICB9O1xuICB2YXIgcHJveHkgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAga2V5IGluICRSZWdFeHAgfHwgZFAoJFJlZ0V4cCwga2V5LCB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIEJhc2Vba2V5XTsgfSxcbiAgICAgIHNldDogZnVuY3Rpb24gKGl0KSB7IEJhc2Vba2V5XSA9IGl0OyB9XG4gICAgfSk7XG4gIH07XG4gIGZvciAodmFyIGtleXMgPSBnT1BOKEJhc2UpLCBpID0gMDsga2V5cy5sZW5ndGggPiBpOykgcHJveHkoa2V5c1tpKytdKTtcbiAgcHJvdG8uY29uc3RydWN0b3IgPSAkUmVnRXhwO1xuICAkUmVnRXhwLnByb3RvdHlwZSA9IHByb3RvO1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKGdsb2JhbCwgJ1JlZ0V4cCcsICRSZWdFeHApO1xufVxuXG5yZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKCdSZWdFeHAnKTtcbiIsIid1c2Ugc3RyaWN0JztcbnJlcXVpcmUoJy4vZXM2LnJlZ2V4cC5mbGFncycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgJGZsYWdzID0gcmVxdWlyZSgnLi9fZmxhZ3MnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciAkdG9TdHJpbmcgPSAvLi9bVE9fU1RSSU5HXTtcblxudmFyIGRlZmluZSA9IGZ1bmN0aW9uIChmbikge1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKFJlZ0V4cC5wcm90b3R5cGUsIFRPX1NUUklORywgZm4sIHRydWUpO1xufTtcblxuLy8gMjEuMi41LjE0IFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcoKVxuaWYgKHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkgeyByZXR1cm4gJHRvU3RyaW5nLmNhbGwoeyBzb3VyY2U6ICdhJywgZmxhZ3M6ICdiJyB9KSAhPSAnL2EvYic7IH0pKSB7XG4gIGRlZmluZShmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICB2YXIgUiA9IGFuT2JqZWN0KHRoaXMpO1xuICAgIHJldHVybiAnLycuY29uY2F0KFIuc291cmNlLCAnLycsXG4gICAgICAnZmxhZ3MnIGluIFIgPyBSLmZsYWdzIDogIURFU0NSSVBUT1JTICYmIFIgaW5zdGFuY2VvZiBSZWdFeHAgPyAkZmxhZ3MuY2FsbChSKSA6IHVuZGVmaW5lZCk7XG4gIH0pO1xuLy8gRkY0NC0gUmVnRXhwI3RvU3RyaW5nIGhhcyBhIHdyb25nIG5hbWVcbn0gZWxzZSBpZiAoJHRvU3RyaW5nLm5hbWUgIT0gVE9fU1RSSU5HKSB7XG4gIGRlZmluZShmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gJHRvU3RyaW5nLmNhbGwodGhpcyk7XG4gIH0pO1xufVxuIiwiLy8gQEBtYXRjaCBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdtYXRjaCcsIDEsIGZ1bmN0aW9uIChkZWZpbmVkLCBNQVRDSCwgJG1hdGNoKSB7XG4gIC8vIDIxLjEuMy4xMSBTdHJpbmcucHJvdG90eXBlLm1hdGNoKHJlZ2V4cClcbiAgcmV0dXJuIFtmdW5jdGlvbiBtYXRjaChyZWdleHApIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIE8gPSBkZWZpbmVkKHRoaXMpO1xuICAgIHZhciBmbiA9IHJlZ2V4cCA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiByZWdleHBbTUFUQ0hdO1xuICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkID8gZm4uY2FsbChyZWdleHAsIE8pIDogbmV3IFJlZ0V4cChyZWdleHApW01BVENIXShTdHJpbmcoTykpO1xuICB9LCAkbWF0Y2hdO1xufSk7XG4iLCIvLyBAQHJlcGxhY2UgbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgncmVwbGFjZScsIDIsIGZ1bmN0aW9uIChkZWZpbmVkLCBSRVBMQUNFLCAkcmVwbGFjZSkge1xuICAvLyAyMS4xLjMuMTQgU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlKHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpXG4gIHJldHVybiBbZnVuY3Rpb24gcmVwbGFjZShzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcbiAgICB2YXIgZm4gPSBzZWFyY2hWYWx1ZSA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBzZWFyY2hWYWx1ZVtSRVBMQUNFXTtcbiAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZFxuICAgICAgPyBmbi5jYWxsKHNlYXJjaFZhbHVlLCBPLCByZXBsYWNlVmFsdWUpXG4gICAgICA6ICRyZXBsYWNlLmNhbGwoU3RyaW5nKE8pLCBzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKTtcbiAgfSwgJHJlcGxhY2VdO1xufSk7XG4iLCIvLyBAQHNlYXJjaCBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdzZWFyY2gnLCAxLCBmdW5jdGlvbiAoZGVmaW5lZCwgU0VBUkNILCAkc2VhcmNoKSB7XG4gIC8vIDIxLjEuMy4xNSBTdHJpbmcucHJvdG90eXBlLnNlYXJjaChyZWdleHApXG4gIHJldHVybiBbZnVuY3Rpb24gc2VhcmNoKHJlZ2V4cCkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgdmFyIGZuID0gcmVnZXhwID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHJlZ2V4cFtTRUFSQ0hdO1xuICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkID8gZm4uY2FsbChyZWdleHAsIE8pIDogbmV3IFJlZ0V4cChyZWdleHApW1NFQVJDSF0oU3RyaW5nKE8pKTtcbiAgfSwgJHNlYXJjaF07XG59KTtcbiIsIi8vIEBAc3BsaXQgbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgnc3BsaXQnLCAyLCBmdW5jdGlvbiAoZGVmaW5lZCwgU1BMSVQsICRzcGxpdCkge1xuICAndXNlIHN0cmljdCc7XG4gIHZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpO1xuICB2YXIgX3NwbGl0ID0gJHNwbGl0O1xuICB2YXIgJHB1c2ggPSBbXS5wdXNoO1xuICB2YXIgJFNQTElUID0gJ3NwbGl0JztcbiAgdmFyIExFTkdUSCA9ICdsZW5ndGgnO1xuICB2YXIgTEFTVF9JTkRFWCA9ICdsYXN0SW5kZXgnO1xuICBpZiAoXG4gICAgJ2FiYmMnWyRTUExJVF0oLyhiKSovKVsxXSA9PSAnYycgfHxcbiAgICAndGVzdCdbJFNQTElUXSgvKD86KS8sIC0xKVtMRU5HVEhdICE9IDQgfHxcbiAgICAnYWInWyRTUExJVF0oLyg/OmFiKSovKVtMRU5HVEhdICE9IDIgfHxcbiAgICAnLidbJFNQTElUXSgvKC4/KSguPykvKVtMRU5HVEhdICE9IDQgfHxcbiAgICAnLidbJFNQTElUXSgvKCkoKS8pW0xFTkdUSF0gPiAxIHx8XG4gICAgJydbJFNQTElUXSgvLj8vKVtMRU5HVEhdXG4gICkge1xuICAgIHZhciBOUENHID0gLygpPz8vLmV4ZWMoJycpWzFdID09PSB1bmRlZmluZWQ7IC8vIG5vbnBhcnRpY2lwYXRpbmcgY2FwdHVyaW5nIGdyb3VwXG4gICAgLy8gYmFzZWQgb24gZXM1LXNoaW0gaW1wbGVtZW50YXRpb24sIG5lZWQgdG8gcmV3b3JrIGl0XG4gICAgJHNwbGl0ID0gZnVuY3Rpb24gKHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIHZhciBzdHJpbmcgPSBTdHJpbmcodGhpcyk7XG4gICAgICBpZiAoc2VwYXJhdG9yID09PSB1bmRlZmluZWQgJiYgbGltaXQgPT09IDApIHJldHVybiBbXTtcbiAgICAgIC8vIElmIGBzZXBhcmF0b3JgIGlzIG5vdCBhIHJlZ2V4LCB1c2UgbmF0aXZlIHNwbGl0XG4gICAgICBpZiAoIWlzUmVnRXhwKHNlcGFyYXRvcikpIHJldHVybiBfc3BsaXQuY2FsbChzdHJpbmcsIHNlcGFyYXRvciwgbGltaXQpO1xuICAgICAgdmFyIG91dHB1dCA9IFtdO1xuICAgICAgdmFyIGZsYWdzID0gKHNlcGFyYXRvci5pZ25vcmVDYXNlID8gJ2knIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3IubXVsdGlsaW5lID8gJ20nIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3IudW5pY29kZSA/ICd1JyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLnN0aWNreSA/ICd5JyA6ICcnKTtcbiAgICAgIHZhciBsYXN0TGFzdEluZGV4ID0gMDtcbiAgICAgIHZhciBzcGxpdExpbWl0ID0gbGltaXQgPT09IHVuZGVmaW5lZCA/IDQyOTQ5NjcyOTUgOiBsaW1pdCA+Pj4gMDtcbiAgICAgIC8vIE1ha2UgYGdsb2JhbGAgYW5kIGF2b2lkIGBsYXN0SW5kZXhgIGlzc3VlcyBieSB3b3JraW5nIHdpdGggYSBjb3B5XG4gICAgICB2YXIgc2VwYXJhdG9yQ29weSA9IG5ldyBSZWdFeHAoc2VwYXJhdG9yLnNvdXJjZSwgZmxhZ3MgKyAnZycpO1xuICAgICAgdmFyIHNlcGFyYXRvcjIsIG1hdGNoLCBsYXN0SW5kZXgsIGxhc3RMZW5ndGgsIGk7XG4gICAgICAvLyBEb2Vzbid0IG5lZWQgZmxhZ3MgZ3ksIGJ1dCB0aGV5IGRvbid0IGh1cnRcbiAgICAgIGlmICghTlBDRykgc2VwYXJhdG9yMiA9IG5ldyBSZWdFeHAoJ14nICsgc2VwYXJhdG9yQ29weS5zb3VyY2UgKyAnJCg/IVxcXFxzKScsIGZsYWdzKTtcbiAgICAgIHdoaWxlIChtYXRjaCA9IHNlcGFyYXRvckNvcHkuZXhlYyhzdHJpbmcpKSB7XG4gICAgICAgIC8vIGBzZXBhcmF0b3JDb3B5Lmxhc3RJbmRleGAgaXMgbm90IHJlbGlhYmxlIGNyb3NzLWJyb3dzZXJcbiAgICAgICAgbGFzdEluZGV4ID0gbWF0Y2guaW5kZXggKyBtYXRjaFswXVtMRU5HVEhdO1xuICAgICAgICBpZiAobGFzdEluZGV4ID4gbGFzdExhc3RJbmRleCkge1xuICAgICAgICAgIG91dHB1dC5wdXNoKHN0cmluZy5zbGljZShsYXN0TGFzdEluZGV4LCBtYXRjaC5pbmRleCkpO1xuICAgICAgICAgIC8vIEZpeCBicm93c2VycyB3aG9zZSBgZXhlY2AgbWV0aG9kcyBkb24ndCBjb25zaXN0ZW50bHkgcmV0dXJuIGB1bmRlZmluZWRgIGZvciBOUENHXG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWxvb3AtZnVuY1xuICAgICAgICAgIGlmICghTlBDRyAmJiBtYXRjaFtMRU5HVEhdID4gMSkgbWF0Y2hbMF0ucmVwbGFjZShzZXBhcmF0b3IyLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBmb3IgKGkgPSAxOyBpIDwgYXJndW1lbnRzW0xFTkdUSF0gLSAyOyBpKyspIGlmIChhcmd1bWVudHNbaV0gPT09IHVuZGVmaW5lZCkgbWF0Y2hbaV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaWYgKG1hdGNoW0xFTkdUSF0gPiAxICYmIG1hdGNoLmluZGV4IDwgc3RyaW5nW0xFTkdUSF0pICRwdXNoLmFwcGx5KG91dHB1dCwgbWF0Y2guc2xpY2UoMSkpO1xuICAgICAgICAgIGxhc3RMZW5ndGggPSBtYXRjaFswXVtMRU5HVEhdO1xuICAgICAgICAgIGxhc3RMYXN0SW5kZXggPSBsYXN0SW5kZXg7XG4gICAgICAgICAgaWYgKG91dHB1dFtMRU5HVEhdID49IHNwbGl0TGltaXQpIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZXBhcmF0b3JDb3B5W0xBU1RfSU5ERVhdID09PSBtYXRjaC5pbmRleCkgc2VwYXJhdG9yQ29weVtMQVNUX0lOREVYXSsrOyAvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wXG4gICAgICB9XG4gICAgICBpZiAobGFzdExhc3RJbmRleCA9PT0gc3RyaW5nW0xFTkdUSF0pIHtcbiAgICAgICAgaWYgKGxhc3RMZW5ndGggfHwgIXNlcGFyYXRvckNvcHkudGVzdCgnJykpIG91dHB1dC5wdXNoKCcnKTtcbiAgICAgIH0gZWxzZSBvdXRwdXQucHVzaChzdHJpbmcuc2xpY2UobGFzdExhc3RJbmRleCkpO1xuICAgICAgcmV0dXJuIG91dHB1dFtMRU5HVEhdID4gc3BsaXRMaW1pdCA/IG91dHB1dC5zbGljZSgwLCBzcGxpdExpbWl0KSA6IG91dHB1dDtcbiAgICB9O1xuICAvLyBDaGFrcmEsIFY4XG4gIH0gZWxzZSBpZiAoJzAnWyRTUExJVF0odW5kZWZpbmVkLCAwKVtMRU5HVEhdKSB7XG4gICAgJHNwbGl0ID0gZnVuY3Rpb24gKHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIHJldHVybiBzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCAmJiBsaW1pdCA9PT0gMCA/IFtdIDogX3NwbGl0LmNhbGwodGhpcywgc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgfTtcbiAgfVxuICAvLyAyMS4xLjMuMTcgU3RyaW5nLnByb3RvdHlwZS5zcGxpdChzZXBhcmF0b3IsIGxpbWl0KVxuICByZXR1cm4gW2Z1bmN0aW9uIHNwbGl0KHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgdmFyIGZuID0gc2VwYXJhdG9yID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHNlcGFyYXRvcltTUExJVF07XG4gICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWQgPyBmbi5jYWxsKHNlcGFyYXRvciwgTywgbGltaXQpIDogJHNwbGl0LmNhbGwoU3RyaW5nKE8pLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgfSwgJHNwbGl0XTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgdGFzayA9IHJlcXVpcmUoJy4vX3Rhc2snKS5zZXQ7XG52YXIgbWljcm90YXNrID0gcmVxdWlyZSgnLi9fbWljcm90YXNrJykoKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSA9IHJlcXVpcmUoJy4vX25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcbnZhciBwZXJmb3JtID0gcmVxdWlyZSgnLi9fcGVyZm9ybScpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4vX3VzZXItYWdlbnQnKTtcbnZhciBwcm9taXNlUmVzb2x2ZSA9IHJlcXVpcmUoJy4vX3Byb21pc2UtcmVzb2x2ZScpO1xudmFyIFBST01JU0UgPSAnUHJvbWlzZSc7XG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgdmVyc2lvbnMgPSBwcm9jZXNzICYmIHByb2Nlc3MudmVyc2lvbnM7XG52YXIgdjggPSB2ZXJzaW9ucyAmJiB2ZXJzaW9ucy52OCB8fCAnJztcbnZhciAkUHJvbWlzZSA9IGdsb2JhbFtQUk9NSVNFXTtcbnZhciBpc05vZGUgPSBjbGFzc29mKHByb2Nlc3MpID09ICdwcm9jZXNzJztcbnZhciBlbXB0eSA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbnZhciBJbnRlcm5hbCwgbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5LCBPd25Qcm9taXNlQ2FwYWJpbGl0eSwgV3JhcHBlcjtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmY7XG5cbnZhciBVU0VfTkFUSVZFID0gISFmdW5jdGlvbiAoKSB7XG4gIHRyeSB7XG4gICAgLy8gY29ycmVjdCBzdWJjbGFzc2luZyB3aXRoIEBAc3BlY2llcyBzdXBwb3J0XG4gICAgdmFyIHByb21pc2UgPSAkUHJvbWlzZS5yZXNvbHZlKDEpO1xuICAgIHZhciBGYWtlUHJvbWlzZSA9IChwcm9taXNlLmNvbnN0cnVjdG9yID0ge30pW3JlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyldID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgICAgIGV4ZWMoZW1wdHksIGVtcHR5KTtcbiAgICB9O1xuICAgIC8vIHVuaGFuZGxlZCByZWplY3Rpb25zIHRyYWNraW5nIHN1cHBvcnQsIE5vZGVKUyBQcm9taXNlIHdpdGhvdXQgaXQgZmFpbHMgQEBzcGVjaWVzIHRlc3RcbiAgICByZXR1cm4gKGlzTm9kZSB8fCB0eXBlb2YgUHJvbWlzZVJlamVjdGlvbkV2ZW50ID09ICdmdW5jdGlvbicpXG4gICAgICAmJiBwcm9taXNlLnRoZW4oZW1wdHkpIGluc3RhbmNlb2YgRmFrZVByb21pc2VcbiAgICAgIC8vIHY4IDYuNiAoTm9kZSAxMCBhbmQgQ2hyb21lIDY2KSBoYXZlIGEgYnVnIHdpdGggcmVzb2x2aW5nIGN1c3RvbSB0aGVuYWJsZXNcbiAgICAgIC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTgzMDU2NVxuICAgICAgLy8gd2UgY2FuJ3QgZGV0ZWN0IGl0IHN5bmNocm9ub3VzbHksIHNvIGp1c3QgY2hlY2sgdmVyc2lvbnNcbiAgICAgICYmIHY4LmluZGV4T2YoJzYuNicpICE9PSAwXG4gICAgICAmJiB1c2VyQWdlbnQuaW5kZXhPZignQ2hyb21lLzY2JykgPT09IC0xO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbn0oKTtcblxuLy8gaGVscGVyc1xudmFyIGlzVGhlbmFibGUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIHRoZW47XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgdHlwZW9mICh0aGVuID0gaXQudGhlbikgPT0gJ2Z1bmN0aW9uJyA/IHRoZW4gOiBmYWxzZTtcbn07XG52YXIgbm90aWZ5ID0gZnVuY3Rpb24gKHByb21pc2UsIGlzUmVqZWN0KSB7XG4gIGlmIChwcm9taXNlLl9uKSByZXR1cm47XG4gIHByb21pc2UuX24gPSB0cnVlO1xuICB2YXIgY2hhaW4gPSBwcm9taXNlLl9jO1xuICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgIHZhciB2YWx1ZSA9IHByb21pc2UuX3Y7XG4gICAgdmFyIG9rID0gcHJvbWlzZS5fcyA9PSAxO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgcnVuID0gZnVuY3Rpb24gKHJlYWN0aW9uKSB7XG4gICAgICB2YXIgaGFuZGxlciA9IG9rID8gcmVhY3Rpb24ub2sgOiByZWFjdGlvbi5mYWlsO1xuICAgICAgdmFyIHJlc29sdmUgPSByZWFjdGlvbi5yZXNvbHZlO1xuICAgICAgdmFyIHJlamVjdCA9IHJlYWN0aW9uLnJlamVjdDtcbiAgICAgIHZhciBkb21haW4gPSByZWFjdGlvbi5kb21haW47XG4gICAgICB2YXIgcmVzdWx0LCB0aGVuLCBleGl0ZWQ7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoaGFuZGxlcikge1xuICAgICAgICAgIGlmICghb2spIHtcbiAgICAgICAgICAgIGlmIChwcm9taXNlLl9oID09IDIpIG9uSGFuZGxlVW5oYW5kbGVkKHByb21pc2UpO1xuICAgICAgICAgICAgcHJvbWlzZS5faCA9IDE7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChoYW5kbGVyID09PSB0cnVlKSByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChkb21haW4pIGRvbWFpbi5lbnRlcigpO1xuICAgICAgICAgICAgcmVzdWx0ID0gaGFuZGxlcih2YWx1ZSk7IC8vIG1heSB0aHJvd1xuICAgICAgICAgICAgaWYgKGRvbWFpbikge1xuICAgICAgICAgICAgICBkb21haW4uZXhpdCgpO1xuICAgICAgICAgICAgICBleGl0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocmVzdWx0ID09PSByZWFjdGlvbi5wcm9taXNlKSB7XG4gICAgICAgICAgICByZWplY3QoVHlwZUVycm9yKCdQcm9taXNlLWNoYWluIGN5Y2xlJykpO1xuICAgICAgICAgIH0gZWxzZSBpZiAodGhlbiA9IGlzVGhlbmFibGUocmVzdWx0KSkge1xuICAgICAgICAgICAgdGhlbi5jYWxsKHJlc3VsdCwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9IGVsc2UgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9IGVsc2UgcmVqZWN0KHZhbHVlKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKGRvbWFpbiAmJiAhZXhpdGVkKSBkb21haW4uZXhpdCgpO1xuICAgICAgICByZWplY3QoZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICB3aGlsZSAoY2hhaW4ubGVuZ3RoID4gaSkgcnVuKGNoYWluW2krK10pOyAvLyB2YXJpYWJsZSBsZW5ndGggLSBjYW4ndCB1c2UgZm9yRWFjaFxuICAgIHByb21pc2UuX2MgPSBbXTtcbiAgICBwcm9taXNlLl9uID0gZmFsc2U7XG4gICAgaWYgKGlzUmVqZWN0ICYmICFwcm9taXNlLl9oKSBvblVuaGFuZGxlZChwcm9taXNlKTtcbiAgfSk7XG59O1xudmFyIG9uVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgdGFzay5jYWxsKGdsb2JhbCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciB2YWx1ZSA9IHByb21pc2UuX3Y7XG4gICAgdmFyIHVuaGFuZGxlZCA9IGlzVW5oYW5kbGVkKHByb21pc2UpO1xuICAgIHZhciByZXN1bHQsIGhhbmRsZXIsIGNvbnNvbGU7XG4gICAgaWYgKHVuaGFuZGxlZCkge1xuICAgICAgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChpc05vZGUpIHtcbiAgICAgICAgICBwcm9jZXNzLmVtaXQoJ3VuaGFuZGxlZFJlamVjdGlvbicsIHZhbHVlLCBwcm9taXNlKTtcbiAgICAgICAgfSBlbHNlIGlmIChoYW5kbGVyID0gZ2xvYmFsLm9udW5oYW5kbGVkcmVqZWN0aW9uKSB7XG4gICAgICAgICAgaGFuZGxlcih7IHByb21pc2U6IHByb21pc2UsIHJlYXNvbjogdmFsdWUgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAoKGNvbnNvbGUgPSBnbG9iYWwuY29uc29sZSkgJiYgY29uc29sZS5lcnJvcikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1VuaGFuZGxlZCBwcm9taXNlIHJlamVjdGlvbicsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICAvLyBCcm93c2VycyBzaG91bGQgbm90IHRyaWdnZXIgYHJlamVjdGlvbkhhbmRsZWRgIGV2ZW50IGlmIGl0IHdhcyBoYW5kbGVkIGhlcmUsIE5vZGVKUyAtIHNob3VsZFxuICAgICAgcHJvbWlzZS5faCA9IGlzTm9kZSB8fCBpc1VuaGFuZGxlZChwcm9taXNlKSA/IDIgOiAxO1xuICAgIH0gcHJvbWlzZS5fYSA9IHVuZGVmaW5lZDtcbiAgICBpZiAodW5oYW5kbGVkICYmIHJlc3VsdC5lKSB0aHJvdyByZXN1bHQudjtcbiAgfSk7XG59O1xudmFyIGlzVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgcmV0dXJuIHByb21pc2UuX2ggIT09IDEgJiYgKHByb21pc2UuX2EgfHwgcHJvbWlzZS5fYykubGVuZ3RoID09PSAwO1xufTtcbnZhciBvbkhhbmRsZVVuaGFuZGxlZCA9IGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gIHRhc2suY2FsbChnbG9iYWwsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaGFuZGxlcjtcbiAgICBpZiAoaXNOb2RlKSB7XG4gICAgICBwcm9jZXNzLmVtaXQoJ3JlamVjdGlvbkhhbmRsZWQnLCBwcm9taXNlKTtcbiAgICB9IGVsc2UgaWYgKGhhbmRsZXIgPSBnbG9iYWwub25yZWplY3Rpb25oYW5kbGVkKSB7XG4gICAgICBoYW5kbGVyKHsgcHJvbWlzZTogcHJvbWlzZSwgcmVhc29uOiBwcm9taXNlLl92IH0pO1xuICAgIH1cbiAgfSk7XG59O1xudmFyICRyZWplY3QgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgdmFyIHByb21pc2UgPSB0aGlzO1xuICBpZiAocHJvbWlzZS5fZCkgcmV0dXJuO1xuICBwcm9taXNlLl9kID0gdHJ1ZTtcbiAgcHJvbWlzZSA9IHByb21pc2UuX3cgfHwgcHJvbWlzZTsgLy8gdW53cmFwXG4gIHByb21pc2UuX3YgPSB2YWx1ZTtcbiAgcHJvbWlzZS5fcyA9IDI7XG4gIGlmICghcHJvbWlzZS5fYSkgcHJvbWlzZS5fYSA9IHByb21pc2UuX2Muc2xpY2UoKTtcbiAgbm90aWZ5KHByb21pc2UsIHRydWUpO1xufTtcbnZhciAkcmVzb2x2ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICB2YXIgcHJvbWlzZSA9IHRoaXM7XG4gIHZhciB0aGVuO1xuICBpZiAocHJvbWlzZS5fZCkgcmV0dXJuO1xuICBwcm9taXNlLl9kID0gdHJ1ZTtcbiAgcHJvbWlzZSA9IHByb21pc2UuX3cgfHwgcHJvbWlzZTsgLy8gdW53cmFwXG4gIHRyeSB7XG4gICAgaWYgKHByb21pc2UgPT09IHZhbHVlKSB0aHJvdyBUeXBlRXJyb3IoXCJQcm9taXNlIGNhbid0IGJlIHJlc29sdmVkIGl0c2VsZlwiKTtcbiAgICBpZiAodGhlbiA9IGlzVGhlbmFibGUodmFsdWUpKSB7XG4gICAgICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgd3JhcHBlciA9IHsgX3c6IHByb21pc2UsIF9kOiBmYWxzZSB9OyAvLyB3cmFwXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdGhlbi5jYWxsKHZhbHVlLCBjdHgoJHJlc29sdmUsIHdyYXBwZXIsIDEpLCBjdHgoJHJlamVjdCwgd3JhcHBlciwgMSkpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgJHJlamVjdC5jYWxsKHdyYXBwZXIsIGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvbWlzZS5fdiA9IHZhbHVlO1xuICAgICAgcHJvbWlzZS5fcyA9IDE7XG4gICAgICBub3RpZnkocHJvbWlzZSwgZmFsc2UpO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgICRyZWplY3QuY2FsbCh7IF93OiBwcm9taXNlLCBfZDogZmFsc2UgfSwgZSk7IC8vIHdyYXBcbiAgfVxufTtcblxuLy8gY29uc3RydWN0b3IgcG9seWZpbGxcbmlmICghVVNFX05BVElWRSkge1xuICAvLyAyNS40LjMuMSBQcm9taXNlKGV4ZWN1dG9yKVxuICAkUHJvbWlzZSA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3IpIHtcbiAgICBhbkluc3RhbmNlKHRoaXMsICRQcm9taXNlLCBQUk9NSVNFLCAnX2gnKTtcbiAgICBhRnVuY3Rpb24oZXhlY3V0b3IpO1xuICAgIEludGVybmFsLmNhbGwodGhpcyk7XG4gICAgdHJ5IHtcbiAgICAgIGV4ZWN1dG9yKGN0eCgkcmVzb2x2ZSwgdGhpcywgMSksIGN0eCgkcmVqZWN0LCB0aGlzLCAxKSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAkcmVqZWN0LmNhbGwodGhpcywgZXJyKTtcbiAgICB9XG4gIH07XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICBJbnRlcm5hbCA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3IpIHtcbiAgICB0aGlzLl9jID0gW107ICAgICAgICAgICAgIC8vIDwtIGF3YWl0aW5nIHJlYWN0aW9uc1xuICAgIHRoaXMuX2EgPSB1bmRlZmluZWQ7ICAgICAgLy8gPC0gY2hlY2tlZCBpbiBpc1VuaGFuZGxlZCByZWFjdGlvbnNcbiAgICB0aGlzLl9zID0gMDsgICAgICAgICAgICAgIC8vIDwtIHN0YXRlXG4gICAgdGhpcy5fZCA9IGZhbHNlOyAgICAgICAgICAvLyA8LSBkb25lXG4gICAgdGhpcy5fdiA9IHVuZGVmaW5lZDsgICAgICAvLyA8LSB2YWx1ZVxuICAgIHRoaXMuX2ggPSAwOyAgICAgICAgICAgICAgLy8gPC0gcmVqZWN0aW9uIHN0YXRlLCAwIC0gZGVmYXVsdCwgMSAtIGhhbmRsZWQsIDIgLSB1bmhhbmRsZWRcbiAgICB0aGlzLl9uID0gZmFsc2U7ICAgICAgICAgIC8vIDwtIG5vdGlmeVxuICB9O1xuICBJbnRlcm5hbC5wcm90b3R5cGUgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKSgkUHJvbWlzZS5wcm90b3R5cGUsIHtcbiAgICAvLyAyNS40LjUuMyBQcm9taXNlLnByb3RvdHlwZS50aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKVxuICAgIHRoZW46IGZ1bmN0aW9uIHRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpIHtcbiAgICAgIHZhciByZWFjdGlvbiA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCAkUHJvbWlzZSkpO1xuICAgICAgcmVhY3Rpb24ub2sgPSB0eXBlb2Ygb25GdWxmaWxsZWQgPT0gJ2Z1bmN0aW9uJyA/IG9uRnVsZmlsbGVkIDogdHJ1ZTtcbiAgICAgIHJlYWN0aW9uLmZhaWwgPSB0eXBlb2Ygb25SZWplY3RlZCA9PSAnZnVuY3Rpb24nICYmIG9uUmVqZWN0ZWQ7XG4gICAgICByZWFjdGlvbi5kb21haW4gPSBpc05vZGUgPyBwcm9jZXNzLmRvbWFpbiA6IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX2MucHVzaChyZWFjdGlvbik7XG4gICAgICBpZiAodGhpcy5fYSkgdGhpcy5fYS5wdXNoKHJlYWN0aW9uKTtcbiAgICAgIGlmICh0aGlzLl9zKSBub3RpZnkodGhpcywgZmFsc2UpO1xuICAgICAgcmV0dXJuIHJlYWN0aW9uLnByb21pc2U7XG4gICAgfSxcbiAgICAvLyAyNS40LjUuMSBQcm9taXNlLnByb3RvdHlwZS5jYXRjaChvblJlamVjdGVkKVxuICAgICdjYXRjaCc6IGZ1bmN0aW9uIChvblJlamVjdGVkKSB7XG4gICAgICByZXR1cm4gdGhpcy50aGVuKHVuZGVmaW5lZCwgb25SZWplY3RlZCk7XG4gICAgfVxuICB9KTtcbiAgT3duUHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHByb21pc2UgPSBuZXcgSW50ZXJuYWwoKTtcbiAgICB0aGlzLnByb21pc2UgPSBwcm9taXNlO1xuICAgIHRoaXMucmVzb2x2ZSA9IGN0eCgkcmVzb2x2ZSwgcHJvbWlzZSwgMSk7XG4gICAgdGhpcy5yZWplY3QgPSBjdHgoJHJlamVjdCwgcHJvbWlzZSwgMSk7XG4gIH07XG4gIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmYgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uIChDKSB7XG4gICAgcmV0dXJuIEMgPT09ICRQcm9taXNlIHx8IEMgPT09IFdyYXBwZXJcbiAgICAgID8gbmV3IE93blByb21pc2VDYXBhYmlsaXR5KEMpXG4gICAgICA6IG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgfTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgeyBQcm9taXNlOiAkUHJvbWlzZSB9KTtcbnJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJykoJFByb21pc2UsIFBST01JU0UpO1xucmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKShQUk9NSVNFKTtcbldyYXBwZXIgPSByZXF1aXJlKCcuL19jb3JlJylbUFJPTUlTRV07XG5cbi8vIHN0YXRpY3NcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjUgUHJvbWlzZS5yZWplY3QocilcbiAgcmVqZWN0OiBmdW5jdGlvbiByZWplY3Qocikge1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkodGhpcyk7XG4gICAgdmFyICQkcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgJCRyZWplY3Qocik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChMSUJSQVJZIHx8ICFVU0VfTkFUSVZFKSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuNiBQcm9taXNlLnJlc29sdmUoeClcbiAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZSh4KSB7XG4gICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKExJQlJBUlkgJiYgdGhpcyA9PT0gV3JhcHBlciA/ICRQcm9taXNlIDogdGhpcywgeCk7XG4gIH1cbn0pO1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKFVTRV9OQVRJVkUgJiYgcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKShmdW5jdGlvbiAoaXRlcikge1xuICAkUHJvbWlzZS5hbGwoaXRlcilbJ2NhdGNoJ10oZW1wdHkpO1xufSkpLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC4xIFByb21pc2UuYWxsKGl0ZXJhYmxlKVxuICBhbGw6IGZ1bmN0aW9uIGFsbChpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICAgIHZhciByZXNvbHZlID0gY2FwYWJpbGl0eS5yZXNvbHZlO1xuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdmFsdWVzID0gW107XG4gICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgdmFyIHJlbWFpbmluZyA9IDE7XG4gICAgICBmb3JPZihpdGVyYWJsZSwgZmFsc2UsIGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICAgIHZhciAkaW5kZXggPSBpbmRleCsrO1xuICAgICAgICB2YXIgYWxyZWFkeUNhbGxlZCA9IGZhbHNlO1xuICAgICAgICB2YWx1ZXMucHVzaCh1bmRlZmluZWQpO1xuICAgICAgICByZW1haW5pbmcrKztcbiAgICAgICAgQy5yZXNvbHZlKHByb21pc2UpLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgaWYgKGFscmVhZHlDYWxsZWQpIHJldHVybjtcbiAgICAgICAgICBhbHJlYWR5Q2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgICB2YWx1ZXNbJGluZGV4XSA9IHZhbHVlO1xuICAgICAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICAgICAgfSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgIH0pO1xuICAgIGlmIChyZXN1bHQuZSkgcmVqZWN0KHJlc3VsdC52KTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9LFxuICAvLyAyNS40LjQuNCBQcm9taXNlLnJhY2UoaXRlcmFibGUpXG4gIHJhY2U6IGZ1bmN0aW9uIHJhY2UoaXRlcmFibGUpIHtcbiAgICB2YXIgQyA9IHRoaXM7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgICB2YXIgcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgZm9yT2YoaXRlcmFibGUsIGZhbHNlLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICBDLnJlc29sdmUocHJvbWlzZSkudGhlbihjYXBhYmlsaXR5LnJlc29sdmUsIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmUpIHJlamVjdChyZXN1bHQudik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgd2VhayA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24td2VhaycpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIFdFQUtfU0VUID0gJ1dlYWtTZXQnO1xuXG4vLyAyMy40IFdlYWtTZXQgT2JqZWN0c1xucmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKFdFQUtfU0VULCBmdW5jdGlvbiAoZ2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBXZWFrU2V0KCkgeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIHtcbiAgLy8gMjMuNC4zLjEgV2Vha1NldC5wcm90b3R5cGUuYWRkKHZhbHVlKVxuICBhZGQ6IGZ1bmN0aW9uIGFkZCh2YWx1ZSkge1xuICAgIHJldHVybiB3ZWFrLmRlZih2YWxpZGF0ZSh0aGlzLCBXRUFLX1NFVCksIHZhbHVlLCB0cnVlKTtcbiAgfVxufSwgd2VhaywgZmFsc2UsIHRydWUpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkdHlwZWQgPSByZXF1aXJlKCcuL190eXBlZCcpO1xudmFyIGJ1ZmZlciA9IHJlcXVpcmUoJy4vX3R5cGVkLWJ1ZmZlcicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgQXJyYXlCdWZmZXIgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5BcnJheUJ1ZmZlcjtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgJEFycmF5QnVmZmVyID0gYnVmZmVyLkFycmF5QnVmZmVyO1xudmFyICREYXRhVmlldyA9IGJ1ZmZlci5EYXRhVmlldztcbnZhciAkaXNWaWV3ID0gJHR5cGVkLkFCViAmJiBBcnJheUJ1ZmZlci5pc1ZpZXc7XG52YXIgJHNsaWNlID0gJEFycmF5QnVmZmVyLnByb3RvdHlwZS5zbGljZTtcbnZhciBWSUVXID0gJHR5cGVkLlZJRVc7XG52YXIgQVJSQVlfQlVGRkVSID0gJ0FycmF5QnVmZmVyJztcblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAoQXJyYXlCdWZmZXIgIT09ICRBcnJheUJ1ZmZlciksIHsgQXJyYXlCdWZmZXI6ICRBcnJheUJ1ZmZlciB9KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhJHR5cGVkLkNPTlNUUiwgQVJSQVlfQlVGRkVSLCB7XG4gIC8vIDI0LjEuMy4xIEFycmF5QnVmZmVyLmlzVmlldyhhcmcpXG4gIGlzVmlldzogZnVuY3Rpb24gaXNWaWV3KGl0KSB7XG4gICAgcmV0dXJuICRpc1ZpZXcgJiYgJGlzVmlldyhpdCkgfHwgaXNPYmplY3QoaXQpICYmIFZJRVcgaW4gaXQ7XG4gIH1cbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuVSArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gIW5ldyAkQXJyYXlCdWZmZXIoMikuc2xpY2UoMSwgdW5kZWZpbmVkKS5ieXRlTGVuZ3RoO1xufSksIEFSUkFZX0JVRkZFUiwge1xuICAvLyAyNC4xLjQuMyBBcnJheUJ1ZmZlci5wcm90b3R5cGUuc2xpY2Uoc3RhcnQsIGVuZClcbiAgc2xpY2U6IGZ1bmN0aW9uIHNsaWNlKHN0YXJ0LCBlbmQpIHtcbiAgICBpZiAoJHNsaWNlICE9PSB1bmRlZmluZWQgJiYgZW5kID09PSB1bmRlZmluZWQpIHJldHVybiAkc2xpY2UuY2FsbChhbk9iamVjdCh0aGlzKSwgc3RhcnQpOyAvLyBGRiBmaXhcbiAgICB2YXIgbGVuID0gYW5PYmplY3QodGhpcykuYnl0ZUxlbmd0aDtcbiAgICB2YXIgZmlyc3QgPSB0b0Fic29sdXRlSW5kZXgoc3RhcnQsIGxlbik7XG4gICAgdmFyIGZpbiA9IHRvQWJzb2x1dGVJbmRleChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IGVuZCwgbGVuKTtcbiAgICB2YXIgcmVzdWx0ID0gbmV3IChzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgJEFycmF5QnVmZmVyKSkodG9MZW5ndGgoZmluIC0gZmlyc3QpKTtcbiAgICB2YXIgdmlld1MgPSBuZXcgJERhdGFWaWV3KHRoaXMpO1xuICAgIHZhciB2aWV3VCA9IG5ldyAkRGF0YVZpZXcocmVzdWx0KTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHdoaWxlIChmaXJzdCA8IGZpbikge1xuICAgICAgdmlld1Quc2V0VWludDgoaW5kZXgrKywgdmlld1MuZ2V0VWludDgoZmlyc3QrKykpO1xuICAgIH0gcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG5cbnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoQVJSQVlfQlVGRkVSKTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL190eXBlZCcpLkFCViwge1xuICBEYXRhVmlldzogcmVxdWlyZSgnLi9fdHlwZWQtYnVmZmVyJykuRGF0YVZpZXdcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnSW50OCcsIDEsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBJbnQ4QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnVWludDgnLCAxLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gVWludDhBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50OCcsIDEsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50OENsYW1wZWRBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSwgdHJ1ZSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdJbnQxNicsIDIsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBJbnQxNkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ1VpbnQxNicsIDIsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50MTZBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdJbnQzMicsIDQsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBJbnQzMkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ1VpbnQzMicsIDQsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdGbG9hdDMyJywgNCwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEZsb2F0MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdGbG9hdDY0JywgOCwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEZsb2F0NjRBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCIvLyAyNi4xLjEgUmVmbGVjdC5hcHBseSh0YXJnZXQsIHRoaXNBcmd1bWVudCwgYXJndW1lbnRzTGlzdClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgckFwcGx5ID0gKHJlcXVpcmUoJy4vX2dsb2JhbCcpLlJlZmxlY3QgfHwge30pLmFwcGx5O1xudmFyIGZBcHBseSA9IEZ1bmN0aW9uLmFwcGx5O1xuLy8gTVMgRWRnZSBhcmd1bWVudHNMaXN0IGFyZ3VtZW50IGlzIG9wdGlvbmFsXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgckFwcGx5KGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG59KSwgJ1JlZmxlY3QnLCB7XG4gIGFwcGx5OiBmdW5jdGlvbiBhcHBseSh0YXJnZXQsIHRoaXNBcmd1bWVudCwgYXJndW1lbnRzTGlzdCkge1xuICAgIHZhciBUID0gYUZ1bmN0aW9uKHRhcmdldCk7XG4gICAgdmFyIEwgPSBhbk9iamVjdChhcmd1bWVudHNMaXN0KTtcbiAgICByZXR1cm4gckFwcGx5ID8gckFwcGx5KFQsIHRoaXNBcmd1bWVudCwgTCkgOiBmQXBwbHkuY2FsbChULCB0aGlzQXJndW1lbnQsIEwpO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuMiBSZWZsZWN0LmNvbnN0cnVjdCh0YXJnZXQsIGFyZ3VtZW50c0xpc3QgWywgbmV3VGFyZ2V0XSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuL19iaW5kJyk7XG52YXIgckNvbnN0cnVjdCA9IChyZXF1aXJlKCcuL19nbG9iYWwnKS5SZWZsZWN0IHx8IHt9KS5jb25zdHJ1Y3Q7XG5cbi8vIE1TIEVkZ2Ugc3VwcG9ydHMgb25seSAyIGFyZ3VtZW50cyBhbmQgYXJndW1lbnRzTGlzdCBhcmd1bWVudCBpcyBvcHRpb25hbFxuLy8gRkYgTmlnaHRseSBzZXRzIHRoaXJkIGFyZ3VtZW50IGFzIGBuZXcudGFyZ2V0YCwgYnV0IGRvZXMgbm90IGNyZWF0ZSBgdGhpc2AgZnJvbSBpdFxudmFyIE5FV19UQVJHRVRfQlVHID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBGKCkgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiAhKHJDb25zdHJ1Y3QoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9LCBbXSwgRikgaW5zdGFuY2VvZiBGKTtcbn0pO1xudmFyIEFSR1NfQlVHID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgckNvbnN0cnVjdChmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKE5FV19UQVJHRVRfQlVHIHx8IEFSR1NfQlVHKSwgJ1JlZmxlY3QnLCB7XG4gIGNvbnN0cnVjdDogZnVuY3Rpb24gY29uc3RydWN0KFRhcmdldCwgYXJncyAvKiAsIG5ld1RhcmdldCAqLykge1xuICAgIGFGdW5jdGlvbihUYXJnZXQpO1xuICAgIGFuT2JqZWN0KGFyZ3MpO1xuICAgIHZhciBuZXdUYXJnZXQgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IFRhcmdldCA6IGFGdW5jdGlvbihhcmd1bWVudHNbMl0pO1xuICAgIGlmIChBUkdTX0JVRyAmJiAhTkVXX1RBUkdFVF9CVUcpIHJldHVybiByQ29uc3RydWN0KFRhcmdldCwgYXJncywgbmV3VGFyZ2V0KTtcbiAgICBpZiAoVGFyZ2V0ID09IG5ld1RhcmdldCkge1xuICAgICAgLy8gdy9vIGFsdGVyZWQgbmV3VGFyZ2V0LCBvcHRpbWl6YXRpb24gZm9yIDAtNCBhcmd1bWVudHNcbiAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgY2FzZSAwOiByZXR1cm4gbmV3IFRhcmdldCgpO1xuICAgICAgICBjYXNlIDE6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0pO1xuICAgICAgICBjYXNlIDI6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgICBjYXNlIDM6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICBjYXNlIDQ6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pO1xuICAgICAgfVxuICAgICAgLy8gdy9vIGFsdGVyZWQgbmV3VGFyZ2V0LCBsb3Qgb2YgYXJndW1lbnRzIGNhc2VcbiAgICAgIHZhciAkYXJncyA9IFtudWxsXTtcbiAgICAgICRhcmdzLnB1c2guYXBwbHkoJGFyZ3MsIGFyZ3MpO1xuICAgICAgcmV0dXJuIG5ldyAoYmluZC5hcHBseShUYXJnZXQsICRhcmdzKSkoKTtcbiAgICB9XG4gICAgLy8gd2l0aCBhbHRlcmVkIG5ld1RhcmdldCwgbm90IHN1cHBvcnQgYnVpbHQtaW4gY29uc3RydWN0b3JzXG4gICAgdmFyIHByb3RvID0gbmV3VGFyZ2V0LnByb3RvdHlwZTtcbiAgICB2YXIgaW5zdGFuY2UgPSBjcmVhdGUoaXNPYmplY3QocHJvdG8pID8gcHJvdG8gOiBPYmplY3QucHJvdG90eXBlKTtcbiAgICB2YXIgcmVzdWx0ID0gRnVuY3Rpb24uYXBwbHkuY2FsbChUYXJnZXQsIGluc3RhbmNlLCBhcmdzKTtcbiAgICByZXR1cm4gaXNPYmplY3QocmVzdWx0KSA/IHJlc3VsdCA6IGluc3RhbmNlO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuMyBSZWZsZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXksIGF0dHJpYnV0ZXMpXG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xuXG4vLyBNUyBFZGdlIGhhcyBicm9rZW4gUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eSAtIHRocm93aW5nIGluc3RlYWQgb2YgcmV0dXJuaW5nIGZhbHNlXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eShkUC5mKHt9LCAxLCB7IHZhbHVlOiAxIH0pLCAxLCB7IHZhbHVlOiAyIH0pO1xufSksICdSZWZsZWN0Jywge1xuICBkZWZpbmVQcm9wZXJ0eTogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcykge1xuICAgIGFuT2JqZWN0KHRhcmdldCk7XG4gICAgcHJvcGVydHlLZXkgPSB0b1ByaW1pdGl2ZShwcm9wZXJ0eUtleSwgdHJ1ZSk7XG4gICAgYW5PYmplY3QoYXR0cmlidXRlcyk7XG4gICAgdHJ5IHtcbiAgICAgIGRQLmYodGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcyk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTtcbiIsIi8vIDI2LjEuNCBSZWZsZWN0LmRlbGV0ZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXkpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBkZWxldGVQcm9wZXJ0eTogZnVuY3Rpb24gZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgIHZhciBkZXNjID0gZ09QRChhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7XG4gICAgcmV0dXJuIGRlc2MgJiYgIWRlc2MuY29uZmlndXJhYmxlID8gZmFsc2UgOiBkZWxldGUgdGFyZ2V0W3Byb3BlcnR5S2V5XTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyNi4xLjUgUmVmbGVjdC5lbnVtZXJhdGUodGFyZ2V0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIEVudW1lcmF0ZSA9IGZ1bmN0aW9uIChpdGVyYXRlZCkge1xuICB0aGlzLl90ID0gYW5PYmplY3QoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICB2YXIga2V5cyA9IHRoaXMuX2sgPSBbXTsgICAgICAvLyBrZXlzXG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIGl0ZXJhdGVkKSBrZXlzLnB1c2goa2V5KTtcbn07XG5yZXF1aXJlKCcuL19pdGVyLWNyZWF0ZScpKEVudW1lcmF0ZSwgJ09iamVjdCcsIGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRoYXQgPSB0aGlzO1xuICB2YXIga2V5cyA9IHRoYXQuX2s7XG4gIHZhciBrZXk7XG4gIGRvIHtcbiAgICBpZiAodGhhdC5faSA+PSBrZXlzLmxlbmd0aCkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9IHdoaWxlICghKChrZXkgPSBrZXlzW3RoYXQuX2krK10pIGluIHRoYXQuX3QpKTtcbiAgcmV0dXJuIHsgdmFsdWU6IGtleSwgZG9uZTogZmFsc2UgfTtcbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGVudW1lcmF0ZTogZnVuY3Rpb24gZW51bWVyYXRlKHRhcmdldCkge1xuICAgIHJldHVybiBuZXcgRW51bWVyYXRlKHRhcmdldCk7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS42IFJlZmxlY3QuZ2V0KHRhcmdldCwgcHJvcGVydHlLZXkgWywgcmVjZWl2ZXJdKVxudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5cbmZ1bmN0aW9uIGdldCh0YXJnZXQsIHByb3BlcnR5S2V5IC8qICwgcmVjZWl2ZXIgKi8pIHtcbiAgdmFyIHJlY2VpdmVyID0gYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB0YXJnZXQgOiBhcmd1bWVudHNbMl07XG4gIHZhciBkZXNjLCBwcm90bztcbiAgaWYgKGFuT2JqZWN0KHRhcmdldCkgPT09IHJlY2VpdmVyKSByZXR1cm4gdGFyZ2V0W3Byb3BlcnR5S2V5XTtcbiAgaWYgKGRlc2MgPSBnT1BELmYodGFyZ2V0LCBwcm9wZXJ0eUtleSkpIHJldHVybiBoYXMoZGVzYywgJ3ZhbHVlJylcbiAgICA/IGRlc2MudmFsdWVcbiAgICA6IGRlc2MuZ2V0ICE9PSB1bmRlZmluZWRcbiAgICAgID8gZGVzYy5nZXQuY2FsbChyZWNlaXZlcilcbiAgICAgIDogdW5kZWZpbmVkO1xuICBpZiAoaXNPYmplY3QocHJvdG8gPSBnZXRQcm90b3R5cGVPZih0YXJnZXQpKSkgcmV0dXJuIGdldChwcm90bywgcHJvcGVydHlLZXksIHJlY2VpdmVyKTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgeyBnZXQ6IGdldCB9KTtcbiIsIi8vIDI2LjEuNyBSZWZsZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIHByb3BlcnR5S2V5KVxudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICByZXR1cm4gZ09QRC5mKGFuT2JqZWN0KHRhcmdldCksIHByb3BlcnR5S2V5KTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjggUmVmbGVjdC5nZXRQcm90b3R5cGVPZih0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGdldFByb3RvID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZ2V0UHJvdG90eXBlT2Y6IGZ1bmN0aW9uIGdldFByb3RvdHlwZU9mKHRhcmdldCkge1xuICAgIHJldHVybiBnZXRQcm90byhhbk9iamVjdCh0YXJnZXQpKTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjkgUmVmbGVjdC5oYXModGFyZ2V0LCBwcm9wZXJ0eUtleSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgaGFzOiBmdW5jdGlvbiBoYXModGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgIHJldHVybiBwcm9wZXJ0eUtleSBpbiB0YXJnZXQ7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS4xMCBSZWZsZWN0LmlzRXh0ZW5zaWJsZSh0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgJGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGU7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgaXNFeHRlbnNpYmxlOiBmdW5jdGlvbiBpc0V4dGVuc2libGUodGFyZ2V0KSB7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICByZXR1cm4gJGlzRXh0ZW5zaWJsZSA/ICRpc0V4dGVuc2libGUodGFyZ2V0KSA6IHRydWU7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS4xMSBSZWZsZWN0Lm93bktleXModGFyZ2V0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgeyBvd25LZXlzOiByZXF1aXJlKCcuL19vd24ta2V5cycpIH0pO1xuIiwiLy8gMjYuMS4xMiBSZWZsZWN0LnByZXZlbnRFeHRlbnNpb25zKHRhcmdldClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciAkcHJldmVudEV4dGVuc2lvbnMgPSBPYmplY3QucHJldmVudEV4dGVuc2lvbnM7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgcHJldmVudEV4dGVuc2lvbnM6IGZ1bmN0aW9uIHByZXZlbnRFeHRlbnNpb25zKHRhcmdldCkge1xuICAgIGFuT2JqZWN0KHRhcmdldCk7XG4gICAgdHJ5IHtcbiAgICAgIGlmICgkcHJldmVudEV4dGVuc2lvbnMpICRwcmV2ZW50RXh0ZW5zaW9ucyh0YXJnZXQpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufSk7XG4iLCIvLyAyNi4xLjEzIFJlZmxlY3Quc2V0KHRhcmdldCwgcHJvcGVydHlLZXksIFYgWywgcmVjZWl2ZXJdKVxudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuXG5mdW5jdGlvbiBzZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSwgViAvKiAsIHJlY2VpdmVyICovKSB7XG4gIHZhciByZWNlaXZlciA9IGFyZ3VtZW50cy5sZW5ndGggPCA0ID8gdGFyZ2V0IDogYXJndW1lbnRzWzNdO1xuICB2YXIgb3duRGVzYyA9IGdPUEQuZihhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7XG4gIHZhciBleGlzdGluZ0Rlc2NyaXB0b3IsIHByb3RvO1xuICBpZiAoIW93bkRlc2MpIHtcbiAgICBpZiAoaXNPYmplY3QocHJvdG8gPSBnZXRQcm90b3R5cGVPZih0YXJnZXQpKSkge1xuICAgICAgcmV0dXJuIHNldChwcm90bywgcHJvcGVydHlLZXksIFYsIHJlY2VpdmVyKTtcbiAgICB9XG4gICAgb3duRGVzYyA9IGNyZWF0ZURlc2MoMCk7XG4gIH1cbiAgaWYgKGhhcyhvd25EZXNjLCAndmFsdWUnKSkge1xuICAgIGlmIChvd25EZXNjLndyaXRhYmxlID09PSBmYWxzZSB8fCAhaXNPYmplY3QocmVjZWl2ZXIpKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKGV4aXN0aW5nRGVzY3JpcHRvciA9IGdPUEQuZihyZWNlaXZlciwgcHJvcGVydHlLZXkpKSB7XG4gICAgICBpZiAoZXhpc3RpbmdEZXNjcmlwdG9yLmdldCB8fCBleGlzdGluZ0Rlc2NyaXB0b3Iuc2V0IHx8IGV4aXN0aW5nRGVzY3JpcHRvci53cml0YWJsZSA9PT0gZmFsc2UpIHJldHVybiBmYWxzZTtcbiAgICAgIGV4aXN0aW5nRGVzY3JpcHRvci52YWx1ZSA9IFY7XG4gICAgICBkUC5mKHJlY2VpdmVyLCBwcm9wZXJ0eUtleSwgZXhpc3RpbmdEZXNjcmlwdG9yKTtcbiAgICB9IGVsc2UgZFAuZihyZWNlaXZlciwgcHJvcGVydHlLZXksIGNyZWF0ZURlc2MoMCwgVikpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBvd25EZXNjLnNldCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiAob3duRGVzYy5zZXQuY2FsbChyZWNlaXZlciwgViksIHRydWUpO1xufVxuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7IHNldDogc2V0IH0pO1xuIiwiLy8gMjYuMS4xNCBSZWZsZWN0LnNldFByb3RvdHlwZU9mKHRhcmdldCwgcHJvdG8pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHNldFByb3RvID0gcmVxdWlyZSgnLi9fc2V0LXByb3RvJyk7XG5cbmlmIChzZXRQcm90bykgJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBzZXRQcm90b3R5cGVPZjogZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YodGFyZ2V0LCBwcm90bykge1xuICAgIHNldFByb3RvLmNoZWNrKHRhcmdldCwgcHJvdG8pO1xuICAgIHRyeSB7XG4gICAgICBzZXRQcm90by5zZXQodGFyZ2V0LCBwcm90byk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L0FycmF5LnByb3RvdHlwZS5pbmNsdWRlc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkaW5jbHVkZXMgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpKHRydWUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5Jywge1xuICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoZWwgLyogLCBmcm9tSW5kZXggPSAwICovKSB7XG4gICAgcmV0dXJuICRpbmNsdWRlcyh0aGlzLCBlbCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcblxucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoJ2luY2x1ZGVzJyk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLWZsYXRNYXAvI3NlYy1BcnJheS5wcm90b3R5cGUuZmxhdE1hcFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBmbGF0dGVuSW50b0FycmF5ID0gcmVxdWlyZSgnLi9fZmxhdHRlbi1pbnRvLWFycmF5Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBhcnJheVNwZWNpZXNDcmVhdGUgPSByZXF1aXJlKCcuL19hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5Jywge1xuICBmbGF0TWFwOiBmdW5jdGlvbiBmbGF0TWFwKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgc291cmNlTGVuLCBBO1xuICAgIGFGdW5jdGlvbihjYWxsYmFja2ZuKTtcbiAgICBzb3VyY2VMZW4gPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgQSA9IGFycmF5U3BlY2llc0NyZWF0ZShPLCAwKTtcbiAgICBmbGF0dGVuSW50b0FycmF5KEEsIE8sIE8sIHNvdXJjZUxlbiwgMCwgMSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgICByZXR1cm4gQTtcbiAgfVxufSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdmbGF0TWFwJyk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLWZsYXRNYXAvI3NlYy1BcnJheS5wcm90b3R5cGUuZmxhdHRlblxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBmbGF0dGVuSW50b0FycmF5ID0gcmVxdWlyZSgnLi9fZmxhdHRlbi1pbnRvLWFycmF5Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBhcnJheVNwZWNpZXNDcmVhdGUgPSByZXF1aXJlKCcuL19hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5Jywge1xuICBmbGF0dGVuOiBmdW5jdGlvbiBmbGF0dGVuKC8qIGRlcHRoQXJnID0gMSAqLykge1xuICAgIHZhciBkZXB0aEFyZyA9IGFyZ3VtZW50c1swXTtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBzb3VyY2VMZW4gPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIEEgPSBhcnJheVNwZWNpZXNDcmVhdGUoTywgMCk7XG4gICAgZmxhdHRlbkludG9BcnJheShBLCBPLCBPLCBzb3VyY2VMZW4sIDAsIGRlcHRoQXJnID09PSB1bmRlZmluZWQgPyAxIDogdG9JbnRlZ2VyKGRlcHRoQXJnKSk7XG4gICAgcmV0dXJuIEE7XG4gIH1cbn0pO1xuXG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKSgnZmxhdHRlbicpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL21hdGhpYXNieW5lbnMvU3RyaW5nLnByb3RvdHlwZS5hdFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkYXQgPSByZXF1aXJlKCcuL19zdHJpbmctYXQnKSh0cnVlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7XG4gIGF0OiBmdW5jdGlvbiBhdChwb3MpIHtcbiAgICByZXR1cm4gJGF0KHRoaXMsIHBvcyk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc3RyaW5nLXBhZC1zdGFydC1lbmRcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhZCA9IHJlcXVpcmUoJy4vX3N0cmluZy1wYWQnKTtcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuL191c2VyLWFnZW50Jyk7XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8yODBcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogL1ZlcnNpb25cXC8xMFxcLlxcZCsoXFwuXFxkKyk/IFNhZmFyaVxcLy8udGVzdCh1c2VyQWdlbnQpLCAnU3RyaW5nJywge1xuICBwYWRTdGFydDogZnVuY3Rpb24gcGFkU3RhcnQobWF4TGVuZ3RoIC8qICwgZmlsbFN0cmluZyA9ICcgJyAqLykge1xuICAgIHJldHVybiAkcGFkKHRoaXMsIG1heExlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIHRydWUpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXN0cmluZy1wYWQtc3RhcnQtZW5kXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYWQgPSByZXF1aXJlKCcuL19zdHJpbmctcGFkJyk7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi9fdXNlci1hZ2VudCcpO1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMjgwXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIC9WZXJzaW9uXFwvMTBcXC5cXGQrKFxcLlxcZCspPyBTYWZhcmlcXC8vLnRlc3QodXNlckFnZW50KSwgJ1N0cmluZycsIHtcbiAgcGFkRW5kOiBmdW5jdGlvbiBwYWRFbmQobWF4TGVuZ3RoIC8qICwgZmlsbFN0cmluZyA9ICcgJyAqLykge1xuICAgIHJldHVybiAkcGFkKHRoaXMsIG1heExlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIGZhbHNlKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vc2VibWFya2JhZ2UvZWNtYXNjcmlwdC1zdHJpbmctbGVmdC1yaWdodC10cmltXG5yZXF1aXJlKCcuL19zdHJpbmctdHJpbScpKCd0cmltTGVmdCcsIGZ1bmN0aW9uICgkdHJpbSkge1xuICByZXR1cm4gZnVuY3Rpb24gdHJpbUxlZnQoKSB7XG4gICAgcmV0dXJuICR0cmltKHRoaXMsIDEpO1xuICB9O1xufSwgJ3RyaW1TdGFydCcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3NlYm1hcmtiYWdlL2VjbWFzY3JpcHQtc3RyaW5nLWxlZnQtcmlnaHQtdHJpbVxucmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKSgndHJpbVJpZ2h0JywgZnVuY3Rpb24gKCR0cmltKSB7XG4gIHJldHVybiBmdW5jdGlvbiB0cmltUmlnaHQoKSB7XG4gICAgcmV0dXJuICR0cmltKHRoaXMsIDIpO1xuICB9O1xufSwgJ3RyaW1FbmQnKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vU3RyaW5nLnByb3RvdHlwZS5tYXRjaEFsbC9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi9faXMtcmVnZXhwJyk7XG52YXIgZ2V0RmxhZ3MgPSByZXF1aXJlKCcuL19mbGFncycpO1xudmFyIFJlZ0V4cFByb3RvID0gUmVnRXhwLnByb3RvdHlwZTtcblxudmFyICRSZWdFeHBTdHJpbmdJdGVyYXRvciA9IGZ1bmN0aW9uIChyZWdleHAsIHN0cmluZykge1xuICB0aGlzLl9yID0gcmVnZXhwO1xuICB0aGlzLl9zID0gc3RyaW5nO1xufTtcblxucmVxdWlyZSgnLi9faXRlci1jcmVhdGUnKSgkUmVnRXhwU3RyaW5nSXRlcmF0b3IsICdSZWdFeHAgU3RyaW5nJywgZnVuY3Rpb24gbmV4dCgpIHtcbiAgdmFyIG1hdGNoID0gdGhpcy5fci5leGVjKHRoaXMuX3MpO1xuICByZXR1cm4geyB2YWx1ZTogbWF0Y2gsIGRvbmU6IG1hdGNoID09PSBudWxsIH07XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7XG4gIG1hdGNoQWxsOiBmdW5jdGlvbiBtYXRjaEFsbChyZWdleHApIHtcbiAgICBkZWZpbmVkKHRoaXMpO1xuICAgIGlmICghaXNSZWdFeHAocmVnZXhwKSkgdGhyb3cgVHlwZUVycm9yKHJlZ2V4cCArICcgaXMgbm90IGEgcmVnZXhwIScpO1xuICAgIHZhciBTID0gU3RyaW5nKHRoaXMpO1xuICAgIHZhciBmbGFncyA9ICdmbGFncycgaW4gUmVnRXhwUHJvdG8gPyBTdHJpbmcocmVnZXhwLmZsYWdzKSA6IGdldEZsYWdzLmNhbGwocmVnZXhwKTtcbiAgICB2YXIgcnggPSBuZXcgUmVnRXhwKHJlZ2V4cC5zb3VyY2UsIH5mbGFncy5pbmRleE9mKCdnJykgPyBmbGFncyA6ICdnJyArIGZsYWdzKTtcbiAgICByeC5sYXN0SW5kZXggPSB0b0xlbmd0aChyZWdleHAubGFzdEluZGV4KTtcbiAgICByZXR1cm4gbmV3ICRSZWdFeHBTdHJpbmdJdGVyYXRvcihyeCwgUyk7XG4gIH1cbn0pO1xuIiwicmVxdWlyZSgnLi9fd2tzLWRlZmluZScpKCdhc3luY0l0ZXJhdG9yJyk7XG4iLCJyZXF1aXJlKCcuL193a3MtZGVmaW5lJykoJ29ic2VydmFibGUnKTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9iamVjdC1nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIG93bktleXMgPSByZXF1aXJlKCcuL19vd24ta2V5cycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2NyZWF0ZS1wcm9wZXJ0eScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yczogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhvYmplY3QpIHtcbiAgICB2YXIgTyA9IHRvSU9iamVjdChvYmplY3QpO1xuICAgIHZhciBnZXREZXNjID0gZ09QRC5mO1xuICAgIHZhciBrZXlzID0gb3duS2V5cyhPKTtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBrZXksIGRlc2M7XG4gICAgd2hpbGUgKGtleXMubGVuZ3RoID4gaSkge1xuICAgICAgZGVzYyA9IGdldERlc2MoTywga2V5ID0ga2V5c1tpKytdKTtcbiAgICAgIGlmIChkZXNjICE9PSB1bmRlZmluZWQpIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwga2V5LCBkZXNjKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYmplY3QtdmFsdWVzLWVudHJpZXNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHZhbHVlcyA9IHJlcXVpcmUoJy4vX29iamVjdC10by1hcnJheScpKGZhbHNlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7XG4gIHZhbHVlczogZnVuY3Rpb24gdmFsdWVzKGl0KSB7XG4gICAgcmV0dXJuICR2YWx1ZXMoaXQpO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9iamVjdC12YWx1ZXMtZW50cmllc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZW50cmllcyA9IHJlcXVpcmUoJy4vX29iamVjdC10by1hcnJheScpKHRydWUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtcbiAgZW50cmllczogZnVuY3Rpb24gZW50cmllcyhpdCkge1xuICAgIHJldHVybiAkZW50cmllcyhpdCk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciAkZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcblxuLy8gQi4yLjIuMiBPYmplY3QucHJvdG90eXBlLl9fZGVmaW5lR2V0dGVyX18oUCwgZ2V0dGVyKVxucmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAkZXhwb3J0KCRleHBvcnQuUCArIHJlcXVpcmUoJy4vX29iamVjdC1mb3JjZWQtcGFtJyksICdPYmplY3QnLCB7XG4gIF9fZGVmaW5lR2V0dGVyX186IGZ1bmN0aW9uIF9fZGVmaW5lR2V0dGVyX18oUCwgZ2V0dGVyKSB7XG4gICAgJGRlZmluZVByb3BlcnR5LmYodG9PYmplY3QodGhpcyksIFAsIHsgZ2V0OiBhRnVuY3Rpb24oZ2V0dGVyKSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgJGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG5cbi8vIEIuMi4yLjMgT2JqZWN0LnByb3RvdHlwZS5fX2RlZmluZVNldHRlcl9fKFAsIHNldHRlcilcbnJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgJGV4cG9ydCgkZXhwb3J0LlAgKyByZXF1aXJlKCcuL19vYmplY3QtZm9yY2VkLXBhbScpLCAnT2JqZWN0Jywge1xuICBfX2RlZmluZVNldHRlcl9fOiBmdW5jdGlvbiBfX2RlZmluZVNldHRlcl9fKFAsIHNldHRlcikge1xuICAgICRkZWZpbmVQcm9wZXJ0eS5mKHRvT2JqZWN0KHRoaXMpLCBQLCB7IHNldDogYUZ1bmN0aW9uKHNldHRlciksIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7XG5cbi8vIEIuMi4yLjQgT2JqZWN0LnByb3RvdHlwZS5fX2xvb2t1cEdldHRlcl9fKFApXG5yZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICRleHBvcnQoJGV4cG9ydC5QICsgcmVxdWlyZSgnLi9fb2JqZWN0LWZvcmNlZC1wYW0nKSwgJ09iamVjdCcsIHtcbiAgX19sb29rdXBHZXR0ZXJfXzogZnVuY3Rpb24gX19sb29rdXBHZXR0ZXJfXyhQKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgSyA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICAgIHZhciBEO1xuICAgIGRvIHtcbiAgICAgIGlmIChEID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIEspKSByZXR1cm4gRC5nZXQ7XG4gICAgfSB3aGlsZSAoTyA9IGdldFByb3RvdHlwZU9mKE8pKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7XG5cbi8vIEIuMi4yLjUgT2JqZWN0LnByb3RvdHlwZS5fX2xvb2t1cFNldHRlcl9fKFApXG5yZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICRleHBvcnQoJGV4cG9ydC5QICsgcmVxdWlyZSgnLi9fb2JqZWN0LWZvcmNlZC1wYW0nKSwgJ09iamVjdCcsIHtcbiAgX19sb29rdXBTZXR0ZXJfXzogZnVuY3Rpb24gX19sb29rdXBTZXR0ZXJfXyhQKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgSyA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICAgIHZhciBEO1xuICAgIGRvIHtcbiAgICAgIGlmIChEID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIEspKSByZXR1cm4gRC5zZXQ7XG4gICAgfSB3aGlsZSAoTyA9IGdldFByb3RvdHlwZU9mKE8pKTtcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vRGF2aWRCcnVhbnQvTWFwLVNldC5wcm90b3R5cGUudG9KU09OXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuUiwgJ01hcCcsIHsgdG9KU09OOiByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXRvLWpzb24nKSgnTWFwJykgfSk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vRGF2aWRCcnVhbnQvTWFwLVNldC5wcm90b3R5cGUudG9KU09OXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuUiwgJ1NldCcsIHsgdG9KU09OOiByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXRvLWpzb24nKSgnU2V0JykgfSk7XG4iLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy1tYXAub2ZcbnJlcXVpcmUoJy4vX3NldC1jb2xsZWN0aW9uLW9mJykoJ01hcCcpO1xuIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtc2V0Lm9mXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1vZicpKCdTZXQnKTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLXdlYWttYXAub2ZcbnJlcXVpcmUoJy4vX3NldC1jb2xsZWN0aW9uLW9mJykoJ1dlYWtNYXAnKTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLXdlYWtzZXQub2ZcbnJlcXVpcmUoJy4vX3NldC1jb2xsZWN0aW9uLW9mJykoJ1dlYWtTZXQnKTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLW1hcC5mcm9tXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1mcm9tJykoJ01hcCcpO1xuIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtc2V0LmZyb21cbnJlcXVpcmUoJy4vX3NldC1jb2xsZWN0aW9uLWZyb20nKSgnU2V0Jyk7XG4iLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy13ZWFrbWFwLmZyb21cbnJlcXVpcmUoJy4vX3NldC1jb2xsZWN0aW9uLWZyb20nKSgnV2Vha01hcCcpO1xuIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtd2Vha3NldC5mcm9tXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1mcm9tJykoJ1dlYWtTZXQnKTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWdsb2JhbFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LkcsIHsgZ2xvYmFsOiByZXF1aXJlKCcuL19nbG9iYWwnKSB9KTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWdsb2JhbFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdTeXN0ZW0nLCB7IGdsb2JhbDogcmVxdWlyZSgnLi9fZ2xvYmFsJykgfSk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vbGpoYXJiL3Byb3Bvc2FsLWlzLWVycm9yXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ0Vycm9yJywge1xuICBpc0Vycm9yOiBmdW5jdGlvbiBpc0Vycm9yKGl0KSB7XG4gICAgcmV0dXJuIGNvZihpdCkgPT09ICdFcnJvcic7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBjbGFtcDogZnVuY3Rpb24gY2xhbXAoeCwgbG93ZXIsIHVwcGVyKSB7XG4gICAgcmV0dXJuIE1hdGgubWluKHVwcGVyLCBNYXRoLm1heChsb3dlciwgeCkpO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgREVHX1BFUl9SQUQ6IE1hdGguUEkgLyAxODAgfSk7XG4iLCIvLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIFJBRF9QRVJfREVHID0gMTgwIC8gTWF0aC5QSTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBkZWdyZWVzOiBmdW5jdGlvbiBkZWdyZWVzKHJhZGlhbnMpIHtcbiAgICByZXR1cm4gcmFkaWFucyAqIFJBRF9QRVJfREVHO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgc2NhbGUgPSByZXF1aXJlKCcuL19tYXRoLXNjYWxlJyk7XG52YXIgZnJvdW5kID0gcmVxdWlyZSgnLi9fbWF0aC1mcm91bmQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBmc2NhbGU6IGZ1bmN0aW9uIGZzY2FsZSh4LCBpbkxvdywgaW5IaWdoLCBvdXRMb3csIG91dEhpZ2gpIHtcbiAgICByZXR1cm4gZnJvdW5kKHNjYWxlKHgsIGluTG93LCBpbkhpZ2gsIG91dExvdywgb3V0SGlnaCkpO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL0JyZW5kYW5FaWNoLzQyOTRkNWMyMTJhNmQyMjU0NzAzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGlhZGRoOiBmdW5jdGlvbiBpYWRkaCh4MCwgeDEsIHkwLCB5MSkge1xuICAgIHZhciAkeDAgPSB4MCA+Pj4gMDtcbiAgICB2YXIgJHgxID0geDEgPj4+IDA7XG4gICAgdmFyICR5MCA9IHkwID4+PiAwO1xuICAgIHJldHVybiAkeDEgKyAoeTEgPj4+IDApICsgKCgkeDAgJiAkeTAgfCAoJHgwIHwgJHkwKSAmIH4oJHgwICsgJHkwID4+PiAwKSkgPj4+IDMxKSB8IDA7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vQnJlbmRhbkVpY2gvNDI5NGQ1YzIxMmE2ZDIyNTQ3MDNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgaXN1Ymg6IGZ1bmN0aW9uIGlzdWJoKHgwLCB4MSwgeTAsIHkxKSB7XG4gICAgdmFyICR4MCA9IHgwID4+PiAwO1xuICAgIHZhciAkeDEgPSB4MSA+Pj4gMDtcbiAgICB2YXIgJHkwID0geTAgPj4+IDA7XG4gICAgcmV0dXJuICR4MSAtICh5MSA+Pj4gMCkgLSAoKH4keDAgJiAkeTAgfCB+KCR4MCBeICR5MCkgJiAkeDAgLSAkeTAgPj4+IDApID4+PiAzMSkgfCAwO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL0JyZW5kYW5FaWNoLzQyOTRkNWMyMTJhNmQyMjU0NzAzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGltdWxoOiBmdW5jdGlvbiBpbXVsaCh1LCB2KSB7XG4gICAgdmFyIFVJTlQxNiA9IDB4ZmZmZjtcbiAgICB2YXIgJHUgPSArdTtcbiAgICB2YXIgJHYgPSArdjtcbiAgICB2YXIgdTAgPSAkdSAmIFVJTlQxNjtcbiAgICB2YXIgdjAgPSAkdiAmIFVJTlQxNjtcbiAgICB2YXIgdTEgPSAkdSA+PiAxNjtcbiAgICB2YXIgdjEgPSAkdiA+PiAxNjtcbiAgICB2YXIgdCA9ICh1MSAqIHYwID4+PiAwKSArICh1MCAqIHYwID4+PiAxNik7XG4gICAgcmV0dXJuIHUxICogdjEgKyAodCA+PiAxNikgKyAoKHUwICogdjEgPj4+IDApICsgKHQgJiBVSU5UMTYpID4+IDE2KTtcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IFJBRF9QRVJfREVHOiAxODAgLyBNYXRoLlBJIH0pO1xuIiwiLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBERUdfUEVSX1JBRCA9IE1hdGguUEkgLyAxODA7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgcmFkaWFuczogZnVuY3Rpb24gcmFkaWFucyhkZWdyZWVzKSB7XG4gICAgcmV0dXJuIGRlZ3JlZXMgKiBERUdfUEVSX1JBRDtcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IHNjYWxlOiByZXF1aXJlKCcuL19tYXRoLXNjYWxlJykgfSk7XG4iLCIvLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9CcmVuZGFuRWljaC80Mjk0ZDVjMjEyYTZkMjI1NDcwM1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICB1bXVsaDogZnVuY3Rpb24gdW11bGgodSwgdikge1xuICAgIHZhciBVSU5UMTYgPSAweGZmZmY7XG4gICAgdmFyICR1ID0gK3U7XG4gICAgdmFyICR2ID0gK3Y7XG4gICAgdmFyIHUwID0gJHUgJiBVSU5UMTY7XG4gICAgdmFyIHYwID0gJHYgJiBVSU5UMTY7XG4gICAgdmFyIHUxID0gJHUgPj4+IDE2O1xuICAgIHZhciB2MSA9ICR2ID4+PiAxNjtcbiAgICB2YXIgdCA9ICh1MSAqIHYwID4+PiAwKSArICh1MCAqIHYwID4+PiAxNik7XG4gICAgcmV0dXJuIHUxICogdjEgKyAodCA+Pj4gMTYpICsgKCh1MCAqIHYxID4+PiAwKSArICh0ICYgVUlOVDE2KSA+Pj4gMTYpO1xuICB9XG59KTtcbiIsIi8vIGh0dHA6Ly9qZmJhc3RpZW4uZ2l0aHViLmlvL3BhcGVycy9NYXRoLnNpZ25iaXQuaHRtbFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBzaWduYml0OiBmdW5jdGlvbiBzaWduYml0KHgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICByZXR1cm4gKHggPSAreCkgIT0geCA/IHggOiB4ID09IDAgPyAxIC8geCA9PSBJbmZpbml0eSA6IHggPiAwO1xufSB9KTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXByb21pc2UtZmluYWxseVxuJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciBwcm9taXNlUmVzb2x2ZSA9IHJlcXVpcmUoJy4vX3Byb21pc2UtcmVzb2x2ZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuUiwgJ1Byb21pc2UnLCB7ICdmaW5hbGx5JzogZnVuY3Rpb24gKG9uRmluYWxseSkge1xuICB2YXIgQyA9IHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCBjb3JlLlByb21pc2UgfHwgZ2xvYmFsLlByb21pc2UpO1xuICB2YXIgaXNGdW5jdGlvbiA9IHR5cGVvZiBvbkZpbmFsbHkgPT0gJ2Z1bmN0aW9uJztcbiAgcmV0dXJuIHRoaXMudGhlbihcbiAgICBpc0Z1bmN0aW9uID8gZnVuY3Rpb24gKHgpIHtcbiAgICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShDLCBvbkZpbmFsbHkoKSkudGhlbihmdW5jdGlvbiAoKSB7IHJldHVybiB4OyB9KTtcbiAgICB9IDogb25GaW5hbGx5LFxuICAgIGlzRnVuY3Rpb24gPyBmdW5jdGlvbiAoZSkge1xuICAgICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKEMsIG9uRmluYWxseSgpKS50aGVuKGZ1bmN0aW9uICgpIHsgdGhyb3cgZTsgfSk7XG4gICAgfSA6IG9uRmluYWxseVxuICApO1xufSB9KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXByb21pc2UtdHJ5XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gcmVxdWlyZSgnLi9fbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xudmFyIHBlcmZvcm0gPSByZXF1aXJlKCcuL19wZXJmb3JtJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUHJvbWlzZScsIHsgJ3RyeSc6IGZ1bmN0aW9uIChjYWxsYmFja2ZuKSB7XG4gIHZhciBwcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5LmYodGhpcyk7XG4gIHZhciByZXN1bHQgPSBwZXJmb3JtKGNhbGxiYWNrZm4pO1xuICAocmVzdWx0LmUgPyBwcm9taXNlQ2FwYWJpbGl0eS5yZWplY3QgOiBwcm9taXNlQ2FwYWJpbGl0eS5yZXNvbHZlKShyZXN1bHQudik7XG4gIHJldHVybiBwcm9taXNlQ2FwYWJpbGl0eS5wcm9taXNlO1xufSB9KTtcbiIsInZhciBtZXRhZGF0YSA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XG52YXIgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YSA9IG1ldGFkYXRhLnNldDtcblxubWV0YWRhdGEuZXhwKHsgZGVmaW5lTWV0YWRhdGE6IGZ1bmN0aW9uIGRlZmluZU1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlLCB0YXJnZXQsIHRhcmdldEtleSkge1xuICBvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlLCBhbk9iamVjdCh0YXJnZXQpLCB0b01ldGFLZXkodGFyZ2V0S2V5KSk7XG59IH0pO1xuIiwidmFyIG1ldGFkYXRhID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTtcbnZhciBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwID0gbWV0YWRhdGEubWFwO1xudmFyIHN0b3JlID0gbWV0YWRhdGEuc3RvcmU7XG5cbm1ldGFkYXRhLmV4cCh7IGRlbGV0ZU1ldGFkYXRhOiBmdW5jdGlvbiBkZWxldGVNZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gIHZhciB0YXJnZXRLZXkgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pO1xuICB2YXIgbWV0YWRhdGFNYXAgPSBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKGFuT2JqZWN0KHRhcmdldCksIHRhcmdldEtleSwgZmFsc2UpO1xuICBpZiAobWV0YWRhdGFNYXAgPT09IHVuZGVmaW5lZCB8fCAhbWV0YWRhdGFNYXBbJ2RlbGV0ZSddKG1ldGFkYXRhS2V5KSkgcmV0dXJuIGZhbHNlO1xuICBpZiAobWV0YWRhdGFNYXAuc2l6ZSkgcmV0dXJuIHRydWU7XG4gIHZhciB0YXJnZXRNZXRhZGF0YSA9IHN0b3JlLmdldCh0YXJnZXQpO1xuICB0YXJnZXRNZXRhZGF0YVsnZGVsZXRlJ10odGFyZ2V0S2V5KTtcbiAgcmV0dXJuICEhdGFyZ2V0TWV0YWRhdGEuc2l6ZSB8fCBzdG9yZVsnZGVsZXRlJ10odGFyZ2V0KTtcbn0gfSk7XG4iLCJ2YXIgbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgb3JkaW5hcnlIYXNPd25NZXRhZGF0YSA9IG1ldGFkYXRhLmhhcztcbnZhciBvcmRpbmFyeUdldE93bk1ldGFkYXRhID0gbWV0YWRhdGEuZ2V0O1xudmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTtcblxudmFyIG9yZGluYXJ5R2V0TWV0YWRhdGEgPSBmdW5jdGlvbiAoTWV0YWRhdGFLZXksIE8sIFApIHtcbiAgdmFyIGhhc093biA9IG9yZGluYXJ5SGFzT3duTWV0YWRhdGEoTWV0YWRhdGFLZXksIE8sIFApO1xuICBpZiAoaGFzT3duKSByZXR1cm4gb3JkaW5hcnlHZXRPd25NZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUCk7XG4gIHZhciBwYXJlbnQgPSBnZXRQcm90b3R5cGVPZihPKTtcbiAgcmV0dXJuIHBhcmVudCAhPT0gbnVsbCA/IG9yZGluYXJ5R2V0TWV0YWRhdGEoTWV0YWRhdGFLZXksIHBhcmVudCwgUCkgOiB1bmRlZmluZWQ7XG59O1xuXG5tZXRhZGF0YS5leHAoeyBnZXRNZXRhZGF0YTogZnVuY3Rpb24gZ2V0TWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCAvKiAsIHRhcmdldEtleSAqLykge1xuICByZXR1cm4gb3JkaW5hcnlHZXRNZXRhZGF0YShtZXRhZGF0YUtleSwgYW5PYmplY3QodGFyZ2V0KSwgYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzJdKSk7XG59IH0pO1xuIiwidmFyIFNldCA9IHJlcXVpcmUoJy4vZXM2LnNldCcpO1xudmFyIGZyb20gPSByZXF1aXJlKCcuL19hcnJheS1mcm9tLWl0ZXJhYmxlJyk7XG52YXIgbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgb3JkaW5hcnlPd25NZXRhZGF0YUtleXMgPSBtZXRhZGF0YS5rZXlzO1xudmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTtcblxudmFyIG9yZGluYXJ5TWV0YWRhdGFLZXlzID0gZnVuY3Rpb24gKE8sIFApIHtcbiAgdmFyIG9LZXlzID0gb3JkaW5hcnlPd25NZXRhZGF0YUtleXMoTywgUCk7XG4gIHZhciBwYXJlbnQgPSBnZXRQcm90b3R5cGVPZihPKTtcbiAgaWYgKHBhcmVudCA9PT0gbnVsbCkgcmV0dXJuIG9LZXlzO1xuICB2YXIgcEtleXMgPSBvcmRpbmFyeU1ldGFkYXRhS2V5cyhwYXJlbnQsIFApO1xuICByZXR1cm4gcEtleXMubGVuZ3RoID8gb0tleXMubGVuZ3RoID8gZnJvbShuZXcgU2V0KG9LZXlzLmNvbmNhdChwS2V5cykpKSA6IHBLZXlzIDogb0tleXM7XG59O1xuXG5tZXRhZGF0YS5leHAoeyBnZXRNZXRhZGF0YUtleXM6IGZ1bmN0aW9uIGdldE1ldGFkYXRhS2V5cyh0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHtcbiAgcmV0dXJuIG9yZGluYXJ5TWV0YWRhdGFLZXlzKGFuT2JqZWN0KHRhcmdldCksIGFyZ3VtZW50cy5sZW5ndGggPCAyID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1sxXSkpO1xufSB9KTtcbiIsInZhciBtZXRhZGF0YSA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBvcmRpbmFyeUdldE93bk1ldGFkYXRhID0gbWV0YWRhdGEuZ2V0O1xudmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTtcblxubWV0YWRhdGEuZXhwKHsgZ2V0T3duTWV0YWRhdGE6IGZ1bmN0aW9uIGdldE93bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHtcbiAgcmV0dXJuIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEobWV0YWRhdGFLZXksIGFuT2JqZWN0KHRhcmdldClcbiAgICAsIGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1syXSkpO1xufSB9KTtcbiIsInZhciBtZXRhZGF0YSA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyA9IG1ldGFkYXRhLmtleXM7XG52YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5O1xuXG5tZXRhZGF0YS5leHAoeyBnZXRPd25NZXRhZGF0YUtleXM6IGZ1bmN0aW9uIGdldE93bk1ldGFkYXRhS2V5cyh0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHtcbiAgcmV0dXJuIG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzKGFuT2JqZWN0KHRhcmdldCksIGFyZ3VtZW50cy5sZW5ndGggPCAyID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1sxXSkpO1xufSB9KTtcbiIsInZhciBtZXRhZGF0YSA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBvcmRpbmFyeUhhc093bk1ldGFkYXRhID0gbWV0YWRhdGEuaGFzO1xudmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTtcblxudmFyIG9yZGluYXJ5SGFzTWV0YWRhdGEgPSBmdW5jdGlvbiAoTWV0YWRhdGFLZXksIE8sIFApIHtcbiAgdmFyIGhhc093biA9IG9yZGluYXJ5SGFzT3duTWV0YWRhdGEoTWV0YWRhdGFLZXksIE8sIFApO1xuICBpZiAoaGFzT3duKSByZXR1cm4gdHJ1ZTtcbiAgdmFyIHBhcmVudCA9IGdldFByb3RvdHlwZU9mKE8pO1xuICByZXR1cm4gcGFyZW50ICE9PSBudWxsID8gb3JkaW5hcnlIYXNNZXRhZGF0YShNZXRhZGF0YUtleSwgcGFyZW50LCBQKSA6IGZhbHNlO1xufTtcblxubWV0YWRhdGEuZXhwKHsgaGFzTWV0YWRhdGE6IGZ1bmN0aW9uIGhhc01ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHtcbiAgcmV0dXJuIG9yZGluYXJ5SGFzTWV0YWRhdGEobWV0YWRhdGFLZXksIGFuT2JqZWN0KHRhcmdldCksIGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1syXSkpO1xufSB9KTtcbiIsInZhciBtZXRhZGF0YSA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBvcmRpbmFyeUhhc093bk1ldGFkYXRhID0gbWV0YWRhdGEuaGFzO1xudmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTtcblxubWV0YWRhdGEuZXhwKHsgaGFzT3duTWV0YWRhdGE6IGZ1bmN0aW9uIGhhc093bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHtcbiAgcmV0dXJuIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEobWV0YWRhdGFLZXksIGFuT2JqZWN0KHRhcmdldClcbiAgICAsIGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1syXSkpO1xufSB9KTtcbiIsInZhciAkbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIHRvTWV0YUtleSA9ICRtZXRhZGF0YS5rZXk7XG52YXIgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YSA9ICRtZXRhZGF0YS5zZXQ7XG5cbiRtZXRhZGF0YS5leHAoeyBtZXRhZGF0YTogZnVuY3Rpb24gbWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGRlY29yYXRvcih0YXJnZXQsIHRhcmdldEtleSkge1xuICAgIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEoXG4gICAgICBtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSxcbiAgICAgICh0YXJnZXRLZXkgIT09IHVuZGVmaW5lZCA/IGFuT2JqZWN0IDogYUZ1bmN0aW9uKSh0YXJnZXQpLFxuICAgICAgdG9NZXRhS2V5KHRhcmdldEtleSlcbiAgICApO1xuICB9O1xufSB9KTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9yd2FsZHJvbi90YzM5LW5vdGVzL2Jsb2IvbWFzdGVyL2VzNi8yMDE0LTA5L3NlcHQtMjUubWQjNTEwLWdsb2JhbGFzYXAtZm9yLWVucXVldWluZy1hLW1pY3JvdGFza1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBtaWNyb3Rhc2sgPSByZXF1aXJlKCcuL19taWNyb3Rhc2snKSgpO1xudmFyIHByb2Nlc3MgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5wcm9jZXNzO1xudmFyIGlzTm9kZSA9IHJlcXVpcmUoJy4vX2NvZicpKHByb2Nlc3MpID09ICdwcm9jZXNzJztcblxuJGV4cG9ydCgkZXhwb3J0LkcsIHtcbiAgYXNhcDogZnVuY3Rpb24gYXNhcChmbikge1xuICAgIHZhciBkb21haW4gPSBpc05vZGUgJiYgcHJvY2Vzcy5kb21haW47XG4gICAgbWljcm90YXNrKGRvbWFpbiA/IGRvbWFpbi5iaW5kKGZuKSA6IGZuKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vemVucGFyc2luZy9lcy1vYnNlcnZhYmxlXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgbWljcm90YXNrID0gcmVxdWlyZSgnLi9fbWljcm90YXNrJykoKTtcbnZhciBPQlNFUlZBQkxFID0gcmVxdWlyZSgnLi9fd2tzJykoJ29ic2VydmFibGUnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcbnZhciBSRVRVUk4gPSBmb3JPZi5SRVRVUk47XG5cbnZhciBnZXRNZXRob2QgPSBmdW5jdGlvbiAoZm4pIHtcbiAgcmV0dXJuIGZuID09IG51bGwgPyB1bmRlZmluZWQgOiBhRnVuY3Rpb24oZm4pO1xufTtcblxudmFyIGNsZWFudXBTdWJzY3JpcHRpb24gPSBmdW5jdGlvbiAoc3Vic2NyaXB0aW9uKSB7XG4gIHZhciBjbGVhbnVwID0gc3Vic2NyaXB0aW9uLl9jO1xuICBpZiAoY2xlYW51cCkge1xuICAgIHN1YnNjcmlwdGlvbi5fYyA9IHVuZGVmaW5lZDtcbiAgICBjbGVhbnVwKCk7XG4gIH1cbn07XG5cbnZhciBzdWJzY3JpcHRpb25DbG9zZWQgPSBmdW5jdGlvbiAoc3Vic2NyaXB0aW9uKSB7XG4gIHJldHVybiBzdWJzY3JpcHRpb24uX28gPT09IHVuZGVmaW5lZDtcbn07XG5cbnZhciBjbG9zZVN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcbiAgaWYgKCFzdWJzY3JpcHRpb25DbG9zZWQoc3Vic2NyaXB0aW9uKSkge1xuICAgIHN1YnNjcmlwdGlvbi5fbyA9IHVuZGVmaW5lZDtcbiAgICBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gIH1cbn07XG5cbnZhciBTdWJzY3JpcHRpb24gPSBmdW5jdGlvbiAob2JzZXJ2ZXIsIHN1YnNjcmliZXIpIHtcbiAgYW5PYmplY3Qob2JzZXJ2ZXIpO1xuICB0aGlzLl9jID0gdW5kZWZpbmVkO1xuICB0aGlzLl9vID0gb2JzZXJ2ZXI7XG4gIG9ic2VydmVyID0gbmV3IFN1YnNjcmlwdGlvbk9ic2VydmVyKHRoaXMpO1xuICB0cnkge1xuICAgIHZhciBjbGVhbnVwID0gc3Vic2NyaWJlcihvYnNlcnZlcik7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IGNsZWFudXA7XG4gICAgaWYgKGNsZWFudXAgIT0gbnVsbCkge1xuICAgICAgaWYgKHR5cGVvZiBjbGVhbnVwLnVuc3Vic2NyaWJlID09PSAnZnVuY3Rpb24nKSBjbGVhbnVwID0gZnVuY3Rpb24gKCkgeyBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTsgfTtcbiAgICAgIGVsc2UgYUZ1bmN0aW9uKGNsZWFudXApO1xuICAgICAgdGhpcy5fYyA9IGNsZWFudXA7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgb2JzZXJ2ZXIuZXJyb3IoZSk7XG4gICAgcmV0dXJuO1xuICB9IGlmIChzdWJzY3JpcHRpb25DbG9zZWQodGhpcykpIGNsZWFudXBTdWJzY3JpcHRpb24odGhpcyk7XG59O1xuXG5TdWJzY3JpcHRpb24ucHJvdG90eXBlID0gcmVkZWZpbmVBbGwoe30sIHtcbiAgdW5zdWJzY3JpYmU6IGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkgeyBjbG9zZVN1YnNjcmlwdGlvbih0aGlzKTsgfVxufSk7XG5cbnZhciBTdWJzY3JpcHRpb25PYnNlcnZlciA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcbiAgdGhpcy5fcyA9IHN1YnNjcmlwdGlvbjtcbn07XG5cblN1YnNjcmlwdGlvbk9ic2VydmVyLnByb3RvdHlwZSA9IHJlZGVmaW5lQWxsKHt9LCB7XG4gIG5leHQ6IGZ1bmN0aW9uIG5leHQodmFsdWUpIHtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhpcy5fcztcbiAgICBpZiAoIXN1YnNjcmlwdGlvbkNsb3NlZChzdWJzY3JpcHRpb24pKSB7XG4gICAgICB2YXIgb2JzZXJ2ZXIgPSBzdWJzY3JpcHRpb24uX287XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgbSA9IGdldE1ldGhvZChvYnNlcnZlci5uZXh0KTtcbiAgICAgICAgaWYgKG0pIHJldHVybiBtLmNhbGwob2JzZXJ2ZXIsIHZhbHVlKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjbG9zZVN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIGVycm9yOiBmdW5jdGlvbiBlcnJvcih2YWx1ZSkge1xuICAgIHZhciBzdWJzY3JpcHRpb24gPSB0aGlzLl9zO1xuICAgIGlmIChzdWJzY3JpcHRpb25DbG9zZWQoc3Vic2NyaXB0aW9uKSkgdGhyb3cgdmFsdWU7XG4gICAgdmFyIG9ic2VydmVyID0gc3Vic2NyaXB0aW9uLl9vO1xuICAgIHN1YnNjcmlwdGlvbi5fbyA9IHVuZGVmaW5lZDtcbiAgICB0cnkge1xuICAgICAgdmFyIG0gPSBnZXRNZXRob2Qob2JzZXJ2ZXIuZXJyb3IpO1xuICAgICAgaWYgKCFtKSB0aHJvdyB2YWx1ZTtcbiAgICAgIHZhbHVlID0gbS5jYWxsKG9ic2VydmVyLCB2YWx1ZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY2xlYW51cFN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9IGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH0sXG4gIGNvbXBsZXRlOiBmdW5jdGlvbiBjb21wbGV0ZSh2YWx1ZSkge1xuICAgIHZhciBzdWJzY3JpcHRpb24gPSB0aGlzLl9zO1xuICAgIGlmICghc3Vic2NyaXB0aW9uQ2xvc2VkKHN1YnNjcmlwdGlvbikpIHtcbiAgICAgIHZhciBvYnNlcnZlciA9IHN1YnNjcmlwdGlvbi5fbztcbiAgICAgIHN1YnNjcmlwdGlvbi5fbyA9IHVuZGVmaW5lZDtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBtID0gZ2V0TWV0aG9kKG9ic2VydmVyLmNvbXBsZXRlKTtcbiAgICAgICAgdmFsdWUgPSBtID8gbS5jYWxsKG9ic2VydmVyLCB2YWx1ZSkgOiB1bmRlZmluZWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY2xlYW51cFN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgIH0gY2xlYW51cFN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pO1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgfVxufSk7XG5cbnZhciAkT2JzZXJ2YWJsZSA9IGZ1bmN0aW9uIE9ic2VydmFibGUoc3Vic2NyaWJlcikge1xuICBhbkluc3RhbmNlKHRoaXMsICRPYnNlcnZhYmxlLCAnT2JzZXJ2YWJsZScsICdfZicpLl9mID0gYUZ1bmN0aW9uKHN1YnNjcmliZXIpO1xufTtcblxucmVkZWZpbmVBbGwoJE9ic2VydmFibGUucHJvdG90eXBlLCB7XG4gIHN1YnNjcmliZTogZnVuY3Rpb24gc3Vic2NyaWJlKG9ic2VydmVyKSB7XG4gICAgcmV0dXJuIG5ldyBTdWJzY3JpcHRpb24ob2JzZXJ2ZXIsIHRoaXMuX2YpO1xuICB9LFxuICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGZuKSB7XG4gICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgIHJldHVybiBuZXcgKGNvcmUuUHJvbWlzZSB8fCBnbG9iYWwuUHJvbWlzZSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgYUZ1bmN0aW9uKGZuKTtcbiAgICAgIHZhciBzdWJzY3JpcHRpb24gPSB0aGF0LnN1YnNjcmliZSh7XG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gZm4odmFsdWUpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZXJyb3I6IHJlamVjdCxcbiAgICAgICAgY29tcGxldGU6IHJlc29sdmVcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59KTtcblxucmVkZWZpbmVBbGwoJE9ic2VydmFibGUsIHtcbiAgZnJvbTogZnVuY3Rpb24gZnJvbSh4KSB7XG4gICAgdmFyIEMgPSB0eXBlb2YgdGhpcyA9PT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiAkT2JzZXJ2YWJsZTtcbiAgICB2YXIgbWV0aG9kID0gZ2V0TWV0aG9kKGFuT2JqZWN0KHgpW09CU0VSVkFCTEVdKTtcbiAgICBpZiAobWV0aG9kKSB7XG4gICAgICB2YXIgb2JzZXJ2YWJsZSA9IGFuT2JqZWN0KG1ldGhvZC5jYWxsKHgpKTtcbiAgICAgIHJldHVybiBvYnNlcnZhYmxlLmNvbnN0cnVjdG9yID09PSBDID8gb2JzZXJ2YWJsZSA6IG5ldyBDKGZ1bmN0aW9uIChvYnNlcnZlcikge1xuICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZS5zdWJzY3JpYmUob2JzZXJ2ZXIpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgQyhmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcbiAgICAgIHZhciBkb25lID0gZmFsc2U7XG4gICAgICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIWRvbmUpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKGZvck9mKHgsIGZhbHNlLCBmdW5jdGlvbiAoaXQpIHtcbiAgICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChpdCk7XG4gICAgICAgICAgICAgIGlmIChkb25lKSByZXR1cm4gUkVUVVJOO1xuICAgICAgICAgICAgfSkgPT09IFJFVFVSTikgcmV0dXJuO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGlmIChkb25lKSB0aHJvdyBlO1xuICAgICAgICAgICAgb2JzZXJ2ZXIuZXJyb3IoZSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfSBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7IGRvbmUgPSB0cnVlOyB9O1xuICAgIH0pO1xuICB9LFxuICBvZjogZnVuY3Rpb24gb2YoKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoLCBpdGVtcyA9IG5ldyBBcnJheShsKTsgaSA8IGw7KSBpdGVtc1tpXSA9IGFyZ3VtZW50c1tpKytdO1xuICAgIHJldHVybiBuZXcgKHR5cGVvZiB0aGlzID09PSAnZnVuY3Rpb24nID8gdGhpcyA6ICRPYnNlcnZhYmxlKShmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcbiAgICAgIHZhciBkb25lID0gZmFsc2U7XG4gICAgICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIWRvbmUpIHtcbiAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGl0ZW1zLmxlbmd0aDsgKytqKSB7XG4gICAgICAgICAgICBvYnNlcnZlci5uZXh0KGl0ZW1zW2pdKTtcbiAgICAgICAgICAgIGlmIChkb25lKSByZXR1cm47XG4gICAgICAgICAgfSBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7IGRvbmUgPSB0cnVlOyB9O1xuICAgIH0pO1xuICB9XG59KTtcblxuaGlkZSgkT2JzZXJ2YWJsZS5wcm90b3R5cGUsIE9CU0VSVkFCTEUsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0pO1xuXG4kZXhwb3J0KCRleHBvcnQuRywgeyBPYnNlcnZhYmxlOiAkT2JzZXJ2YWJsZSB9KTtcblxucmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKSgnT2JzZXJ2YWJsZScpO1xuIiwiLy8gaWU5LSBzZXRUaW1lb3V0ICYgc2V0SW50ZXJ2YWwgYWRkaXRpb25hbCBwYXJhbWV0ZXJzIGZpeFxudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuL191c2VyLWFnZW50Jyk7XG52YXIgc2xpY2UgPSBbXS5zbGljZTtcbnZhciBNU0lFID0gL01TSUUgLlxcLi8udGVzdCh1c2VyQWdlbnQpOyAvLyA8LSBkaXJ0eSBpZTktIGNoZWNrXG52YXIgd3JhcCA9IGZ1bmN0aW9uIChzZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChmbiwgdGltZSAvKiAsIC4uLmFyZ3MgKi8pIHtcbiAgICB2YXIgYm91bmRBcmdzID0gYXJndW1lbnRzLmxlbmd0aCA+IDI7XG4gICAgdmFyIGFyZ3MgPSBib3VuZEFyZ3MgPyBzbGljZS5jYWxsKGFyZ3VtZW50cywgMikgOiBmYWxzZTtcbiAgICByZXR1cm4gc2V0KGJvdW5kQXJncyA/IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICAgICAgKHR5cGVvZiBmbiA9PSAnZnVuY3Rpb24nID8gZm4gOiBGdW5jdGlvbihmbikpLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH0gOiBmbiwgdGltZSk7XG4gIH07XG59O1xuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkIgKyAkZXhwb3J0LkYgKiBNU0lFLCB7XG4gIHNldFRpbWVvdXQ6IHdyYXAoZ2xvYmFsLnNldFRpbWVvdXQpLFxuICBzZXRJbnRlcnZhbDogd3JhcChnbG9iYWwuc2V0SW50ZXJ2YWwpXG59KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHRhc2sgPSByZXF1aXJlKCcuL190YXNrJyk7XG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuQiwge1xuICBzZXRJbW1lZGlhdGU6ICR0YXNrLnNldCxcbiAgY2xlYXJJbW1lZGlhdGU6ICR0YXNrLmNsZWFyXG59KTtcbiIsInZhciAkaXRlcmF0b3JzID0gcmVxdWlyZSgnLi9lczYuYXJyYXkuaXRlcmF0b3InKTtcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciB3a3MgPSByZXF1aXJlKCcuL193a3MnKTtcbnZhciBJVEVSQVRPUiA9IHdrcygnaXRlcmF0b3InKTtcbnZhciBUT19TVFJJTkdfVEFHID0gd2tzKCd0b1N0cmluZ1RhZycpO1xudmFyIEFycmF5VmFsdWVzID0gSXRlcmF0b3JzLkFycmF5O1xuXG52YXIgRE9NSXRlcmFibGVzID0ge1xuICBDU1NSdWxlTGlzdDogdHJ1ZSwgLy8gVE9ETzogTm90IHNwZWMgY29tcGxpYW50LCBzaG91bGQgYmUgZmFsc2UuXG4gIENTU1N0eWxlRGVjbGFyYXRpb246IGZhbHNlLFxuICBDU1NWYWx1ZUxpc3Q6IGZhbHNlLFxuICBDbGllbnRSZWN0TGlzdDogZmFsc2UsXG4gIERPTVJlY3RMaXN0OiBmYWxzZSxcbiAgRE9NU3RyaW5nTGlzdDogZmFsc2UsXG4gIERPTVRva2VuTGlzdDogdHJ1ZSxcbiAgRGF0YVRyYW5zZmVySXRlbUxpc3Q6IGZhbHNlLFxuICBGaWxlTGlzdDogZmFsc2UsXG4gIEhUTUxBbGxDb2xsZWN0aW9uOiBmYWxzZSxcbiAgSFRNTENvbGxlY3Rpb246IGZhbHNlLFxuICBIVE1MRm9ybUVsZW1lbnQ6IGZhbHNlLFxuICBIVE1MU2VsZWN0RWxlbWVudDogZmFsc2UsXG4gIE1lZGlhTGlzdDogdHJ1ZSwgLy8gVE9ETzogTm90IHNwZWMgY29tcGxpYW50LCBzaG91bGQgYmUgZmFsc2UuXG4gIE1pbWVUeXBlQXJyYXk6IGZhbHNlLFxuICBOYW1lZE5vZGVNYXA6IGZhbHNlLFxuICBOb2RlTGlzdDogdHJ1ZSxcbiAgUGFpbnRSZXF1ZXN0TGlzdDogZmFsc2UsXG4gIFBsdWdpbjogZmFsc2UsXG4gIFBsdWdpbkFycmF5OiBmYWxzZSxcbiAgU1ZHTGVuZ3RoTGlzdDogZmFsc2UsXG4gIFNWR051bWJlckxpc3Q6IGZhbHNlLFxuICBTVkdQYXRoU2VnTGlzdDogZmFsc2UsXG4gIFNWR1BvaW50TGlzdDogZmFsc2UsXG4gIFNWR1N0cmluZ0xpc3Q6IGZhbHNlLFxuICBTVkdUcmFuc2Zvcm1MaXN0OiBmYWxzZSxcbiAgU291cmNlQnVmZmVyTGlzdDogZmFsc2UsXG4gIFN0eWxlU2hlZXRMaXN0OiB0cnVlLCAvLyBUT0RPOiBOb3Qgc3BlYyBjb21wbGlhbnQsIHNob3VsZCBiZSBmYWxzZS5cbiAgVGV4dFRyYWNrQ3VlTGlzdDogZmFsc2UsXG4gIFRleHRUcmFja0xpc3Q6IGZhbHNlLFxuICBUb3VjaExpc3Q6IGZhbHNlXG59O1xuXG5mb3IgKHZhciBjb2xsZWN0aW9ucyA9IGdldEtleXMoRE9NSXRlcmFibGVzKSwgaSA9IDA7IGkgPCBjb2xsZWN0aW9ucy5sZW5ndGg7IGkrKykge1xuICB2YXIgTkFNRSA9IGNvbGxlY3Rpb25zW2ldO1xuICB2YXIgZXhwbGljaXQgPSBET01JdGVyYWJsZXNbTkFNRV07XG4gIHZhciBDb2xsZWN0aW9uID0gZ2xvYmFsW05BTUVdO1xuICB2YXIgcHJvdG8gPSBDb2xsZWN0aW9uICYmIENvbGxlY3Rpb24ucHJvdG90eXBlO1xuICB2YXIga2V5O1xuICBpZiAocHJvdG8pIHtcbiAgICBpZiAoIXByb3RvW0lURVJBVE9SXSkgaGlkZShwcm90bywgSVRFUkFUT1IsIEFycmF5VmFsdWVzKTtcbiAgICBpZiAoIXByb3RvW1RPX1NUUklOR19UQUddKSBoaWRlKHByb3RvLCBUT19TVFJJTkdfVEFHLCBOQU1FKTtcbiAgICBJdGVyYXRvcnNbTkFNRV0gPSBBcnJheVZhbHVlcztcbiAgICBpZiAoZXhwbGljaXQpIGZvciAoa2V5IGluICRpdGVyYXRvcnMpIGlmICghcHJvdG9ba2V5XSkgcmVkZWZpbmUocHJvdG8sIGtleSwgJGl0ZXJhdG9yc1trZXldLCB0cnVlKTtcbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogaHR0cHM6Ly9yYXcuZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9tYXN0ZXIvTElDRU5TRSBmaWxlLiBBblxuICogYWRkaXRpb25hbCBncmFudCBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluXG4gKiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKi9cblxuIShmdW5jdGlvbihnbG9iYWwpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIE9wID0gT2JqZWN0LnByb3RvdHlwZTtcbiAgdmFyIGhhc093biA9IE9wLmhhc093blByb3BlcnR5O1xuICB2YXIgdW5kZWZpbmVkOyAvLyBNb3JlIGNvbXByZXNzaWJsZSB0aGFuIHZvaWQgMC5cbiAgdmFyICRTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgPyBTeW1ib2wgOiB7fTtcbiAgdmFyIGl0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5pdGVyYXRvciB8fCBcIkBAaXRlcmF0b3JcIjtcbiAgdmFyIGFzeW5jSXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLmFzeW5jSXRlcmF0b3IgfHwgXCJAQGFzeW5jSXRlcmF0b3JcIjtcbiAgdmFyIHRvU3RyaW5nVGFnU3ltYm9sID0gJFN5bWJvbC50b1N0cmluZ1RhZyB8fCBcIkBAdG9TdHJpbmdUYWdcIjtcblxuICB2YXIgaW5Nb2R1bGUgPSB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiO1xuICB2YXIgcnVudGltZSA9IGdsb2JhbC5yZWdlbmVyYXRvclJ1bnRpbWU7XG4gIGlmIChydW50aW1lKSB7XG4gICAgaWYgKGluTW9kdWxlKSB7XG4gICAgICAvLyBJZiByZWdlbmVyYXRvclJ1bnRpbWUgaXMgZGVmaW5lZCBnbG9iYWxseSBhbmQgd2UncmUgaW4gYSBtb2R1bGUsXG4gICAgICAvLyBtYWtlIHRoZSBleHBvcnRzIG9iamVjdCBpZGVudGljYWwgdG8gcmVnZW5lcmF0b3JSdW50aW1lLlxuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBydW50aW1lO1xuICAgIH1cbiAgICAvLyBEb24ndCBib3RoZXIgZXZhbHVhdGluZyB0aGUgcmVzdCBvZiB0aGlzIGZpbGUgaWYgdGhlIHJ1bnRpbWUgd2FzXG4gICAgLy8gYWxyZWFkeSBkZWZpbmVkIGdsb2JhbGx5LlxuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIERlZmluZSB0aGUgcnVudGltZSBnbG9iYWxseSAoYXMgZXhwZWN0ZWQgYnkgZ2VuZXJhdGVkIGNvZGUpIGFzIGVpdGhlclxuICAvLyBtb2R1bGUuZXhwb3J0cyAoaWYgd2UncmUgaW4gYSBtb2R1bGUpIG9yIGEgbmV3LCBlbXB0eSBvYmplY3QuXG4gIHJ1bnRpbWUgPSBnbG9iYWwucmVnZW5lcmF0b3JSdW50aW1lID0gaW5Nb2R1bGUgPyBtb2R1bGUuZXhwb3J0cyA6IHt9O1xuXG4gIGZ1bmN0aW9uIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBJZiBvdXRlckZuIHByb3ZpZGVkIGFuZCBvdXRlckZuLnByb3RvdHlwZSBpcyBhIEdlbmVyYXRvciwgdGhlbiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvci5cbiAgICB2YXIgcHJvdG9HZW5lcmF0b3IgPSBvdXRlckZuICYmIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yID8gb3V0ZXJGbiA6IEdlbmVyYXRvcjtcbiAgICB2YXIgZ2VuZXJhdG9yID0gT2JqZWN0LmNyZWF0ZShwcm90b0dlbmVyYXRvci5wcm90b3R5cGUpO1xuICAgIHZhciBjb250ZXh0ID0gbmV3IENvbnRleHQodHJ5TG9jc0xpc3QgfHwgW10pO1xuXG4gICAgLy8gVGhlIC5faW52b2tlIG1ldGhvZCB1bmlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlIC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcy5cbiAgICBnZW5lcmF0b3IuX2ludm9rZSA9IG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG5cbiAgICByZXR1cm4gZ2VuZXJhdG9yO1xuICB9XG4gIHJ1bnRpbWUud3JhcCA9IHdyYXA7XG5cbiAgLy8gVHJ5L2NhdGNoIGhlbHBlciB0byBtaW5pbWl6ZSBkZW9wdGltaXphdGlvbnMuIFJldHVybnMgYSBjb21wbGV0aW9uXG4gIC8vIHJlY29yZCBsaWtlIGNvbnRleHQudHJ5RW50cmllc1tpXS5jb21wbGV0aW9uLiBUaGlzIGludGVyZmFjZSBjb3VsZFxuICAvLyBoYXZlIGJlZW4gKGFuZCB3YXMgcHJldmlvdXNseSkgZGVzaWduZWQgdG8gdGFrZSBhIGNsb3N1cmUgdG8gYmVcbiAgLy8gaW52b2tlZCB3aXRob3V0IGFyZ3VtZW50cywgYnV0IGluIGFsbCB0aGUgY2FzZXMgd2UgY2FyZSBhYm91dCB3ZVxuICAvLyBhbHJlYWR5IGhhdmUgYW4gZXhpc3RpbmcgbWV0aG9kIHdlIHdhbnQgdG8gY2FsbCwgc28gdGhlcmUncyBubyBuZWVkXG4gIC8vIHRvIGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBvYmplY3QuIFdlIGNhbiBldmVuIGdldCBhd2F5IHdpdGggYXNzdW1pbmdcbiAgLy8gdGhlIG1ldGhvZCB0YWtlcyBleGFjdGx5IG9uZSBhcmd1bWVudCwgc2luY2UgdGhhdCBoYXBwZW5zIHRvIGJlIHRydWVcbiAgLy8gaW4gZXZlcnkgY2FzZSwgc28gd2UgZG9uJ3QgaGF2ZSB0byB0b3VjaCB0aGUgYXJndW1lbnRzIG9iamVjdC4gVGhlXG4gIC8vIG9ubHkgYWRkaXRpb25hbCBhbGxvY2F0aW9uIHJlcXVpcmVkIGlzIHRoZSBjb21wbGV0aW9uIHJlY29yZCwgd2hpY2hcbiAgLy8gaGFzIGEgc3RhYmxlIHNoYXBlIGFuZCBzbyBob3BlZnVsbHkgc2hvdWxkIGJlIGNoZWFwIHRvIGFsbG9jYXRlLlxuICBmdW5jdGlvbiB0cnlDYXRjaChmbiwgb2JqLCBhcmcpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJub3JtYWxcIiwgYXJnOiBmbi5jYWxsKG9iaiwgYXJnKSB9O1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJ0aHJvd1wiLCBhcmc6IGVyciB9O1xuICAgIH1cbiAgfVxuXG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0ID0gXCJzdXNwZW5kZWRTdGFydFwiO1xuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCA9IFwic3VzcGVuZGVkWWllbGRcIjtcbiAgdmFyIEdlblN0YXRlRXhlY3V0aW5nID0gXCJleGVjdXRpbmdcIjtcbiAgdmFyIEdlblN0YXRlQ29tcGxldGVkID0gXCJjb21wbGV0ZWRcIjtcblxuICAvLyBSZXR1cm5pbmcgdGhpcyBvYmplY3QgZnJvbSB0aGUgaW5uZXJGbiBoYXMgdGhlIHNhbWUgZWZmZWN0IGFzXG4gIC8vIGJyZWFraW5nIG91dCBvZiB0aGUgZGlzcGF0Y2ggc3dpdGNoIHN0YXRlbWVudC5cbiAgdmFyIENvbnRpbnVlU2VudGluZWwgPSB7fTtcblxuICAvLyBEdW1teSBjb25zdHJ1Y3RvciBmdW5jdGlvbnMgdGhhdCB3ZSB1c2UgYXMgdGhlIC5jb25zdHJ1Y3RvciBhbmRcbiAgLy8gLmNvbnN0cnVjdG9yLnByb3RvdHlwZSBwcm9wZXJ0aWVzIGZvciBmdW5jdGlvbnMgdGhhdCByZXR1cm4gR2VuZXJhdG9yXG4gIC8vIG9iamVjdHMuIEZvciBmdWxsIHNwZWMgY29tcGxpYW5jZSwgeW91IG1heSB3aXNoIHRvIGNvbmZpZ3VyZSB5b3VyXG4gIC8vIG1pbmlmaWVyIG5vdCB0byBtYW5nbGUgdGhlIG5hbWVzIG9mIHRoZXNlIHR3byBmdW5jdGlvbnMuXG4gIGZ1bmN0aW9uIEdlbmVyYXRvcigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUoKSB7fVxuXG4gIC8vIFRoaXMgaXMgYSBwb2x5ZmlsbCBmb3IgJUl0ZXJhdG9yUHJvdG90eXBlJSBmb3IgZW52aXJvbm1lbnRzIHRoYXRcbiAgLy8gZG9uJ3QgbmF0aXZlbHkgc3VwcG9ydCBpdC5cbiAgdmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG4gIEl0ZXJhdG9yUHJvdG90eXBlW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICB2YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG4gIHZhciBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvICYmIGdldFByb3RvKGdldFByb3RvKHZhbHVlcyhbXSkpKTtcbiAgaWYgKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICYmXG4gICAgICBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAhPT0gT3AgJiZcbiAgICAgIGhhc093bi5jYWxsKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlLCBpdGVyYXRvclN5bWJvbCkpIHtcbiAgICAvLyBUaGlzIGVudmlyb25tZW50IGhhcyBhIG5hdGl2ZSAlSXRlcmF0b3JQcm90b3R5cGUlOyB1c2UgaXQgaW5zdGVhZFxuICAgIC8vIG9mIHRoZSBwb2x5ZmlsbC5cbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlO1xuICB9XG5cbiAgdmFyIEdwID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUucHJvdG90eXBlID1cbiAgICBHZW5lcmF0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSk7XG4gIEdlbmVyYXRvckZ1bmN0aW9uLnByb3RvdHlwZSA9IEdwLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb247XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlW3RvU3RyaW5nVGFnU3ltYm9sXSA9XG4gICAgR2VuZXJhdG9yRnVuY3Rpb24uZGlzcGxheU5hbWUgPSBcIkdlbmVyYXRvckZ1bmN0aW9uXCI7XG5cbiAgLy8gSGVscGVyIGZvciBkZWZpbmluZyB0aGUgLm5leHQsIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcyBvZiB0aGVcbiAgLy8gSXRlcmF0b3IgaW50ZXJmYWNlIGluIHRlcm1zIG9mIGEgc2luZ2xlIC5faW52b2tlIG1ldGhvZC5cbiAgZnVuY3Rpb24gZGVmaW5lSXRlcmF0b3JNZXRob2RzKHByb3RvdHlwZSkge1xuICAgIFtcIm5leHRcIiwgXCJ0aHJvd1wiLCBcInJldHVyblwiXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgICAgcHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbihhcmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludm9rZShtZXRob2QsIGFyZyk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgcnVudGltZS5pc0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgdmFyIGN0b3IgPSB0eXBlb2YgZ2VuRnVuID09PSBcImZ1bmN0aW9uXCIgJiYgZ2VuRnVuLmNvbnN0cnVjdG9yO1xuICAgIHJldHVybiBjdG9yXG4gICAgICA/IGN0b3IgPT09IEdlbmVyYXRvckZ1bmN0aW9uIHx8XG4gICAgICAgIC8vIEZvciB0aGUgbmF0aXZlIEdlbmVyYXRvckZ1bmN0aW9uIGNvbnN0cnVjdG9yLCB0aGUgYmVzdCB3ZSBjYW5cbiAgICAgICAgLy8gZG8gaXMgdG8gY2hlY2sgaXRzIC5uYW1lIHByb3BlcnR5LlxuICAgICAgICAoY3Rvci5kaXNwbGF5TmFtZSB8fCBjdG9yLm5hbWUpID09PSBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgICAgIDogZmFsc2U7XG4gIH07XG5cbiAgcnVudGltZS5tYXJrID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgaWYgKE9iamVjdC5zZXRQcm90b3R5cGVPZikge1xuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGdlbkZ1biwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBnZW5GdW4uX19wcm90b19fID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gICAgICBpZiAoISh0b1N0cmluZ1RhZ1N5bWJvbCBpbiBnZW5GdW4pKSB7XG4gICAgICAgIGdlbkZ1blt0b1N0cmluZ1RhZ1N5bWJvbF0gPSBcIkdlbmVyYXRvckZ1bmN0aW9uXCI7XG4gICAgICB9XG4gICAgfVxuICAgIGdlbkZ1bi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEdwKTtcbiAgICByZXR1cm4gZ2VuRnVuO1xuICB9O1xuXG4gIC8vIFdpdGhpbiB0aGUgYm9keSBvZiBhbnkgYXN5bmMgZnVuY3Rpb24sIGBhd2FpdCB4YCBpcyB0cmFuc2Zvcm1lZCB0b1xuICAvLyBgeWllbGQgcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKHgpYCwgc28gdGhhdCB0aGUgcnVudGltZSBjYW4gdGVzdFxuICAvLyBgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKWAgdG8gZGV0ZXJtaW5lIGlmIHRoZSB5aWVsZGVkIHZhbHVlIGlzXG4gIC8vIG1lYW50IHRvIGJlIGF3YWl0ZWQuXG4gIHJ1bnRpbWUuYXdyYXAgPSBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4geyBfX2F3YWl0OiBhcmcgfTtcbiAgfTtcblxuICBmdW5jdGlvbiBBc3luY0l0ZXJhdG9yKGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goZ2VuZXJhdG9yW21ldGhvZF0sIGdlbmVyYXRvciwgYXJnKTtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHJlamVjdChyZWNvcmQuYXJnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWNvcmQuYXJnO1xuICAgICAgICB2YXIgdmFsdWUgPSByZXN1bHQudmFsdWU7XG4gICAgICAgIGlmICh2YWx1ZSAmJlxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2YWx1ZS5fX2F3YWl0KS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJuZXh0XCIsIHZhbHVlLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgaW52b2tlKFwidGhyb3dcIiwgZXJyLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihmdW5jdGlvbih1bndyYXBwZWQpIHtcbiAgICAgICAgICAvLyBXaGVuIGEgeWllbGRlZCBQcm9taXNlIGlzIHJlc29sdmVkLCBpdHMgZmluYWwgdmFsdWUgYmVjb21lc1xuICAgICAgICAgIC8vIHRoZSAudmFsdWUgb2YgdGhlIFByb21pc2U8e3ZhbHVlLGRvbmV9PiByZXN1bHQgZm9yIHRoZVxuICAgICAgICAgIC8vIGN1cnJlbnQgaXRlcmF0aW9uLiBJZiB0aGUgUHJvbWlzZSBpcyByZWplY3RlZCwgaG93ZXZlciwgdGhlXG4gICAgICAgICAgLy8gcmVzdWx0IGZvciB0aGlzIGl0ZXJhdGlvbiB3aWxsIGJlIHJlamVjdGVkIHdpdGggdGhlIHNhbWVcbiAgICAgICAgICAvLyByZWFzb24uIE5vdGUgdGhhdCByZWplY3Rpb25zIG9mIHlpZWxkZWQgUHJvbWlzZXMgYXJlIG5vdFxuICAgICAgICAgIC8vIHRocm93biBiYWNrIGludG8gdGhlIGdlbmVyYXRvciBmdW5jdGlvbiwgYXMgaXMgdGhlIGNhc2VcbiAgICAgICAgICAvLyB3aGVuIGFuIGF3YWl0ZWQgUHJvbWlzZSBpcyByZWplY3RlZC4gVGhpcyBkaWZmZXJlbmNlIGluXG4gICAgICAgICAgLy8gYmVoYXZpb3IgYmV0d2VlbiB5aWVsZCBhbmQgYXdhaXQgaXMgaW1wb3J0YW50LCBiZWNhdXNlIGl0XG4gICAgICAgICAgLy8gYWxsb3dzIHRoZSBjb25zdW1lciB0byBkZWNpZGUgd2hhdCB0byBkbyB3aXRoIHRoZSB5aWVsZGVkXG4gICAgICAgICAgLy8gcmVqZWN0aW9uIChzd2FsbG93IGl0IGFuZCBjb250aW51ZSwgbWFudWFsbHkgLnRocm93IGl0IGJhY2tcbiAgICAgICAgICAvLyBpbnRvIHRoZSBnZW5lcmF0b3IsIGFiYW5kb24gaXRlcmF0aW9uLCB3aGF0ZXZlcikuIFdpdGhcbiAgICAgICAgICAvLyBhd2FpdCwgYnkgY29udHJhc3QsIHRoZXJlIGlzIG5vIG9wcG9ydHVuaXR5IHRvIGV4YW1pbmUgdGhlXG4gICAgICAgICAgLy8gcmVqZWN0aW9uIHJlYXNvbiBvdXRzaWRlIHRoZSBnZW5lcmF0b3IgZnVuY3Rpb24sIHNvIHRoZVxuICAgICAgICAgIC8vIG9ubHkgb3B0aW9uIGlzIHRvIHRocm93IGl0IGZyb20gdGhlIGF3YWl0IGV4cHJlc3Npb24sIGFuZFxuICAgICAgICAgIC8vIGxldCB0aGUgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhbmRsZSB0aGUgZXhjZXB0aW9uLlxuICAgICAgICAgIHJlc3VsdC52YWx1ZSA9IHVud3JhcHBlZDtcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0sIHJlamVjdCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBnbG9iYWwucHJvY2VzcyA9PT0gXCJvYmplY3RcIiAmJiBnbG9iYWwucHJvY2Vzcy5kb21haW4pIHtcbiAgICAgIGludm9rZSA9IGdsb2JhbC5wcm9jZXNzLmRvbWFpbi5iaW5kKGludm9rZSk7XG4gICAgfVxuXG4gICAgdmFyIHByZXZpb3VzUHJvbWlzZTtcblxuICAgIGZ1bmN0aW9uIGVucXVldWUobWV0aG9kLCBhcmcpIHtcbiAgICAgIGZ1bmN0aW9uIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByZXZpb3VzUHJvbWlzZSA9XG4gICAgICAgIC8vIElmIGVucXVldWUgaGFzIGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiB3ZSB3YW50IHRvIHdhaXQgdW50aWxcbiAgICAgICAgLy8gYWxsIHByZXZpb3VzIFByb21pc2VzIGhhdmUgYmVlbiByZXNvbHZlZCBiZWZvcmUgY2FsbGluZyBpbnZva2UsXG4gICAgICAgIC8vIHNvIHRoYXQgcmVzdWx0cyBhcmUgYWx3YXlzIGRlbGl2ZXJlZCBpbiB0aGUgY29ycmVjdCBvcmRlci4gSWZcbiAgICAgICAgLy8gZW5xdWV1ZSBoYXMgbm90IGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiBpdCBpcyBpbXBvcnRhbnQgdG9cbiAgICAgICAgLy8gY2FsbCBpbnZva2UgaW1tZWRpYXRlbHksIHdpdGhvdXQgd2FpdGluZyBvbiBhIGNhbGxiYWNrIHRvIGZpcmUsXG4gICAgICAgIC8vIHNvIHRoYXQgdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBoYXMgdGhlIG9wcG9ydHVuaXR5IHRvIGRvXG4gICAgICAgIC8vIGFueSBuZWNlc3Nhcnkgc2V0dXAgaW4gYSBwcmVkaWN0YWJsZSB3YXkuIFRoaXMgcHJlZGljdGFiaWxpdHlcbiAgICAgICAgLy8gaXMgd2h5IHRoZSBQcm9taXNlIGNvbnN0cnVjdG9yIHN5bmNocm9ub3VzbHkgaW52b2tlcyBpdHNcbiAgICAgICAgLy8gZXhlY3V0b3IgY2FsbGJhY2ssIGFuZCB3aHkgYXN5bmMgZnVuY3Rpb25zIHN5bmNocm9ub3VzbHlcbiAgICAgICAgLy8gZXhlY3V0ZSBjb2RlIGJlZm9yZSB0aGUgZmlyc3QgYXdhaXQuIFNpbmNlIHdlIGltcGxlbWVudCBzaW1wbGVcbiAgICAgICAgLy8gYXN5bmMgZnVuY3Rpb25zIGluIHRlcm1zIG9mIGFzeW5jIGdlbmVyYXRvcnMsIGl0IGlzIGVzcGVjaWFsbHlcbiAgICAgICAgLy8gaW1wb3J0YW50IHRvIGdldCB0aGlzIHJpZ2h0LCBldmVuIHRob3VnaCBpdCByZXF1aXJlcyBjYXJlLlxuICAgICAgICBwcmV2aW91c1Byb21pc2UgPyBwcmV2aW91c1Byb21pc2UudGhlbihcbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyxcbiAgICAgICAgICAvLyBBdm9pZCBwcm9wYWdhdGluZyBmYWlsdXJlcyB0byBQcm9taXNlcyByZXR1cm5lZCBieSBsYXRlclxuICAgICAgICAgIC8vIGludm9jYXRpb25zIG9mIHRoZSBpdGVyYXRvci5cbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZ1xuICAgICAgICApIDogY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKTtcbiAgICB9XG5cbiAgICAvLyBEZWZpbmUgdGhlIHVuaWZpZWQgaGVscGVyIG1ldGhvZCB0aGF0IGlzIHVzZWQgdG8gaW1wbGVtZW50IC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gKHNlZSBkZWZpbmVJdGVyYXRvck1ldGhvZHMpLlxuICAgIHRoaXMuX2ludm9rZSA9IGVucXVldWU7XG4gIH1cblxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpO1xuICBBc3luY0l0ZXJhdG9yLnByb3RvdHlwZVthc3luY0l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgcnVudGltZS5Bc3luY0l0ZXJhdG9yID0gQXN5bmNJdGVyYXRvcjtcblxuICAvLyBOb3RlIHRoYXQgc2ltcGxlIGFzeW5jIGZ1bmN0aW9ucyBhcmUgaW1wbGVtZW50ZWQgb24gdG9wIG9mXG4gIC8vIEFzeW5jSXRlcmF0b3Igb2JqZWN0czsgdGhleSBqdXN0IHJldHVybiBhIFByb21pc2UgZm9yIHRoZSB2YWx1ZSBvZlxuICAvLyB0aGUgZmluYWwgcmVzdWx0IHByb2R1Y2VkIGJ5IHRoZSBpdGVyYXRvci5cbiAgcnVudGltZS5hc3luYyA9IGZ1bmN0aW9uKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgdmFyIGl0ZXIgPSBuZXcgQXN5bmNJdGVyYXRvcihcbiAgICAgIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpXG4gICAgKTtcblxuICAgIHJldHVybiBydW50aW1lLmlzR2VuZXJhdG9yRnVuY3Rpb24ob3V0ZXJGbilcbiAgICAgID8gaXRlciAvLyBJZiBvdXRlckZuIGlzIGEgZ2VuZXJhdG9yLCByZXR1cm4gdGhlIGZ1bGwgaXRlcmF0b3IuXG4gICAgICA6IGl0ZXIubmV4dCgpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdC5kb25lID8gcmVzdWx0LnZhbHVlIDogaXRlci5uZXh0KCk7XG4gICAgICAgIH0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCkge1xuICAgIHZhciBzdGF0ZSA9IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQ7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlRXhlY3V0aW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmdcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVDb21wbGV0ZWQpIHtcbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgdGhyb3cgYXJnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQmUgZm9yZ2l2aW5nLCBwZXIgMjUuMy4zLjMuMyBvZiB0aGUgc3BlYzpcbiAgICAgICAgLy8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWdlbmVyYXRvcnJlc3VtZVxuICAgICAgICByZXR1cm4gZG9uZVJlc3VsdCgpO1xuICAgICAgfVxuXG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IG1ldGhvZDtcbiAgICAgIGNvbnRleHQuYXJnID0gYXJnO1xuXG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSBjb250ZXh0LmRlbGVnYXRlO1xuICAgICAgICBpZiAoZGVsZWdhdGUpIHtcbiAgICAgICAgICB2YXIgZGVsZWdhdGVSZXN1bHQgPSBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcbiAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCA9PT0gQ29udGludWVTZW50aW5lbCkgY29udGludWU7XG4gICAgICAgICAgICByZXR1cm4gZGVsZWdhdGVSZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAgIC8vIFNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICAgICAgY29udGV4dC5zZW50ID0gY29udGV4dC5fc2VudCA9IGNvbnRleHQuYXJnO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydCkge1xuICAgICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAgIHRocm93IGNvbnRleHQuYXJnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgICBjb250ZXh0LmFicnVwdChcInJldHVyblwiLCBjb250ZXh0LmFyZyk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZSA9IEdlblN0YXRlRXhlY3V0aW5nO1xuXG4gICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiKSB7XG4gICAgICAgICAgLy8gSWYgYW4gZXhjZXB0aW9uIGlzIHRocm93biBmcm9tIGlubmVyRm4sIHdlIGxlYXZlIHN0YXRlID09PVxuICAgICAgICAgIC8vIEdlblN0YXRlRXhlY3V0aW5nIGFuZCBsb29wIGJhY2sgZm9yIGFub3RoZXIgaW52b2NhdGlvbi5cbiAgICAgICAgICBzdGF0ZSA9IGNvbnRleHQuZG9uZVxuICAgICAgICAgICAgPyBHZW5TdGF0ZUNvbXBsZXRlZFxuICAgICAgICAgICAgOiBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkO1xuXG4gICAgICAgICAgaWYgKHJlY29yZC5hcmcgPT09IENvbnRpbnVlU2VudGluZWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogcmVjb3JkLmFyZyxcbiAgICAgICAgICAgIGRvbmU6IGNvbnRleHQuZG9uZVxuICAgICAgICAgIH07XG5cbiAgICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAvLyBEaXNwYXRjaCB0aGUgZXhjZXB0aW9uIGJ5IGxvb3BpbmcgYmFjayBhcm91bmQgdG8gdGhlXG4gICAgICAgICAgLy8gY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZykgY2FsbCBhYm92ZS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gQ2FsbCBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF0oY29udGV4dC5hcmcpIGFuZCBoYW5kbGUgdGhlXG4gIC8vIHJlc3VsdCwgZWl0aGVyIGJ5IHJldHVybmluZyBhIHsgdmFsdWUsIGRvbmUgfSByZXN1bHQgZnJvbSB0aGVcbiAgLy8gZGVsZWdhdGUgaXRlcmF0b3IsIG9yIGJ5IG1vZGlmeWluZyBjb250ZXh0Lm1ldGhvZCBhbmQgY29udGV4dC5hcmcsXG4gIC8vIHNldHRpbmcgY29udGV4dC5kZWxlZ2F0ZSB0byBudWxsLCBhbmQgcmV0dXJuaW5nIHRoZSBDb250aW51ZVNlbnRpbmVsLlxuICBmdW5jdGlvbiBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KSB7XG4gICAgdmFyIG1ldGhvZCA9IGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXTtcbiAgICBpZiAobWV0aG9kID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIEEgLnRocm93IG9yIC5yZXR1cm4gd2hlbiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIG5vIC50aHJvd1xuICAgICAgLy8gbWV0aG9kIGFsd2F5cyB0ZXJtaW5hdGVzIHRoZSB5aWVsZCogbG9vcC5cbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICBpZiAoZGVsZWdhdGUuaXRlcmF0b3IucmV0dXJuKSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBhIHJldHVybiBtZXRob2QsIGdpdmUgaXQgYVxuICAgICAgICAgIC8vIGNoYW5jZSB0byBjbGVhbiB1cC5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG5cbiAgICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgLy8gSWYgbWF5YmVJbnZva2VEZWxlZ2F0ZShjb250ZXh0KSBjaGFuZ2VkIGNvbnRleHQubWV0aG9kIGZyb21cbiAgICAgICAgICAgIC8vIFwicmV0dXJuXCIgdG8gXCJ0aHJvd1wiLCBsZXQgdGhhdCBvdmVycmlkZSB0aGUgVHlwZUVycm9yIGJlbG93LlxuICAgICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICBcIlRoZSBpdGVyYXRvciBkb2VzIG5vdCBwcm92aWRlIGEgJ3Rocm93JyBtZXRob2RcIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChtZXRob2QsIGRlbGVnYXRlLml0ZXJhdG9yLCBjb250ZXh0LmFyZyk7XG5cbiAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciBpbmZvID0gcmVjb3JkLmFyZztcblxuICAgIGlmICghIGluZm8pIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFwiaXRlcmF0b3IgcmVzdWx0IGlzIG5vdCBhbiBvYmplY3RcIik7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIGlmIChpbmZvLmRvbmUpIHtcbiAgICAgIC8vIEFzc2lnbiB0aGUgcmVzdWx0IG9mIHRoZSBmaW5pc2hlZCBkZWxlZ2F0ZSB0byB0aGUgdGVtcG9yYXJ5XG4gICAgICAvLyB2YXJpYWJsZSBzcGVjaWZpZWQgYnkgZGVsZWdhdGUucmVzdWx0TmFtZSAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dFtkZWxlZ2F0ZS5yZXN1bHROYW1lXSA9IGluZm8udmFsdWU7XG5cbiAgICAgIC8vIFJlc3VtZSBleGVjdXRpb24gYXQgdGhlIGRlc2lyZWQgbG9jYXRpb24gKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHQubmV4dCA9IGRlbGVnYXRlLm5leHRMb2M7XG5cbiAgICAgIC8vIElmIGNvbnRleHQubWV0aG9kIHdhcyBcInRocm93XCIgYnV0IHRoZSBkZWxlZ2F0ZSBoYW5kbGVkIHRoZVxuICAgICAgLy8gZXhjZXB0aW9uLCBsZXQgdGhlIG91dGVyIGdlbmVyYXRvciBwcm9jZWVkIG5vcm1hbGx5LiBJZlxuICAgICAgLy8gY29udGV4dC5tZXRob2Qgd2FzIFwibmV4dFwiLCBmb3JnZXQgY29udGV4dC5hcmcgc2luY2UgaXQgaGFzIGJlZW5cbiAgICAgIC8vIFwiY29uc3VtZWRcIiBieSB0aGUgZGVsZWdhdGUgaXRlcmF0b3IuIElmIGNvbnRleHQubWV0aG9kIHdhc1xuICAgICAgLy8gXCJyZXR1cm5cIiwgYWxsb3cgdGhlIG9yaWdpbmFsIC5yZXR1cm4gY2FsbCB0byBjb250aW51ZSBpbiB0aGVcbiAgICAgIC8vIG91dGVyIGdlbmVyYXRvci5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCAhPT0gXCJyZXR1cm5cIikge1xuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBSZS15aWVsZCB0aGUgcmVzdWx0IHJldHVybmVkIGJ5IHRoZSBkZWxlZ2F0ZSBtZXRob2QuXG4gICAgICByZXR1cm4gaW5mbztcbiAgICB9XG5cbiAgICAvLyBUaGUgZGVsZWdhdGUgaXRlcmF0b3IgaXMgZmluaXNoZWQsIHNvIGZvcmdldCBpdCBhbmQgY29udGludWUgd2l0aFxuICAgIC8vIHRoZSBvdXRlciBnZW5lcmF0b3IuXG4gICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gIH1cblxuICAvLyBEZWZpbmUgR2VuZXJhdG9yLnByb3RvdHlwZS57bmV4dCx0aHJvdyxyZXR1cm59IGluIHRlcm1zIG9mIHRoZVxuICAvLyB1bmlmaWVkIC5faW52b2tlIGhlbHBlciBtZXRob2QuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhHcCk7XG5cbiAgR3BbdG9TdHJpbmdUYWdTeW1ib2xdID0gXCJHZW5lcmF0b3JcIjtcblxuICAvLyBBIEdlbmVyYXRvciBzaG91bGQgYWx3YXlzIHJldHVybiBpdHNlbGYgYXMgdGhlIGl0ZXJhdG9yIG9iamVjdCB3aGVuIHRoZVxuICAvLyBAQGl0ZXJhdG9yIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbiBpdC4gU29tZSBicm93c2VycycgaW1wbGVtZW50YXRpb25zIG9mIHRoZVxuICAvLyBpdGVyYXRvciBwcm90b3R5cGUgY2hhaW4gaW5jb3JyZWN0bHkgaW1wbGVtZW50IHRoaXMsIGNhdXNpbmcgdGhlIEdlbmVyYXRvclxuICAvLyBvYmplY3QgdG8gbm90IGJlIHJldHVybmVkIGZyb20gdGhpcyBjYWxsLiBUaGlzIGVuc3VyZXMgdGhhdCBkb2Vzbid0IGhhcHBlbi5cbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9pc3N1ZXMvMjc0IGZvciBtb3JlIGRldGFpbHMuXG4gIEdwW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEdwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwiW29iamVjdCBHZW5lcmF0b3JdXCI7XG4gIH07XG5cbiAgZnVuY3Rpb24gcHVzaFRyeUVudHJ5KGxvY3MpIHtcbiAgICB2YXIgZW50cnkgPSB7IHRyeUxvYzogbG9jc1swXSB9O1xuXG4gICAgaWYgKDEgaW4gbG9jcykge1xuICAgICAgZW50cnkuY2F0Y2hMb2MgPSBsb2NzWzFdO1xuICAgIH1cblxuICAgIGlmICgyIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmZpbmFsbHlMb2MgPSBsb2NzWzJdO1xuICAgICAgZW50cnkuYWZ0ZXJMb2MgPSBsb2NzWzNdO1xuICAgIH1cblxuICAgIHRoaXMudHJ5RW50cmllcy5wdXNoKGVudHJ5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0VHJ5RW50cnkoZW50cnkpIHtcbiAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbiB8fCB7fTtcbiAgICByZWNvcmQudHlwZSA9IFwibm9ybWFsXCI7XG4gICAgZGVsZXRlIHJlY29yZC5hcmc7XG4gICAgZW50cnkuY29tcGxldGlvbiA9IHJlY29yZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIENvbnRleHQodHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBUaGUgcm9vdCBlbnRyeSBvYmplY3QgKGVmZmVjdGl2ZWx5IGEgdHJ5IHN0YXRlbWVudCB3aXRob3V0IGEgY2F0Y2hcbiAgICAvLyBvciBhIGZpbmFsbHkgYmxvY2spIGdpdmVzIHVzIGEgcGxhY2UgdG8gc3RvcmUgdmFsdWVzIHRocm93biBmcm9tXG4gICAgLy8gbG9jYXRpb25zIHdoZXJlIHRoZXJlIGlzIG5vIGVuY2xvc2luZyB0cnkgc3RhdGVtZW50LlxuICAgIHRoaXMudHJ5RW50cmllcyA9IFt7IHRyeUxvYzogXCJyb290XCIgfV07XG4gICAgdHJ5TG9jc0xpc3QuZm9yRWFjaChwdXNoVHJ5RW50cnksIHRoaXMpO1xuICAgIHRoaXMucmVzZXQodHJ1ZSk7XG4gIH1cblxuICBydW50aW1lLmtleXMgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgIH1cbiAgICBrZXlzLnJldmVyc2UoKTtcblxuICAgIC8vIFJhdGhlciB0aGFuIHJldHVybmluZyBhbiBvYmplY3Qgd2l0aCBhIG5leHQgbWV0aG9kLCB3ZSBrZWVwXG4gICAgLy8gdGhpbmdzIHNpbXBsZSBhbmQgcmV0dXJuIHRoZSBuZXh0IGZ1bmN0aW9uIGl0c2VsZi5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIHdoaWxlIChrZXlzLmxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0ga2V5cy5wb3AoKTtcbiAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICBuZXh0LnZhbHVlID0ga2V5O1xuICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRvIGF2b2lkIGNyZWF0aW5nIGFuIGFkZGl0aW9uYWwgb2JqZWN0LCB3ZSBqdXN0IGhhbmcgdGhlIC52YWx1ZVxuICAgICAgLy8gYW5kIC5kb25lIHByb3BlcnRpZXMgb2ZmIHRoZSBuZXh0IGZ1bmN0aW9uIG9iamVjdCBpdHNlbGYuIFRoaXNcbiAgICAgIC8vIGFsc28gZW5zdXJlcyB0aGF0IHRoZSBtaW5pZmllciB3aWxsIG5vdCBhbm9ueW1pemUgdGhlIGZ1bmN0aW9uLlxuICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7XG4gICAgaWYgKGl0ZXJhYmxlKSB7XG4gICAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBpdGVyYWJsZVtpdGVyYXRvclN5bWJvbF07XG4gICAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGl0ZXJhYmxlLm5leHQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gaXRlcmFibGU7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOYU4oaXRlcmFibGUubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLCBuZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgaXRlcmFibGUubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwoaXRlcmFibGUsIGkpKSB7XG4gICAgICAgICAgICAgIG5leHQudmFsdWUgPSBpdGVyYWJsZVtpXTtcbiAgICAgICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG5leHQudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcblxuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXh0Lm5leHQgPSBuZXh0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJldHVybiBhbiBpdGVyYXRvciB3aXRoIG5vIHZhbHVlcy5cbiAgICByZXR1cm4geyBuZXh0OiBkb25lUmVzdWx0IH07XG4gIH1cbiAgcnVudGltZS52YWx1ZXMgPSB2YWx1ZXM7XG5cbiAgZnVuY3Rpb24gZG9uZVJlc3VsdCgpIHtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH1cblxuICBDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogQ29udGV4dCxcblxuICAgIHJlc2V0OiBmdW5jdGlvbihza2lwVGVtcFJlc2V0KSB7XG4gICAgICB0aGlzLnByZXYgPSAwO1xuICAgICAgdGhpcy5uZXh0ID0gMDtcbiAgICAgIC8vIFJlc2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgdGhpcy5zZW50ID0gdGhpcy5fc2VudCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcblxuICAgICAgdGhpcy50cnlFbnRyaWVzLmZvckVhY2gocmVzZXRUcnlFbnRyeSk7XG5cbiAgICAgIGlmICghc2tpcFRlbXBSZXNldCkge1xuICAgICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMpIHtcbiAgICAgICAgICAvLyBOb3Qgc3VyZSBhYm91dCB0aGUgb3B0aW1hbCBvcmRlciBvZiB0aGVzZSBjb25kaXRpb25zOlxuICAgICAgICAgIGlmIChuYW1lLmNoYXJBdCgwKSA9PT0gXCJ0XCIgJiZcbiAgICAgICAgICAgICAgaGFzT3duLmNhbGwodGhpcywgbmFtZSkgJiZcbiAgICAgICAgICAgICAgIWlzTmFOKCtuYW1lLnNsaWNlKDEpKSkge1xuICAgICAgICAgICAgdGhpc1tuYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuXG4gICAgICB2YXIgcm9vdEVudHJ5ID0gdGhpcy50cnlFbnRyaWVzWzBdO1xuICAgICAgdmFyIHJvb3RSZWNvcmQgPSByb290RW50cnkuY29tcGxldGlvbjtcbiAgICAgIGlmIChyb290UmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByb290UmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucnZhbDtcbiAgICB9LFxuXG4gICAgZGlzcGF0Y2hFeGNlcHRpb246IGZ1bmN0aW9uKGV4Y2VwdGlvbikge1xuICAgICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgICB0aHJvdyBleGNlcHRpb247XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcztcbiAgICAgIGZ1bmN0aW9uIGhhbmRsZShsb2MsIGNhdWdodCkge1xuICAgICAgICByZWNvcmQudHlwZSA9IFwidGhyb3dcIjtcbiAgICAgICAgcmVjb3JkLmFyZyA9IGV4Y2VwdGlvbjtcbiAgICAgICAgY29udGV4dC5uZXh0ID0gbG9jO1xuXG4gICAgICAgIGlmIChjYXVnaHQpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGlzcGF0Y2hlZCBleGNlcHRpb24gd2FzIGNhdWdodCBieSBhIGNhdGNoIGJsb2NrLFxuICAgICAgICAgIC8vIHRoZW4gbGV0IHRoYXQgY2F0Y2ggYmxvY2sgaGFuZGxlIHRoZSBleGNlcHRpb24gbm9ybWFsbHkuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAhISBjYXVnaHQ7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSBcInJvb3RcIikge1xuICAgICAgICAgIC8vIEV4Y2VwdGlvbiB0aHJvd24gb3V0c2lkZSBvZiBhbnkgdHJ5IGJsb2NrIHRoYXQgY291bGQgaGFuZGxlXG4gICAgICAgICAgLy8gaXQsIHNvIHNldCB0aGUgY29tcGxldGlvbiB2YWx1ZSBvZiB0aGUgZW50aXJlIGZ1bmN0aW9uIHRvXG4gICAgICAgICAgLy8gdGhyb3cgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXR1cm4gaGFuZGxlKFwiZW5kXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYpIHtcbiAgICAgICAgICB2YXIgaGFzQ2F0Y2ggPSBoYXNPd24uY2FsbChlbnRyeSwgXCJjYXRjaExvY1wiKTtcbiAgICAgICAgICB2YXIgaGFzRmluYWxseSA9IGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIik7XG5cbiAgICAgICAgICBpZiAoaGFzQ2F0Y2ggJiYgaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0NhdGNoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHlcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIGFicnVwdDogZnVuY3Rpb24odHlwZSwgYXJnKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIikgJiZcbiAgICAgICAgICAgIHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB2YXIgZmluYWxseUVudHJ5ID0gZW50cnk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSAmJlxuICAgICAgICAgICh0eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICAgdHlwZSA9PT0gXCJjb250aW51ZVwiKSAmJlxuICAgICAgICAgIGZpbmFsbHlFbnRyeS50cnlMb2MgPD0gYXJnICYmXG4gICAgICAgICAgYXJnIDw9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgIC8vIElnbm9yZSB0aGUgZmluYWxseSBlbnRyeSBpZiBjb250cm9sIGlzIG5vdCBqdW1waW5nIHRvIGFcbiAgICAgICAgLy8gbG9jYXRpb24gb3V0c2lkZSB0aGUgdHJ5L2NhdGNoIGJsb2NrLlxuICAgICAgICBmaW5hbGx5RW50cnkgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVjb3JkID0gZmluYWxseUVudHJ5ID8gZmluYWxseUVudHJ5LmNvbXBsZXRpb24gOiB7fTtcbiAgICAgIHJlY29yZC50eXBlID0gdHlwZTtcbiAgICAgIHJlY29yZC5hcmcgPSBhcmc7XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkpIHtcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2M7XG4gICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5jb21wbGV0ZShyZWNvcmQpO1xuICAgIH0sXG5cbiAgICBjb21wbGV0ZTogZnVuY3Rpb24ocmVjb3JkLCBhZnRlckxvYykge1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICByZWNvcmQudHlwZSA9PT0gXCJjb250aW51ZVwiKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IHJlY29yZC5hcmc7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInJldHVyblwiKSB7XG4gICAgICAgIHRoaXMucnZhbCA9IHRoaXMuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICB0aGlzLm5leHQgPSBcImVuZFwiO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIiAmJiBhZnRlckxvYykge1xuICAgICAgICB0aGlzLm5leHQgPSBhZnRlckxvYztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfSxcblxuICAgIGZpbmlzaDogZnVuY3Rpb24oZmluYWxseUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS5maW5hbGx5TG9jID09PSBmaW5hbGx5TG9jKSB7XG4gICAgICAgICAgdGhpcy5jb21wbGV0ZShlbnRyeS5jb21wbGV0aW9uLCBlbnRyeS5hZnRlckxvYyk7XG4gICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgXCJjYXRjaFwiOiBmdW5jdGlvbih0cnlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSB0cnlMb2MpIHtcbiAgICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcbiAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgdmFyIHRocm93biA9IHJlY29yZC5hcmc7XG4gICAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRocm93bjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGUgY29udGV4dC5jYXRjaCBtZXRob2QgbXVzdCBvbmx5IGJlIGNhbGxlZCB3aXRoIGEgbG9jYXRpb25cbiAgICAgIC8vIGFyZ3VtZW50IHRoYXQgY29ycmVzcG9uZHMgdG8gYSBrbm93biBjYXRjaCBibG9jay5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdFwiKTtcbiAgICB9LFxuXG4gICAgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24oaXRlcmFibGUsIHJlc3VsdE5hbWUsIG5leHRMb2MpIHtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSB7XG4gICAgICAgIGl0ZXJhdG9yOiB2YWx1ZXMoaXRlcmFibGUpLFxuICAgICAgICByZXN1bHROYW1lOiByZXN1bHROYW1lLFxuICAgICAgICBuZXh0TG9jOiBuZXh0TG9jXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgIC8vIERlbGliZXJhdGVseSBmb3JnZXQgdGhlIGxhc3Qgc2VudCB2YWx1ZSBzbyB0aGF0IHdlIGRvbid0XG4gICAgICAgIC8vIGFjY2lkZW50YWxseSBwYXNzIGl0IG9uIHRvIHRoZSBkZWxlZ2F0ZS5cbiAgICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cbiAgfTtcbn0pKFxuICAvLyBBbW9uZyB0aGUgdmFyaW91cyB0cmlja3MgZm9yIG9idGFpbmluZyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsXG4gIC8vIG9iamVjdCwgdGhpcyBzZWVtcyB0byBiZSB0aGUgbW9zdCByZWxpYWJsZSB0ZWNobmlxdWUgdGhhdCBkb2VzIG5vdFxuICAvLyB1c2UgaW5kaXJlY3QgZXZhbCAod2hpY2ggdmlvbGF0ZXMgQ29udGVudCBTZWN1cml0eSBQb2xpY3kpLlxuICB0eXBlb2YgZ2xvYmFsID09PSBcIm9iamVjdFwiID8gZ2xvYmFsIDpcbiAgdHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIiA/IHdpbmRvdyA6XG4gIHR5cGVvZiBzZWxmID09PSBcIm9iamVjdFwiID8gc2VsZiA6IHRoaXNcbik7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2NvcmUucmVnZXhwLmVzY2FwZScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuUmVnRXhwLmVzY2FwZTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9iZW5qYW1pbmdyL1JleEV4cC5lc2NhcGVcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHJlID0gcmVxdWlyZSgnLi9fcmVwbGFjZXInKSgvW1xcXFxeJCorPy4oKXxbXFxde31dL2csICdcXFxcJCYnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWdFeHAnLCB7IGVzY2FwZTogZnVuY3Rpb24gZXNjYXBlKGl0KSB7IHJldHVybiAkcmUoaXQpOyB9IH0pO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAocmVnRXhwLCByZXBsYWNlKSB7XG4gIHZhciByZXBsYWNlciA9IHJlcGxhY2UgPT09IE9iamVjdChyZXBsYWNlKSA/IGZ1bmN0aW9uIChwYXJ0KSB7XG4gICAgcmV0dXJuIHJlcGxhY2VbcGFydF07XG4gIH0gOiByZXBsYWNlO1xuICByZXR1cm4gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIFN0cmluZyhpdCkucmVwbGFjZShyZWdFeHAsIHJlcGxhY2VyKTtcbiAgfTtcbn07XG4iLCIvLyBHbG9iYWwgYXBwIGNvbnRyb2xsZXJcclxuaW1wb3J0IFNlYXJjaCBmcm9tICcuL21vZGVscy9TZWFyY2gnO1xyXG5pbXBvcnQgTGlzdCBmcm9tICcuL21vZGVscy9MaXN0JztcclxuaW1wb3J0IExpa2VzIGZyb20gJy4vbW9kZWxzL0xpa2VzJztcclxuaW1wb3J0ICogYXMgc2VhcmNoVmlldyBmcm9tICcuL3ZpZXdzL3NlYXJjaFZpZXcnO1xyXG5pbXBvcnQgKiBhcyByZWNpcGVWaWV3IGZyb20gJy4vdmlld3MvcmVjaXBlVmlldyc7XHJcbmltcG9ydCAqIGFzIGxpc3RWaWV3IGZyb20gJy4vdmlld3MvbGlzdFZpZXcnO1xyXG5pbXBvcnQgKiBhcyBsaWtlc1ZpZXcgZnJvbSAnLi92aWV3cy9saWtlc1ZpZXcnO1xyXG5pbXBvcnQge2VsZW1lbnRzLCByZW5kZXJTcGlubmVyLCBkZWxTcGlubmVyfSBmcm9tICcuL3ZpZXdzL2Jhc2UnO1xyXG5pbXBvcnQgUmVjaXBlIGZyb20gJy4vbW9kZWxzL1JlY2lwZSc7XHJcbi8vIGFkZCBldmVudCBsaXN0ZW5lclxyXG5sZXQgc3RhdGUgPSB7fTtcclxuXHJcbmVsZW1lbnRzLnNlYXJjaEZvcm0uYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgZSA9PiB7XHJcbiAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gIHNlYXJjaEN0cmwoKTtcclxufSlcclxuXHJcbi8vIHNlYXJjaCBjb250cm9sbGVyXHJcbmNvbnN0IHNlYXJjaEN0cmwgPSBhc3luYyAoKSA9PiB7XHJcbiAgLy8gZ2V0IHF1ZXJ5IGZyb20gdmlld1xyXG4gIGxldCBxdWVyeSA9IHNlYXJjaFZpZXcuZ2V0SW5wdXQoKTtcclxuXHJcbiAgaWYocXVlcnkpIHtcclxuXHJcbiAgICAvLyBuZXcgc2VhcmNoIG9ialxyXG4gICAgc3RhdGUuc2VhcmNoID0gbmV3IFNlYXJjaChxdWVyeSk7XHJcbiAgICAvLyBwcmVwYXJlIFVJIHRvIHNob3cgcmVzdWx0c1xyXG4gICAgc2VhcmNoVmlldy5jbGVhcklucHV0KCk7XHJcbiAgICBzZWFyY2hWaWV3LmNsZWFyUmVzdWx0cygpO1xyXG4gICAgcmVuZGVyU3Bpbm5lcihlbGVtZW50cy5yZXN1bHRzQmxvY2spO1xyXG4gICAgLy8gc2VhcmNoIHJlY2lwZXNcclxuICAgIHRyeSB7XHJcbiAgICAgIGF3YWl0IHN0YXRlLnNlYXJjaC5odHRwUmVxdWVzdCgpO1xyXG4gICAgICAvLyByZW5kZXIgcGVzdWx0cyBvbiBVSVxyXG4gICAgICBkZWxTcGlubmVyKCk7XHJcbiAgICAgIHNlYXJjaFZpZXcucmVuZGVyUmVzdWx0cyhzdGF0ZS5zZWFyY2gucmVzdWx0KTtcclxuXHJcbiAgICB9IGNhdGNoKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcclxuICAgICAgYWxlcnQoJ1NvbWV0aGluZyB3cm9uZyB3aXRoIHNlYXJjaCcpO1xyXG4gICAgfSBcclxuICB9XHJcbn1cclxuZWxlbWVudHMucGFnaW5QYWdlcy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGUgPT4ge1xyXG5cclxuICBsZXQgdGFyZ2V0ID0gZS50YXJnZXQ7XHJcbiAgbGV0IGJ1dHRvbiA9IHRhcmdldC5jbG9zZXN0KCcuYnRuLWlubGluZScpO1xyXG5cclxuICBpZihidXR0b24pIHtcclxuXHJcbiAgICBsZXQgcGFnZSA9IHBhcnNlSW50KGJ1dHRvbi5kYXRhc2V0LmdvdG8sIDEwKTtcclxuICAgIHNlYXJjaFZpZXcuY2xlYXJSZXN1bHRzKCk7XHJcbiAgICBzZWFyY2hWaWV3LnJlbmRlclJlc3VsdHMoc3RhdGUuc2VhcmNoLnJlc3VsdCwgcGFnZSk7XHJcbiAgfVxyXG59KVxyXG5cclxuLy8gcmVjaXBlIGNvbnRyb2xsZXJcclxuY29uc3QgcmVjaXBlQ3RybCA9IGFzeW5jICgpID0+IHtcclxuXHJcbiAgbGV0IGlkID0gd2luZG93LmxvY2F0aW9uLmhhc2guc2xpY2UoMSk7XHJcblxyXG4gIGlmKGlkKSB7XHJcblxyXG4gICAgLy8gcHJlcGFyZSBVSSBmb3IgY2hhbmdlc1xyXG4gICAgcmVjaXBlVmlldy5oaWdoTGlnaHRBY3RpdmUoaWQpO1xyXG4gICAgcmVjaXBlVmlldy5jbGVhclJlY2lwZSgpO1xyXG4gICAgcmVuZGVyU3Bpbm5lcihlbGVtZW50cy5yZWNpcGUpO1xyXG4gICAgLy8gY3JlYXRlIHJlY2lwZSBvYmpcclxuICAgIHN0YXRlLnJlY2lwZSAgPSBuZXcgUmVjaXBlKGlkKTtcclxuICAgIHRyeSB7XHJcbiAgICAgIC8vIHdhaXQgZm9yIHJlc3BvbmNlXHJcbiAgICAgIGF3YWl0IHN0YXRlLnJlY2lwZS5odHRwUmVxdWVzdCgpO1xyXG4gICAgICAvLyBjb250YWluIGRhdGEgdG8gaHRtbCBzdHJpbmdcclxuXHJcbiAgICAgIHN0YXRlLnJlY2lwZS5jYWxjVGltZSgpO1xyXG4gICAgICBzdGF0ZS5yZWNpcGUuY2FsY1NlcnZpbmcoKTtcclxuICAgICAgc3RhdGUucmVjaXBlLnJld3JpdGVJbmdyZWRpZW50cygpO1xyXG5cclxuICAgICAgLy8gdXBkYXRlIFVJIHdpdGggZGF0YVxyXG4gICAgICBkZWxTcGlubmVyKCk7XHJcbiAgICAgIHJlY2lwZVZpZXcucmVjaXBlUmVuZGVyKFxyXG4gICAgICAgIHN0YXRlLnJlY2lwZSxcclxuICAgICAgICBzdGF0ZS5saWtlcy5pc0xpa2VkKGlkKSk7XHJcbiAgICB9IGNhdGNoKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcclxuICAgICAgYWxlcnQoJ1NvbWV0aGluZyB3cm9uZyB3aXRoIHNlYXJjaCcpO1xyXG4gICAgfVxyXG5cclxuICB9IFxyXG59XHJcbmNvbnN0IGxpc3RDdHJsID0gKCkgPT4ge1xyXG4gIC8vIGNyZWF0ZSBuZXcgbGlzdCBpZiBpdCBkb2Vzbid0IGV4aXN0XHJcbiAgaWYoIXN0YXRlLmxpc3QpIHtcclxuICAgIHN0YXRlLmxpc3QgPSBuZXcgTGlzdCgpO1xyXG4gIH1cclxuICAvLyBhZGQgaXRlbXMgdG8gbGlzdFxyXG4gIHN0YXRlLnJlY2lwZS5pbmdyZWRpZW50cy5mb3JFYWNoKGVsZW0gPT4ge1xyXG4gICAgbGV0IGl0ZW0gPSBzdGF0ZS5saXN0LmNyZWF0ZShlbGVtLmNvdW50LCBlbGVtLnVuaXQsIGVsZW0uZGVzY3JpcHRpb24pO1xyXG4gICAgbGlzdFZpZXcucmVuZGVySXRlbShpdGVtKTtcclxuICB9KVxyXG59XHJcblxyXG5jb25zdCBsaWtlc0N0cmwgPSAoKSA9PiB7XHJcbiAgLy8gY3JlYXRlIG5ldyBsaWtlIGlmIGl0IGRvZXNuJ3QgZXhpc3RcclxuICBjb25zdCBpZCA9IHN0YXRlLnJlY2lwZS5pZDtcclxuICBpZighc3RhdGUubGlrZXMpIHtcclxuICAgIHN0YXRlLmxpa2VzID0gbmV3IExpa2VzKCk7XHJcbiAgfVxyXG4gIFxyXG4gIFxyXG4gIC8vIGlmIGl0IG5vdCBsaWtlZCBcclxuICBpZighc3RhdGUubGlrZXMuaXNMaWtlZChpZCkpIHtcclxuXHJcbiAgICAvLyB1cGRhdGUgbGlrZXNcclxuXHJcbiAgICBjb25zdCB0aXRsZSA9IHN0YXRlLnJlY2lwZS50aXRsZTtcclxuICAgIGNvbnN0IGF1dGhvciA9IHN0YXRlLnJlY2lwZS5wdWJsaXNoZXI7XHJcbiAgICBjb25zdCBpbWFnZSA9IHN0YXRlLnJlY2lwZS5pbWFnZTtcclxuICAgIFxyXG4gICAgc3RhdGUubGlrZXMuY3JlYXRlKGlkLCB0aXRsZSwgYXV0aG9yLCBpbWFnZSk7XHJcblxyXG4gICAgLy8gYnV0dG9uIHRvb2dsZVxyXG4gICAgbGlrZXNWaWV3LnRvb2dsZUxpa2VCdXR0b24odHJ1ZSk7XHJcblxyXG4gICAgbGlrZXNWaWV3LnRvb2dsZUxpa2VzTGlzdEJ1dHRvbihzdGF0ZS5saWtlcy5hcnIubGVuZ3RoKTtcclxuXHJcbiAgICAvLyByZW5kZXIgbmV3IGxpa2VzIGxpc3RcclxuICAgIGxpa2VzVmlldy5yZW5kZXJMaWtlKGlkLCB0aXRsZSwgYXV0aG9yLCBpbWFnZSk7XHJcblxyXG4gIC8vIGlmIGl0IGxpa2VkIGFscmVhZHlcclxuICB9IGVsc2UgeyAgIFxyXG4gICAgLy8gZGVsZXRlIGxpa2UgaXRlbVxyXG4gICAgc3RhdGUubGlrZXMuZGVsZXRlKGlkKVxyXG4gICAgLy8gYnV0dG9uIHRvb2dsZVxyXG4gICAgbGlrZXNWaWV3LnRvb2dsZUxpa2VCdXR0b24oZmFsc2UpO1xyXG4gICAgbGlrZXNWaWV3LnRvb2dsZUxpa2VzTGlzdEJ1dHRvbihzdGF0ZS5saWtlcy5hcnIubGVuZ3RoKTtcclxuICAgIC8vIHJlbmRlciBuZXcgbGlrZXMgbGlzdFxyXG4gICAgbGlrZXNWaWV3LmRlbGV0ZUxpa2UoaWQpO1xyXG4gIH1cclxufVxyXG5cclxuXHJcbltcImhhc2hjaGFuZ2VcIiwgXCJsb2FkXCJdLmZvckVhY2goZXZlbnQgPT4gd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQgLCByZWNpcGVDdHJsKSk7XHJcblxyXG4vKmZ1bmN0aW9uIGFkZExpc3RlbmVycygpIHtcclxuLy8gYWRkIGV2ZW50IGxpc3RlbmVyIGZvciBidXR0b24gY2xpY2s7XHJcbiAgY29uc29sZS5sb2coZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnJlY2lwZScpKTtcclxuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucmVjaXBlJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZlbnQpID0+IHtcclxuICAgIGlmKGV2ZW50LnRhcmdldC5tYXRjaGVzKFwiLmJ0bi1kZWNyZWFzZSwgLmJ0bi1kZWNyZWFzZSAqIFwiKSkge1xyXG4gICAgICBpZihzdGF0ZS5yZWNpcGUuc2VydmluZyA+IDEpIHtcclxuICAgICAgICBzdGF0ZS5yZWNpcGUucmVjb3VudEluZ3JlZGllbnRzKCdkZWMnKTtcclxuICAgICAgICByZWNpcGVWaWV3LnJld3JpdGVRdWFudGl0eShzdGF0ZS5yZWNpcGUuc2VydmluZywgc3RhdGUucmVjaXBlLmluZ3JlZGllbnRzKTtcclxuICAgICAgfVxyXG4gICAgfWVsc2UgaWYoZXZlbnQudGFyZ2V0Lm1hdGNoZXMoXCIuYnRuLWluY3JlYXNlLCAuYnRuLWluY3JlYXNlICogXCIpKSB7XHJcbiAgICAgIHN0YXRlLnJlY2lwZS5yZWNvdW50SW5ncmVkaWVudHMoJ2luYycpO1xyXG4gICAgICByZWNpcGVWaWV3LnJld3JpdGVRdWFudGl0eShzdGF0ZS5yZWNpcGUuc2VydmluZywgc3RhdGUucmVjaXBlLmluZ3JlZGllbnRzKTtcclxuICAgIH0gZWxzZSBpZihldmVudC50YXJnZXQubWF0Y2hlcyhcIi5yZWNpcGVfX2J0bi0tYWRkLCAucmVjaXBlX19idG4tLWFkZCAqIFwiKSkge1xyXG4gICAgICBsaXN0Q3RybCgpO1xyXG4gICAgfSBlbHNlIGlmKGV2ZW50LnRhcmdldC5tYXRjaGVzKFwiLnJlY2lwZV9fbG92ZSwgLnJlY2lwZV9fbG92ZSAqIFwiKSkge1xyXG4gICAgICBsaWtlc0N0cmwoKTtcclxuICAgIH1cclxuICB9KVxyXG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zaG9wcGluZ19fbGlzdCcpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2ZW50KSA9PiB7XHJcblxyXG4gICAgaWYoZXZlbnQudGFyZ2V0Lm1hdGNoZXMoXCIuc2hvcHBpbmdfX2RlbGV0ZSwgLnNob3BwaW5nX19kZWxldGUgKiBcIikpIHtcclxuXHJcbiAgICAgIGxldCBsaSA9IGV2ZW50LnRhcmdldC5jbG9zZXN0KFwiLnNob3BwaW5nX19pdGVtXCIpO1xyXG4gICAgICBsZXQgaWQgPSBsaS5kYXRhc2V0Lml0ZW1pZDtcclxuICAgICAgbGlzdFZpZXcuZGVsZXRlSXRlbShsaSk7XHJcbiAgICAgIHN0YXRlLmxpc3QuZGVsZXRlKGlkKTtcclxuICAgIH0gZWxzZSBpZihldmVudC50YXJnZXQubWF0Y2hlcyhcIi5jaGFuZ2Utc2hvcHBpbmctY291bnRcIikpIHtcclxuXHJcbiAgICAgIC8vIGFkZCBldmVudCB1cGRhdGUgb24gYnV0dG9uXHJcbiAgICAgIFxyXG4gICAgICBsZXQgdmFsdWUgPSBwYXJzZUZsb2F0KGV2ZW50LnRhcmdldC52YWx1ZSk7XHJcbiAgICAgIGxldCBpZCA9IGV2ZW50LnRhcmdldC5jbG9zZXN0KFwiLnNob3BwaW5nX19pdGVtXCIpLmRhdGFzZXQuaXRlbWlkO1xyXG4gICAgICBzdGF0ZS5saXN0LnVwZGF0ZUNvdW50KGlkLCB2YWx1ZSk7XHJcbiAgICB9XHJcbiAgfSlcclxufSovXHJcblxyXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIChldmVudCkgPT4ge1xyXG5cclxuICBzdGF0ZS5saWtlcyA9IG5ldyBMaWtlcygpO1xyXG4gIHN0YXRlLmxpa2VzLmFyciA9IHN0YXRlLmxpa2VzLmdldEZyb21Mb2NhbFN0b3JhZ2UoKSB8fCBbXTtcclxuXHJcbiAgbGlrZXNWaWV3LnRvb2dsZUxpa2VzTGlzdEJ1dHRvbihzdGF0ZS5saWtlcy5hcnIubGVuZ3RoKTtcclxuXHJcbiAgc3RhdGUubGlrZXMuYXJyLmZvckVhY2goZWxlbSA9PiB7XHJcbiAgICBsaWtlc1ZpZXcucmVuZGVyTGlrZShlbGVtLmlkLGVsZW0udGl0bGUsZWxlbS5hdXRob3IsZWxlbS5pbWcpO1xyXG4gIH0pIFxyXG59KTtcclxuXHJcblxyXG4vLyBjb25zb2xlLmxvZyhzdGF0ZS5yZWNpcGUpXHJcblxyXG5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucmVjaXBlJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZlbnQpID0+IHtcclxuICBpZihldmVudC50YXJnZXQubWF0Y2hlcyhcIi5idG4tZGVjcmVhc2UsIC5idG4tZGVjcmVhc2UgKiBcIikpIHtcclxuICAgIGlmKHN0YXRlLnJlY2lwZS5zZXJ2aW5nID4gMSkge1xyXG4gICAgICBzdGF0ZS5yZWNpcGUucmVjb3VudEluZ3JlZGllbnRzKCdkZWMnKTtcclxuICAgICAgcmVjaXBlVmlldy5yZXdyaXRlUXVhbnRpdHkoc3RhdGUucmVjaXBlLnNlcnZpbmcsIHN0YXRlLnJlY2lwZS5pbmdyZWRpZW50cyk7XHJcbiAgICB9XHJcbiAgfWVsc2UgaWYoZXZlbnQudGFyZ2V0Lm1hdGNoZXMoXCIuYnRuLWluY3JlYXNlLCAuYnRuLWluY3JlYXNlICogXCIpKSB7XHJcbiAgICBzdGF0ZS5yZWNpcGUucmVjb3VudEluZ3JlZGllbnRzKCdpbmMnKTtcclxuICAgIHJlY2lwZVZpZXcucmV3cml0ZVF1YW50aXR5KHN0YXRlLnJlY2lwZS5zZXJ2aW5nLCBzdGF0ZS5yZWNpcGUuaW5ncmVkaWVudHMpO1xyXG4gIH0gZWxzZSBpZihldmVudC50YXJnZXQubWF0Y2hlcyhcIi5yZWNpcGVfX2J0bi0tYWRkLCAucmVjaXBlX19idG4tLWFkZCAqIFwiKSkge1xyXG4gICAgbGlzdEN0cmwoKTtcclxuICB9IGVsc2UgaWYoZXZlbnQudGFyZ2V0Lm1hdGNoZXMoXCIucmVjaXBlX19sb3ZlLCAucmVjaXBlX19sb3ZlICogXCIpKSB7XHJcbiAgICBsaWtlc0N0cmwoKTtcclxuICB9XHJcbn0pXHJcbmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zaG9wcGluZ19fbGlzdCcpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2ZW50KSA9PiB7XHJcblxyXG4gIGlmKGV2ZW50LnRhcmdldC5tYXRjaGVzKFwiLnNob3BwaW5nX19kZWxldGUsIC5zaG9wcGluZ19fZGVsZXRlICogXCIpKSB7XHJcblxyXG4gICAgbGV0IGxpID0gZXZlbnQudGFyZ2V0LmNsb3Nlc3QoXCIuc2hvcHBpbmdfX2l0ZW1cIik7XHJcbiAgICBsZXQgaWQgPSBsaS5kYXRhc2V0Lml0ZW1pZDtcclxuICAgIGxpc3RWaWV3LmRlbGV0ZUl0ZW0obGkpO1xyXG4gICAgc3RhdGUubGlzdC5kZWxldGUoaWQpO1xyXG4gIH0gZWxzZSBpZihldmVudC50YXJnZXQubWF0Y2hlcyhcIi5jaGFuZ2Utc2hvcHBpbmctY291bnRcIikpIHtcclxuXHJcbiAgICAvLyBhZGQgZXZlbnQgdXBkYXRlIG9uIGJ1dHRvblxyXG4gICAgXHJcbiAgICBsZXQgdmFsdWUgPSBwYXJzZUZsb2F0KGV2ZW50LnRhcmdldC52YWx1ZSk7XHJcbiAgICBsZXQgaWQgPSBldmVudC50YXJnZXQuY2xvc2VzdChcIi5zaG9wcGluZ19faXRlbVwiKS5kYXRhc2V0Lml0ZW1pZDtcclxuICAgIHN0YXRlLmxpc3QudXBkYXRlQ291bnQoaWQsIHZhbHVlKTtcclxuICB9XHJcbn0pXHJcblxyXG5cclxuXHJcbmFsZXJ0KCdIZWxsbyEnKSIsImltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZWFyY2gge1xyXG4gIGNvbnN0cnVjdG9yKHF1ZXJ5KSB7XHJcbiAgICB0aGlzLnF1ZXJ5ID0gcXVlcnlcclxuICB9XHJcbiAgYXN5bmMgaHR0cFJlcXVlc3QoKSB7XHJcbiAgICBjb25zdCBrZXkgPSAnZTI3YmRlZmU1ZjAxMTRmZDI1N2M1NmRlZGEyOTJjNjMnOyBcclxuICAgIC8vY29uc3QgcHJveHkgPSAnaHR0cHM6Ly9jb3JzLWFueXdoZXJlLmhlcm9rdWFwcC5jb20vJztcclxuICAgIGNvbnN0IHByb3h5ID0gJyc7XHJcbiAgICBjb25zdCB1cmwgPSAnaHR0cHM6Ly93d3cuZm9vZDJmb3JrLmNvbS9hcGkvc2VhcmNoJztcclxuICAgIFxyXG4gICAgbGV0IHJlcyA9IGF3YWl0IGF4aW9zKGAke3Byb3h5fSR7dXJsfT9rZXk9JHtrZXl9JnE9JHt0aGlzLnF1ZXJ5fWApO1xyXG4gICAgdGhpcy5yZXN1bHQgPSByZXMuZGF0YS5yZWNpcGVzO1xyXG4gIH1cclxufVxyXG5cclxuXHJcblxyXG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi9oZWxwZXJzL2JpbmQnKTtcbnZhciBBeGlvcyA9IHJlcXVpcmUoJy4vY29yZS9BeGlvcycpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi9kZWZhdWx0cycpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBkZWZhdWx0Q29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKiBAcmV0dXJuIHtBeGlvc30gQSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdENvbmZpZykge1xuICB2YXIgY29udGV4dCA9IG5ldyBBeGlvcyhkZWZhdWx0Q29uZmlnKTtcbiAgdmFyIGluc3RhbmNlID0gYmluZChBeGlvcy5wcm90b3R5cGUucmVxdWVzdCwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBheGlvcy5wcm90b3R5cGUgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBBeGlvcy5wcm90b3R5cGUsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgY29udGV4dCB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIGNvbnRleHQpO1xuXG4gIHJldHVybiBpbnN0YW5jZTtcbn1cblxuLy8gQ3JlYXRlIHRoZSBkZWZhdWx0IGluc3RhbmNlIHRvIGJlIGV4cG9ydGVkXG52YXIgYXhpb3MgPSBjcmVhdGVJbnN0YW5jZShkZWZhdWx0cyk7XG5cbi8vIEV4cG9zZSBBeGlvcyBjbGFzcyB0byBhbGxvdyBjbGFzcyBpbmhlcml0YW5jZVxuYXhpb3MuQXhpb3MgPSBBeGlvcztcblxuLy8gRmFjdG9yeSBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlc1xuYXhpb3MuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGluc3RhbmNlQ29uZmlnKSB7XG4gIHJldHVybiBjcmVhdGVJbnN0YW5jZSh1dGlscy5tZXJnZShkZWZhdWx0cywgaW5zdGFuY2VDb25maWcpKTtcbn07XG5cbi8vIEV4cG9zZSBDYW5jZWwgJiBDYW5jZWxUb2tlblxuYXhpb3MuQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsJyk7XG5heGlvcy5DYW5jZWxUb2tlbiA9IHJlcXVpcmUoJy4vY2FuY2VsL0NhbmNlbFRva2VuJyk7XG5heGlvcy5pc0NhbmNlbCA9IHJlcXVpcmUoJy4vY2FuY2VsL2lzQ2FuY2VsJyk7XG5cbi8vIEV4cG9zZSBhbGwvc3ByZWFkXG5heGlvcy5hbGwgPSBmdW5jdGlvbiBhbGwocHJvbWlzZXMpIHtcbiAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcbn07XG5heGlvcy5zcHJlYWQgPSByZXF1aXJlKCcuL2hlbHBlcnMvc3ByZWFkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gYXhpb3M7XG5cbi8vIEFsbG93IHVzZSBvZiBkZWZhdWx0IGltcG9ydCBzeW50YXggaW4gVHlwZVNjcmlwdFxubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGF4aW9zO1xuIiwiLyohXG4gKiBEZXRlcm1pbmUgaWYgYW4gb2JqZWN0IGlzIGEgQnVmZmVyXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHBzOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuXG4vLyBUaGUgX2lzQnVmZmVyIGNoZWNrIGlzIGZvciBTYWZhcmkgNS03IHN1cHBvcnQsIGJlY2F1c2UgaXQncyBtaXNzaW5nXG4vLyBPYmplY3QucHJvdG90eXBlLmNvbnN0cnVjdG9yLiBSZW1vdmUgdGhpcyBldmVudHVhbGx5XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIG9iaiAhPSBudWxsICYmIChpc0J1ZmZlcihvYmopIHx8IGlzU2xvd0J1ZmZlcihvYmopIHx8ICEhb2JqLl9pc0J1ZmZlcilcbn1cblxuZnVuY3Rpb24gaXNCdWZmZXIgKG9iaikge1xuICByZXR1cm4gISFvYmouY29uc3RydWN0b3IgJiYgdHlwZW9mIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIob2JqKVxufVxuXG4vLyBGb3IgTm9kZSB2MC4xMCBzdXBwb3J0LiBSZW1vdmUgdGhpcyBldmVudHVhbGx5LlxuZnVuY3Rpb24gaXNTbG93QnVmZmVyIChvYmopIHtcbiAgcmV0dXJuIHR5cGVvZiBvYmoucmVhZEZsb2F0TEUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIG9iai5zbGljZSA9PT0gJ2Z1bmN0aW9uJyAmJiBpc0J1ZmZlcihvYmouc2xpY2UoMCwgMCkpXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4vLi4vZGVmYXVsdHMnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBJbnRlcmNlcHRvck1hbmFnZXIgPSByZXF1aXJlKCcuL0ludGVyY2VwdG9yTWFuYWdlcicpO1xudmFyIGRpc3BhdGNoUmVxdWVzdCA9IHJlcXVpcmUoJy4vZGlzcGF0Y2hSZXF1ZXN0Jyk7XG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGluc3RhbmNlQ29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIEF4aW9zKGluc3RhbmNlQ29uZmlnKSB7XG4gIHRoaXMuZGVmYXVsdHMgPSBpbnN0YW5jZUNvbmZpZztcbiAgdGhpcy5pbnRlcmNlcHRvcnMgPSB7XG4gICAgcmVxdWVzdDogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpLFxuICAgIHJlc3BvbnNlOiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKClcbiAgfTtcbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcgc3BlY2lmaWMgZm9yIHRoaXMgcmVxdWVzdCAobWVyZ2VkIHdpdGggdGhpcy5kZWZhdWx0cylcbiAqL1xuQXhpb3MucHJvdG90eXBlLnJlcXVlc3QgPSBmdW5jdGlvbiByZXF1ZXN0KGNvbmZpZykge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgLy8gQWxsb3cgZm9yIGF4aW9zKCdleGFtcGxlL3VybCdbLCBjb25maWddKSBhIGxhIGZldGNoIEFQSVxuICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICBjb25maWcgPSB1dGlscy5tZXJnZSh7XG4gICAgICB1cmw6IGFyZ3VtZW50c1swXVxuICAgIH0sIGFyZ3VtZW50c1sxXSk7XG4gIH1cblxuICBjb25maWcgPSB1dGlscy5tZXJnZShkZWZhdWx0cywge21ldGhvZDogJ2dldCd9LCB0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuICBjb25maWcubWV0aG9kID0gY29uZmlnLm1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuXG4gIC8vIEhvb2sgdXAgaW50ZXJjZXB0b3JzIG1pZGRsZXdhcmVcbiAgdmFyIGNoYWluID0gW2Rpc3BhdGNoUmVxdWVzdCwgdW5kZWZpbmVkXTtcbiAgdmFyIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoY29uZmlnKTtcblxuICB0aGlzLmludGVyY2VwdG9ycy5yZXF1ZXN0LmZvckVhY2goZnVuY3Rpb24gdW5zaGlmdFJlcXVlc3RJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICBjaGFpbi51bnNoaWZ0KGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICB9KTtcblxuICB0aGlzLmludGVyY2VwdG9ycy5yZXNwb25zZS5mb3JFYWNoKGZ1bmN0aW9uIHB1c2hSZXNwb25zZUludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIGNoYWluLnB1c2goaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHdoaWxlIChjaGFpbi5sZW5ndGgpIHtcbiAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKGNoYWluLnNoaWZ0KCksIGNoYWluLnNoaWZ0KCkpO1xuICB9XG5cbiAgcmV0dXJuIHByb21pc2U7XG59O1xuXG4vLyBQcm92aWRlIGFsaWFzZXMgZm9yIHN1cHBvcnRlZCByZXF1ZXN0IG1ldGhvZHNcbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAnb3B0aW9ucyddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdCh1dGlscy5tZXJnZShjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmxcbiAgICB9KSk7XG4gIH07XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGRhdGEsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QodXRpbHMubWVyZ2UoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHVybDogdXJsLFxuICAgICAgZGF0YTogZGF0YVxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEF4aW9zO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgbm9ybWFsaXplZE5hbWUpIHtcbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLCBmdW5jdGlvbiBwcm9jZXNzSGVhZGVyKHZhbHVlLCBuYW1lKSB7XG4gICAgaWYgKG5hbWUgIT09IG5vcm1hbGl6ZWROYW1lICYmIG5hbWUudG9VcHBlckNhc2UoKSA9PT0gbm9ybWFsaXplZE5hbWUudG9VcHBlckNhc2UoKSkge1xuICAgICAgaGVhZGVyc1tub3JtYWxpemVkTmFtZV0gPSB2YWx1ZTtcbiAgICAgIGRlbGV0ZSBoZWFkZXJzW25hbWVdO1xuICAgIH1cbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY3JlYXRlRXJyb3IgPSByZXF1aXJlKCcuL2NyZWF0ZUVycm9yJyk7XG5cbi8qKlxuICogUmVzb2x2ZSBvciByZWplY3QgYSBQcm9taXNlIGJhc2VkIG9uIHJlc3BvbnNlIHN0YXR1cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZXNvbHZlIEEgZnVuY3Rpb24gdGhhdCByZXNvbHZlcyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdCBBIGZ1bmN0aW9uIHRoYXQgcmVqZWN0cyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7b2JqZWN0fSByZXNwb25zZSBUaGUgcmVzcG9uc2UuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpIHtcbiAgdmFyIHZhbGlkYXRlU3RhdHVzID0gcmVzcG9uc2UuY29uZmlnLnZhbGlkYXRlU3RhdHVzO1xuICAvLyBOb3RlOiBzdGF0dXMgaXMgbm90IGV4cG9zZWQgYnkgWERvbWFpblJlcXVlc3RcbiAgaWYgKCFyZXNwb25zZS5zdGF0dXMgfHwgIXZhbGlkYXRlU3RhdHVzIHx8IHZhbGlkYXRlU3RhdHVzKHJlc3BvbnNlLnN0YXR1cykpIHtcbiAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgfSBlbHNlIHtcbiAgICByZWplY3QoY3JlYXRlRXJyb3IoXG4gICAgICAnUmVxdWVzdCBmYWlsZWQgd2l0aCBzdGF0dXMgY29kZSAnICsgcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgcmVzcG9uc2UuY29uZmlnLFxuICAgICAgbnVsbCxcbiAgICAgIHJlc3BvbnNlLnJlcXVlc3QsXG4gICAgICByZXNwb25zZVxuICAgICkpO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVwZGF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgY29uZmlnLCBlcnJvciBjb2RlLCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtFcnJvcn0gZXJyb3IgVGhlIGVycm9yIHRvIHVwZGF0ZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgZXJyb3IuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIGVycm9yLmNvbmZpZyA9IGNvbmZpZztcbiAgaWYgKGNvZGUpIHtcbiAgICBlcnJvci5jb2RlID0gY29kZTtcbiAgfVxuICBlcnJvci5yZXF1ZXN0ID0gcmVxdWVzdDtcbiAgZXJyb3IucmVzcG9uc2UgPSByZXNwb25zZTtcbiAgcmV0dXJuIGVycm9yO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBlbmNvZGUodmFsKSB7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodmFsKS5cbiAgICByZXBsYWNlKC8lNDAvZ2ksICdAJykuXG4gICAgcmVwbGFjZSgvJTNBL2dpLCAnOicpLlxuICAgIHJlcGxhY2UoLyUyNC9nLCAnJCcpLlxuICAgIHJlcGxhY2UoLyUyQy9naSwgJywnKS5cbiAgICByZXBsYWNlKC8lMjAvZywgJysnKS5cbiAgICByZXBsYWNlKC8lNUIvZ2ksICdbJykuXG4gICAgcmVwbGFjZSgvJTVEL2dpLCAnXScpO1xufVxuXG4vKipcbiAqIEJ1aWxkIGEgVVJMIGJ5IGFwcGVuZGluZyBwYXJhbXMgdG8gdGhlIGVuZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIGJhc2Ugb2YgdGhlIHVybCAoZS5nLiwgaHR0cDovL3d3dy5nb29nbGUuY29tKVxuICogQHBhcmFtIHtvYmplY3R9IFtwYXJhbXNdIFRoZSBwYXJhbXMgdG8gYmUgYXBwZW5kZWRcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBmb3JtYXR0ZWQgdXJsXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYnVpbGRVUkwodXJsLCBwYXJhbXMsIHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIGlmICghcGFyYW1zKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuXG4gIHZhciBzZXJpYWxpemVkUGFyYW1zO1xuICBpZiAocGFyYW1zU2VyaWFsaXplcikge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXNTZXJpYWxpemVyKHBhcmFtcyk7XG4gIH0gZWxzZSBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMocGFyYW1zKSkge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXMudG9TdHJpbmcoKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgcGFydHMgPSBbXTtcblxuICAgIHV0aWxzLmZvckVhY2gocGFyYW1zLCBmdW5jdGlvbiBzZXJpYWxpemUodmFsLCBrZXkpIHtcbiAgICAgIGlmICh2YWwgPT09IG51bGwgfHwgdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodXRpbHMuaXNBcnJheSh2YWwpKSB7XG4gICAgICAgIGtleSA9IGtleSArICdbXSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWwgPSBbdmFsXTtcbiAgICAgIH1cblxuICAgICAgdXRpbHMuZm9yRWFjaCh2YWwsIGZ1bmN0aW9uIHBhcnNlVmFsdWUodikge1xuICAgICAgICBpZiAodXRpbHMuaXNEYXRlKHYpKSB7XG4gICAgICAgICAgdiA9IHYudG9JU09TdHJpbmcoKTtcbiAgICAgICAgfSBlbHNlIGlmICh1dGlscy5pc09iamVjdCh2KSkge1xuICAgICAgICAgIHYgPSBKU09OLnN0cmluZ2lmeSh2KTtcbiAgICAgICAgfVxuICAgICAgICBwYXJ0cy5wdXNoKGVuY29kZShrZXkpICsgJz0nICsgZW5jb2RlKHYpKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcnRzLmpvaW4oJyYnKTtcbiAgfVxuXG4gIGlmIChzZXJpYWxpemVkUGFyYW1zKSB7XG4gICAgdXJsICs9ICh1cmwuaW5kZXhPZignPycpID09PSAtMSA/ICc/JyA6ICcmJykgKyBzZXJpYWxpemVkUGFyYW1zO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuLy8gSGVhZGVycyB3aG9zZSBkdXBsaWNhdGVzIGFyZSBpZ25vcmVkIGJ5IG5vZGVcbi8vIGMuZi4gaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9odHRwLmh0bWwjaHR0cF9tZXNzYWdlX2hlYWRlcnNcbnZhciBpZ25vcmVEdXBsaWNhdGVPZiA9IFtcbiAgJ2FnZScsICdhdXRob3JpemF0aW9uJywgJ2NvbnRlbnQtbGVuZ3RoJywgJ2NvbnRlbnQtdHlwZScsICdldGFnJyxcbiAgJ2V4cGlyZXMnLCAnZnJvbScsICdob3N0JywgJ2lmLW1vZGlmaWVkLXNpbmNlJywgJ2lmLXVubW9kaWZpZWQtc2luY2UnLFxuICAnbGFzdC1tb2RpZmllZCcsICdsb2NhdGlvbicsICdtYXgtZm9yd2FyZHMnLCAncHJveHktYXV0aG9yaXphdGlvbicsXG4gICdyZWZlcmVyJywgJ3JldHJ5LWFmdGVyJywgJ3VzZXItYWdlbnQnXG5dO1xuXG4vKipcbiAqIFBhcnNlIGhlYWRlcnMgaW50byBhbiBvYmplY3RcbiAqXG4gKiBgYGBcbiAqIERhdGU6IFdlZCwgMjcgQXVnIDIwMTQgMDg6NTg6NDkgR01UXG4gKiBDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb25cbiAqIENvbm5lY3Rpb246IGtlZXAtYWxpdmVcbiAqIFRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gaGVhZGVycyBIZWFkZXJzIG5lZWRpbmcgdG8gYmUgcGFyc2VkXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBIZWFkZXJzIHBhcnNlZCBpbnRvIGFuIG9iamVjdFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHBhcnNlSGVhZGVycyhoZWFkZXJzKSB7XG4gIHZhciBwYXJzZWQgPSB7fTtcbiAgdmFyIGtleTtcbiAgdmFyIHZhbDtcbiAgdmFyIGk7XG5cbiAgaWYgKCFoZWFkZXJzKSB7IHJldHVybiBwYXJzZWQ7IH1cblxuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMuc3BsaXQoJ1xcbicpLCBmdW5jdGlvbiBwYXJzZXIobGluZSkge1xuICAgIGkgPSBsaW5lLmluZGV4T2YoJzonKTtcbiAgICBrZXkgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKDAsIGkpKS50b0xvd2VyQ2FzZSgpO1xuICAgIHZhbCA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoaSArIDEpKTtcblxuICAgIGlmIChrZXkpIHtcbiAgICAgIGlmIChwYXJzZWRba2V5XSAmJiBpZ25vcmVEdXBsaWNhdGVPZi5pbmRleE9mKGtleSkgPj0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoa2V5ID09PSAnc2V0LWNvb2tpZScpIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSAocGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSA6IFtdKS5jb25jYXQoW3ZhbF0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSBwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldICsgJywgJyArIHZhbCA6IHZhbDtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBwYXJzZWQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKFxuICB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgaGF2ZSBmdWxsIHN1cHBvcnQgb2YgdGhlIEFQSXMgbmVlZGVkIHRvIHRlc3RcbiAgLy8gd2hldGhlciB0aGUgcmVxdWVzdCBVUkwgaXMgb2YgdGhlIHNhbWUgb3JpZ2luIGFzIGN1cnJlbnQgbG9jYXRpb24uXG4gIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgdmFyIG1zaWUgPSAvKG1zaWV8dHJpZGVudCkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgIHZhciB1cmxQYXJzaW5nTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICB2YXIgb3JpZ2luVVJMO1xuXG4gICAgLyoqXG4gICAgKiBQYXJzZSBhIFVSTCB0byBkaXNjb3ZlciBpdCdzIGNvbXBvbmVudHNcbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsIFRoZSBVUkwgdG8gYmUgcGFyc2VkXG4gICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICovXG4gICAgZnVuY3Rpb24gcmVzb2x2ZVVSTCh1cmwpIHtcbiAgICAgIHZhciBocmVmID0gdXJsO1xuXG4gICAgICBpZiAobXNpZSkge1xuICAgICAgICAvLyBJRSBuZWVkcyBhdHRyaWJ1dGUgc2V0IHR3aWNlIHRvIG5vcm1hbGl6ZSBwcm9wZXJ0aWVzXG4gICAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuICAgICAgICBocmVmID0gdXJsUGFyc2luZ05vZGUuaHJlZjtcbiAgICAgIH1cblxuICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG5cbiAgICAgIC8vIHVybFBhcnNpbmdOb2RlIHByb3ZpZGVzIHRoZSBVcmxVdGlscyBpbnRlcmZhY2UgLSBodHRwOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsdXRpbHNcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGhyZWY6IHVybFBhcnNpbmdOb2RlLmhyZWYsXG4gICAgICAgIHByb3RvY29sOiB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbCA/IHVybFBhcnNpbmdOb2RlLnByb3RvY29sLnJlcGxhY2UoLzokLywgJycpIDogJycsXG4gICAgICAgIGhvc3Q6IHVybFBhcnNpbmdOb2RlLmhvc3QsXG4gICAgICAgIHNlYXJjaDogdXJsUGFyc2luZ05vZGUuc2VhcmNoID8gdXJsUGFyc2luZ05vZGUuc2VhcmNoLnJlcGxhY2UoL15cXD8vLCAnJykgOiAnJyxcbiAgICAgICAgaGFzaDogdXJsUGFyc2luZ05vZGUuaGFzaCA/IHVybFBhcnNpbmdOb2RlLmhhc2gucmVwbGFjZSgvXiMvLCAnJykgOiAnJyxcbiAgICAgICAgaG9zdG5hbWU6IHVybFBhcnNpbmdOb2RlLmhvc3RuYW1lLFxuICAgICAgICBwb3J0OiB1cmxQYXJzaW5nTm9kZS5wb3J0LFxuICAgICAgICBwYXRobmFtZTogKHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nKSA/XG4gICAgICAgICAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZSA6XG4gICAgICAgICAgICAgICAgICAnLycgKyB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBvcmlnaW5VUkwgPSByZXNvbHZlVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcblxuICAgIC8qKlxuICAgICogRGV0ZXJtaW5lIGlmIGEgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4gYXMgdGhlIGN1cnJlbnQgbG9jYXRpb25cbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdFVSTCBUaGUgVVJMIHRvIHRlc3RcbiAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luLCBvdGhlcndpc2UgZmFsc2VcbiAgICAqL1xuICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4ocmVxdWVzdFVSTCkge1xuICAgICAgdmFyIHBhcnNlZCA9ICh1dGlscy5pc1N0cmluZyhyZXF1ZXN0VVJMKSkgPyByZXNvbHZlVVJMKHJlcXVlc3RVUkwpIDogcmVxdWVzdFVSTDtcbiAgICAgIHJldHVybiAocGFyc2VkLnByb3RvY29sID09PSBvcmlnaW5VUkwucHJvdG9jb2wgJiZcbiAgICAgICAgICAgIHBhcnNlZC5ob3N0ID09PSBvcmlnaW5VUkwuaG9zdCk7XG4gICAgfTtcbiAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52cyAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbiAgfSkoKVxuKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLy8gYnRvYSBwb2x5ZmlsbCBmb3IgSUU8MTAgY291cnRlc3kgaHR0cHM6Ly9naXRodWIuY29tL2RhdmlkY2hhbWJlcnMvQmFzZTY0LmpzXG5cbnZhciBjaGFycyA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPSc7XG5cbmZ1bmN0aW9uIEUoKSB7XG4gIHRoaXMubWVzc2FnZSA9ICdTdHJpbmcgY29udGFpbnMgYW4gaW52YWxpZCBjaGFyYWN0ZXInO1xufVxuRS5wcm90b3R5cGUgPSBuZXcgRXJyb3I7XG5FLnByb3RvdHlwZS5jb2RlID0gNTtcbkUucHJvdG90eXBlLm5hbWUgPSAnSW52YWxpZENoYXJhY3RlckVycm9yJztcblxuZnVuY3Rpb24gYnRvYShpbnB1dCkge1xuICB2YXIgc3RyID0gU3RyaW5nKGlucHV0KTtcbiAgdmFyIG91dHB1dCA9ICcnO1xuICBmb3IgKFxuICAgIC8vIGluaXRpYWxpemUgcmVzdWx0IGFuZCBjb3VudGVyXG4gICAgdmFyIGJsb2NrLCBjaGFyQ29kZSwgaWR4ID0gMCwgbWFwID0gY2hhcnM7XG4gICAgLy8gaWYgdGhlIG5leHQgc3RyIGluZGV4IGRvZXMgbm90IGV4aXN0OlxuICAgIC8vICAgY2hhbmdlIHRoZSBtYXBwaW5nIHRhYmxlIHRvIFwiPVwiXG4gICAgLy8gICBjaGVjayBpZiBkIGhhcyBubyBmcmFjdGlvbmFsIGRpZ2l0c1xuICAgIHN0ci5jaGFyQXQoaWR4IHwgMCkgfHwgKG1hcCA9ICc9JywgaWR4ICUgMSk7XG4gICAgLy8gXCI4IC0gaWR4ICUgMSAqIDhcIiBnZW5lcmF0ZXMgdGhlIHNlcXVlbmNlIDIsIDQsIDYsIDhcbiAgICBvdXRwdXQgKz0gbWFwLmNoYXJBdCg2MyAmIGJsb2NrID4+IDggLSBpZHggJSAxICogOClcbiAgKSB7XG4gICAgY2hhckNvZGUgPSBzdHIuY2hhckNvZGVBdChpZHggKz0gMyAvIDQpO1xuICAgIGlmIChjaGFyQ29kZSA+IDB4RkYpIHtcbiAgICAgIHRocm93IG5ldyBFKCk7XG4gICAgfVxuICAgIGJsb2NrID0gYmxvY2sgPDwgOCB8IGNoYXJDb2RlO1xuICB9XG4gIHJldHVybiBvdXRwdXQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYnRvYTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIHN1cHBvcnQgZG9jdW1lbnQuY29va2llXG4gIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZShuYW1lLCB2YWx1ZSwgZXhwaXJlcywgcGF0aCwgZG9tYWluLCBzZWN1cmUpIHtcbiAgICAgICAgdmFyIGNvb2tpZSA9IFtdO1xuICAgICAgICBjb29raWUucHVzaChuYW1lICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKSk7XG5cbiAgICAgICAgaWYgKHV0aWxzLmlzTnVtYmVyKGV4cGlyZXMpKSB7XG4gICAgICAgICAgY29va2llLnB1c2goJ2V4cGlyZXM9JyArIG5ldyBEYXRlKGV4cGlyZXMpLnRvR01UU3RyaW5nKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKHBhdGgpKSB7XG4gICAgICAgICAgY29va2llLnB1c2goJ3BhdGg9JyArIHBhdGgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKGRvbWFpbikpIHtcbiAgICAgICAgICBjb29raWUucHVzaCgnZG9tYWluPScgKyBkb21haW4pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNlY3VyZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgIGNvb2tpZS5wdXNoKCdzZWN1cmUnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGNvb2tpZS5qb2luKCc7ICcpO1xuICAgICAgfSxcblxuICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZChuYW1lKSB7XG4gICAgICAgIHZhciBtYXRjaCA9IGRvY3VtZW50LmNvb2tpZS5tYXRjaChuZXcgUmVnRXhwKCcoXnw7XFxcXHMqKSgnICsgbmFtZSArICcpPShbXjtdKiknKSk7XG4gICAgICAgIHJldHVybiAobWF0Y2ggPyBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbM10pIDogbnVsbCk7XG4gICAgICB9LFxuXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZShuYW1lKSB7XG4gICAgICAgIHRoaXMud3JpdGUobmFtZSwgJycsIERhdGUubm93KCkgLSA4NjQwMDAwMCk7XG4gICAgICB9XG4gICAgfTtcbiAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52ICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgIHJldHVybiB7XG4gICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUoKSB7fSxcbiAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQoKSB7IHJldHVybiBudWxsOyB9LFxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgIH07XG4gIH0pKClcbik7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gSW50ZXJjZXB0b3JNYW5hZ2VyKCkge1xuICB0aGlzLmhhbmRsZXJzID0gW107XG59XG5cbi8qKlxuICogQWRkIGEgbmV3IGludGVyY2VwdG9yIHRvIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bGZpbGxlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGB0aGVuYCBmb3IgYSBgUHJvbWlzZWBcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHJlamVjdGAgZm9yIGEgYFByb21pc2VgXG4gKlxuICogQHJldHVybiB7TnVtYmVyfSBBbiBJRCB1c2VkIHRvIHJlbW92ZSBpbnRlcmNlcHRvciBsYXRlclxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLnVzZSA9IGZ1bmN0aW9uIHVzZShmdWxmaWxsZWQsIHJlamVjdGVkKSB7XG4gIHRoaXMuaGFuZGxlcnMucHVzaCh7XG4gICAgZnVsZmlsbGVkOiBmdWxmaWxsZWQsXG4gICAgcmVqZWN0ZWQ6IHJlamVjdGVkXG4gIH0pO1xuICByZXR1cm4gdGhpcy5oYW5kbGVycy5sZW5ndGggLSAxO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgYW4gaW50ZXJjZXB0b3IgZnJvbSB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gaWQgVGhlIElEIHRoYXQgd2FzIHJldHVybmVkIGJ5IGB1c2VgXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZWplY3QgPSBmdW5jdGlvbiBlamVjdChpZCkge1xuICBpZiAodGhpcy5oYW5kbGVyc1tpZF0pIHtcbiAgICB0aGlzLmhhbmRsZXJzW2lkXSA9IG51bGw7XG4gIH1cbn07XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFsbCB0aGUgcmVnaXN0ZXJlZCBpbnRlcmNlcHRvcnNcbiAqXG4gKiBUaGlzIG1ldGhvZCBpcyBwYXJ0aWN1bGFybHkgdXNlZnVsIGZvciBza2lwcGluZyBvdmVyIGFueVxuICogaW50ZXJjZXB0b3JzIHRoYXQgbWF5IGhhdmUgYmVjb21lIGBudWxsYCBjYWxsaW5nIGBlamVjdGAuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggaW50ZXJjZXB0b3JcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gZm9yRWFjaChmbikge1xuICB1dGlscy5mb3JFYWNoKHRoaXMuaGFuZGxlcnMsIGZ1bmN0aW9uIGZvckVhY2hIYW5kbGVyKGgpIHtcbiAgICBpZiAoaCAhPT0gbnVsbCkge1xuICAgICAgZm4oaCk7XG4gICAgfVxuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gSW50ZXJjZXB0b3JNYW5hZ2VyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgdHJhbnNmb3JtRGF0YSA9IHJlcXVpcmUoJy4vdHJhbnNmb3JtRGF0YScpO1xudmFyIGlzQ2FuY2VsID0gcmVxdWlyZSgnLi4vY2FuY2VsL2lzQ2FuY2VsJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLi9kZWZhdWx0cycpO1xudmFyIGlzQWJzb2x1dGVVUkwgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTCcpO1xudmFyIGNvbWJpbmVVUkxzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2NvbWJpbmVVUkxzJyk7XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuZnVuY3Rpb24gdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpIHtcbiAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgIGNvbmZpZy5jYW5jZWxUb2tlbi50aHJvd0lmUmVxdWVzdGVkKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3QgdG8gdGhlIHNlcnZlciB1c2luZyB0aGUgY29uZmlndXJlZCBhZGFwdGVyLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyB0aGF0IGlzIHRvIGJlIHVzZWQgZm9yIHRoZSByZXF1ZXN0XG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIFByb21pc2UgdG8gYmUgZnVsZmlsbGVkXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGlzcGF0Y2hSZXF1ZXN0KGNvbmZpZykge1xuICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgLy8gU3VwcG9ydCBiYXNlVVJMIGNvbmZpZ1xuICBpZiAoY29uZmlnLmJhc2VVUkwgJiYgIWlzQWJzb2x1dGVVUkwoY29uZmlnLnVybCkpIHtcbiAgICBjb25maWcudXJsID0gY29tYmluZVVSTHMoY29uZmlnLmJhc2VVUkwsIGNvbmZpZy51cmwpO1xuICB9XG5cbiAgLy8gRW5zdXJlIGhlYWRlcnMgZXhpc3RcbiAgY29uZmlnLmhlYWRlcnMgPSBjb25maWcuaGVhZGVycyB8fCB7fTtcblxuICAvLyBUcmFuc2Zvcm0gcmVxdWVzdCBkYXRhXG4gIGNvbmZpZy5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICBjb25maWcuZGF0YSxcbiAgICBjb25maWcuaGVhZGVycyxcbiAgICBjb25maWcudHJhbnNmb3JtUmVxdWVzdFxuICApO1xuXG4gIC8vIEZsYXR0ZW4gaGVhZGVyc1xuICBjb25maWcuaGVhZGVycyA9IHV0aWxzLm1lcmdlKFxuICAgIGNvbmZpZy5oZWFkZXJzLmNvbW1vbiB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVyc1tjb25maWcubWV0aG9kXSB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVycyB8fCB7fVxuICApO1xuXG4gIHV0aWxzLmZvckVhY2goXG4gICAgWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAncG9zdCcsICdwdXQnLCAncGF0Y2gnLCAnY29tbW9uJ10sXG4gICAgZnVuY3Rpb24gY2xlYW5IZWFkZXJDb25maWcobWV0aG9kKSB7XG4gICAgICBkZWxldGUgY29uZmlnLmhlYWRlcnNbbWV0aG9kXTtcbiAgICB9XG4gICk7XG5cbiAgdmFyIGFkYXB0ZXIgPSBjb25maWcuYWRhcHRlciB8fCBkZWZhdWx0cy5hZGFwdGVyO1xuXG4gIHJldHVybiBhZGFwdGVyKGNvbmZpZykudGhlbihmdW5jdGlvbiBvbkFkYXB0ZXJSZXNvbHV0aW9uKHJlc3BvbnNlKSB7XG4gICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICByZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICAgIHJlc3BvbnNlLmRhdGEsXG4gICAgICByZXNwb25zZS5oZWFkZXJzLFxuICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgKTtcblxuICAgIHJldHVybiByZXNwb25zZTtcbiAgfSwgZnVuY3Rpb24gb25BZGFwdGVyUmVqZWN0aW9uKHJlYXNvbikge1xuICAgIGlmICghaXNDYW5jZWwocmVhc29uKSkge1xuICAgICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgICAgaWYgKHJlYXNvbiAmJiByZWFzb24ucmVzcG9uc2UpIHtcbiAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhLFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5oZWFkZXJzLFxuICAgICAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChyZWFzb24pO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBUcmFuc2Zvcm0gdGhlIGRhdGEgZm9yIGEgcmVxdWVzdCBvciBhIHJlc3BvbnNlXG4gKlxuICogQHBhcmFtIHtPYmplY3R8U3RyaW5nfSBkYXRhIFRoZSBkYXRhIHRvIGJlIHRyYW5zZm9ybWVkXG4gKiBAcGFyYW0ge0FycmF5fSBoZWFkZXJzIFRoZSBoZWFkZXJzIGZvciB0aGUgcmVxdWVzdCBvciByZXNwb25zZVxuICogQHBhcmFtIHtBcnJheXxGdW5jdGlvbn0gZm5zIEEgc2luZ2xlIGZ1bmN0aW9uIG9yIEFycmF5IG9mIGZ1bmN0aW9uc1xuICogQHJldHVybnMgeyp9IFRoZSByZXN1bHRpbmcgdHJhbnNmb3JtZWQgZGF0YVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHRyYW5zZm9ybURhdGEoZGF0YSwgaGVhZGVycywgZm5zKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICB1dGlscy5mb3JFYWNoKGZucywgZnVuY3Rpb24gdHJhbnNmb3JtKGZuKSB7XG4gICAgZGF0YSA9IGZuKGRhdGEsIGhlYWRlcnMpO1xuICB9KTtcblxuICByZXR1cm4gZGF0YTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgVVJMIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0Fic29sdXRlVVJMKHVybCkge1xuICAvLyBBIFVSTCBpcyBjb25zaWRlcmVkIGFic29sdXRlIGlmIGl0IGJlZ2lucyB3aXRoIFwiPHNjaGVtZT46Ly9cIiBvciBcIi8vXCIgKHByb3RvY29sLXJlbGF0aXZlIFVSTCkuXG4gIC8vIFJGQyAzOTg2IGRlZmluZXMgc2NoZW1lIG5hbWUgYXMgYSBzZXF1ZW5jZSBvZiBjaGFyYWN0ZXJzIGJlZ2lubmluZyB3aXRoIGEgbGV0dGVyIGFuZCBmb2xsb3dlZFxuICAvLyBieSBhbnkgY29tYmluYXRpb24gb2YgbGV0dGVycywgZGlnaXRzLCBwbHVzLCBwZXJpb2QsIG9yIGh5cGhlbi5cbiAgcmV0dXJuIC9eKFthLXpdW2EtelxcZFxcK1xcLVxcLl0qOik/XFwvXFwvL2kudGVzdCh1cmwpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIHNwZWNpZmllZCBVUkxzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVsYXRpdmVVUkwgVGhlIHJlbGF0aXZlIFVSTFxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIFVSTFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlbGF0aXZlVVJMKSB7XG4gIHJldHVybiByZWxhdGl2ZVVSTFxuICAgID8gYmFzZVVSTC5yZXBsYWNlKC9cXC8rJC8sICcnKSArICcvJyArIHJlbGF0aXZlVVJMLnJlcGxhY2UoL15cXC8rLywgJycpXG4gICAgOiBiYXNlVVJMO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIENhbmNlbCA9IHJlcXVpcmUoJy4vQ2FuY2VsJyk7XG5cbi8qKlxuICogQSBgQ2FuY2VsVG9rZW5gIGlzIGFuIG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlcXVlc3QgY2FuY2VsbGF0aW9uIG9mIGFuIG9wZXJhdGlvbi5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGV4ZWN1dG9yIFRoZSBleGVjdXRvciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsVG9rZW4oZXhlY3V0b3IpIHtcbiAgaWYgKHR5cGVvZiBleGVjdXRvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2V4ZWN1dG9yIG11c3QgYmUgYSBmdW5jdGlvbi4nKTtcbiAgfVxuXG4gIHZhciByZXNvbHZlUHJvbWlzZTtcbiAgdGhpcy5wcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gcHJvbWlzZUV4ZWN1dG9yKHJlc29sdmUpIHtcbiAgICByZXNvbHZlUHJvbWlzZSA9IHJlc29sdmU7XG4gIH0pO1xuXG4gIHZhciB0b2tlbiA9IHRoaXM7XG4gIGV4ZWN1dG9yKGZ1bmN0aW9uIGNhbmNlbChtZXNzYWdlKSB7XG4gICAgaWYgKHRva2VuLnJlYXNvbikge1xuICAgICAgLy8gQ2FuY2VsbGF0aW9uIGhhcyBhbHJlYWR5IGJlZW4gcmVxdWVzdGVkXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdG9rZW4ucmVhc29uID0gbmV3IENhbmNlbChtZXNzYWdlKTtcbiAgICByZXNvbHZlUHJvbWlzZSh0b2tlbi5yZWFzb24pO1xuICB9KTtcbn1cblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5DYW5jZWxUb2tlbi5wcm90b3R5cGUudGhyb3dJZlJlcXVlc3RlZCA9IGZ1bmN0aW9uIHRocm93SWZSZXF1ZXN0ZWQoKSB7XG4gIGlmICh0aGlzLnJlYXNvbikge1xuICAgIHRocm93IHRoaXMucmVhc29uO1xuICB9XG59O1xuXG4vKipcbiAqIFJldHVybnMgYW4gb2JqZWN0IHRoYXQgY29udGFpbnMgYSBuZXcgYENhbmNlbFRva2VuYCBhbmQgYSBmdW5jdGlvbiB0aGF0LCB3aGVuIGNhbGxlZCxcbiAqIGNhbmNlbHMgdGhlIGBDYW5jZWxUb2tlbmAuXG4gKi9cbkNhbmNlbFRva2VuLnNvdXJjZSA9IGZ1bmN0aW9uIHNvdXJjZSgpIHtcbiAgdmFyIGNhbmNlbDtcbiAgdmFyIHRva2VuID0gbmV3IENhbmNlbFRva2VuKGZ1bmN0aW9uIGV4ZWN1dG9yKGMpIHtcbiAgICBjYW5jZWwgPSBjO1xuICB9KTtcbiAgcmV0dXJuIHtcbiAgICB0b2tlbjogdG9rZW4sXG4gICAgY2FuY2VsOiBjYW5jZWxcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FuY2VsVG9rZW47XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU3ludGFjdGljIHN1Z2FyIGZvciBpbnZva2luZyBhIGZ1bmN0aW9uIGFuZCBleHBhbmRpbmcgYW4gYXJyYXkgZm9yIGFyZ3VtZW50cy5cbiAqXG4gKiBDb21tb24gdXNlIGNhc2Ugd291bGQgYmUgdG8gdXNlIGBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHlgLlxuICpcbiAqICBgYGBqc1xuICogIGZ1bmN0aW9uIGYoeCwgeSwgeikge31cbiAqICB2YXIgYXJncyA9IFsxLCAyLCAzXTtcbiAqICBmLmFwcGx5KG51bGwsIGFyZ3MpO1xuICogIGBgYFxuICpcbiAqIFdpdGggYHNwcmVhZGAgdGhpcyBleGFtcGxlIGNhbiBiZSByZS13cml0dGVuLlxuICpcbiAqICBgYGBqc1xuICogIHNwcmVhZChmdW5jdGlvbih4LCB5LCB6KSB7fSkoWzEsIDIsIDNdKTtcbiAqICBgYGBcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybnMge0Z1bmN0aW9ufVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNwcmVhZChjYWxsYmFjaykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcChhcnIpIHtcbiAgICByZXR1cm4gY2FsbGJhY2suYXBwbHkobnVsbCwgYXJyKTtcbiAgfTtcbn07XG4iLCJpbXBvcnQgdW5pcWlkIGZyb20gJ3VuaXFpZCc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMaXN0IHtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMuYXJyYXkgPSBbXTtcclxuICB9XHJcbiAgXHJcbiAgY3JlYXRlKGNvdW50LCB1bml0LCBkZXNjcmlwdGlvbikge1xyXG4gICAgY29uc3QgaXRlbSA9IHtcclxuICAgICAgY291bnQsXHJcbiAgICAgIHVuaXQsXHJcbiAgICAgIGRlc2NyaXB0aW9uLFxyXG4gICAgICBpZDogdW5pcWlkKClcclxuICAgIH1cclxuICAgIHRoaXMuYXJyYXkucHVzaChpdGVtKTtcclxuICAgIHJldHVybiBpdGVtO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlQ291bnQoaWQsIGNvdW50KSB7XHJcbiAgICB0aGlzLmFycmF5LmZpbmQoZWxlbSA9PiBlbGVtLmlkID09PSBpZCkuY291bnQgPSBjb3VudDtcclxuICB9XHJcblxyXG4gIGRlbGV0ZShpZCkge1xyXG4gICAgY29uc3QgaW5kZXggPSB0aGlzLmFycmF5LmZpbmRJbmRleChlbGVtID0+IGVsZW0uaWQgPT09IGlkKTtcclxuICAgIHRoaXMuYXJyYXkuc3BsaWNlKGluZGV4LCAxKTtcclxuICB9XHJcbn0iLCIvKiBcbihUaGUgTUlUIExpY2Vuc2UpXG5Db3B5cmlnaHQgKGMpIDIwMTQgSGFsw6FzeiDDgWTDoW0gPG1haWxAYWRhbWhhbGFzei5jb20+XG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cbiovXG5cbi8vICBVbmlxdWUgSGV4YXRyaWRlY2ltYWwgSUQgR2VuZXJhdG9yXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuLy8gIERlcGVuZGVuY2llc1xuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG52YXIgcGlkID0gcHJvY2VzcyAmJiBwcm9jZXNzLnBpZCA/IHByb2Nlc3MucGlkLnRvU3RyaW5nKDM2KSA6ICcnIDtcbnZhciBhZGRyZXNzID0gJyc7XG5pZih0eXBlb2YgX193ZWJwYWNrX3JlcXVpcmVfXyAhPT0gJ2Z1bmN0aW9uJyl7XG4gICAgdmFyIG1hYyA9ICcnLCBuZXR3b3JrSW50ZXJmYWNlcyA9IHJlcXVpcmUoJ29zJykubmV0d29ya0ludGVyZmFjZXMoKTtcbiAgICBmb3IoaW50ZXJmYWNlX2tleSBpbiBuZXR3b3JrSW50ZXJmYWNlcyl7XG4gICAgICAgIGNvbnN0IG5ldHdvcmtJbnRlcmZhY2UgPSBuZXR3b3JrSW50ZXJmYWNlc1tpbnRlcmZhY2Vfa2V5XTtcbiAgICAgICAgY29uc3QgbGVuZ3RoID0gbmV0d29ya0ludGVyZmFjZS5sZW5ndGg7XG4gICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICBpZihuZXR3b3JrSW50ZXJmYWNlW2ldLm1hYyAmJiBuZXR3b3JrSW50ZXJmYWNlW2ldLm1hYyAhPSAnMDA6MDA6MDA6MDA6MDA6MDAnKXtcbiAgICAgICAgICAgICAgICBtYWMgPSBuZXR3b3JrSW50ZXJmYWNlW2ldLm1hYzsgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgYWRkcmVzcyA9IG1hYyA/IHBhcnNlSW50KG1hYy5yZXBsYWNlKC9cXDp8XFxEKy9naSwgJycpKS50b1N0cmluZygzNikgOiAnJyA7XG59IFxuXG4vLyAgRXhwb3J0c1xuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5tb2R1bGUuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbihwcmVmaXgpeyByZXR1cm4gKHByZWZpeCB8fCAnJykgKyBhZGRyZXNzICsgcGlkICsgbm93KCkudG9TdHJpbmcoMzYpOyB9XG5tb2R1bGUuZXhwb3J0cy5wcm9jZXNzID0gZnVuY3Rpb24ocHJlZml4KXsgcmV0dXJuIChwcmVmaXggfHwgJycpICsgcGlkICsgbm93KCkudG9TdHJpbmcoMzYpOyB9XG5tb2R1bGUuZXhwb3J0cy50aW1lICAgID0gZnVuY3Rpb24ocHJlZml4KXsgcmV0dXJuIChwcmVmaXggfHwgJycpICsgbm93KCkudG9TdHJpbmcoMzYpOyB9XG5cbi8vICBIZWxwZXJzXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbmZ1bmN0aW9uIG5vdygpe1xuICAgIHZhciB0aW1lID0gRGF0ZS5ub3coKTtcbiAgICB2YXIgbGFzdCA9IG5vdy5sYXN0IHx8IHRpbWU7XG4gICAgcmV0dXJuIG5vdy5sYXN0ID0gdGltZSA+IGxhc3QgPyB0aW1lIDogbGFzdCArIDE7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBMaWtlcyB7XHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLmFyciA9IFtdO1xyXG4gIH1cclxuICBcclxuICBjcmVhdGUoaWQsIHRpdGxlLCBhdXRob3IsIGltZykge1xyXG4gICAgY29uc3QgaXRlbSA9IHtcclxuICAgICAgdGl0bGUsXHJcbiAgICAgIGF1dGhvcixcclxuICAgICAgaW1nLFxyXG4gICAgICBpZDogaWRcclxuICAgIH1cclxuICAgIHRoaXMuYXJyLnB1c2goaXRlbSk7XHJcblxyXG4gICAgdGhpcy5zZXRUb0xvY2FsU3RvcmFnZSh0aGlzLmFycik7XHJcbiAgICByZXR1cm4gaXRlbTtcclxuICB9XHJcblxyXG4gIGRlbGV0ZShpZCkge1xyXG4gICAgY29uc3QgaW5kZXggPSB0aGlzLmFyci5maW5kSW5kZXgoZWxlbSA9PiBlbGVtLmlkID09PSBpZCk7XHJcbiAgICB0aGlzLmFyci5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgdGhpcy5zZXRUb0xvY2FsU3RvcmFnZSh0aGlzLmFycik7XHJcbiAgfVxyXG5cclxuICBpc0xpa2VkKGlkKSB7XHJcbiAgICBjb25zdCBpbmRleCA9IHRoaXMuYXJyLmZpbmRJbmRleChlbGVtID0+IGVsZW0uaWQgPT09IGlkKTtcclxuICAgIHJldHVybiAoaW5kZXggPT09IC0xID8gZmFsc2UgOiB0cnVlKTtcclxuICB9XHJcbiAgc2V0VG9Mb2NhbFN0b3JhZ2UodmFsdWUpIHtcclxuICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnbGlrZXMnLCBKU09OLnN0cmluZ2lmeSh2YWx1ZSkpO1xyXG4gIH1cclxuICBnZXRGcm9tTG9jYWxTdG9yYWdlKCkge1xyXG4gICAgcmV0dXJuIEpTT04ucGFyc2Uod2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKCdsaWtlcycpKTtcclxuICB9XHJcblxyXG5cclxufSIsImltcG9ydCB7ZWxlbWVudHN9IGZyb20gJy4vYmFzZSc7XHJcbmltcG9ydCB7RnJhY3Rpb259IGZyb20gJ2ZyYWN0aW9uYWwnO1xyXG5cclxuZXhwb3J0IGNvbnN0IGNsZWFyUmVjaXBlID0gKCkgPT4ge1xyXG4gIGVsZW1lbnRzLnJlY2lwZS5pbm5lckhUTUwgPSAnJztcclxufVxyXG4vKiBkb2VzbnQgY3VycmVjdCB3b3JrICovXHJcbmV4cG9ydCBjb25zdCBoaWdoTGlnaHRBY3RpdmUgPSAoaWQpID0+IHtcclxuICBsZXQgcmVzdWx0cyA9IEFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnJlc3VsdHNfX2xpbmsnKSk7XHJcbiAgcmVzdWx0cy5mb3JFYWNoKGVsZW0gPT4gZWxlbS5jbGFzc0xpc3QucmVtb3ZlKCdyZXN1bHRzX19saW5rLS1hY3RpdmUnKSk7XHJcbiAgaWYoZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgYVtocmVmPVwiIyR7aWR9XCJdYCkpIHtcclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYGFbaHJlZj1cIiMke2lkfVwiXWApLmNsYXNzTGlzdC5hZGQoJ3Jlc3VsdHNfX2xpbmstLWFjdGl2ZScpO1xyXG4gIH1cclxufVxyXG5leHBvcnQgY29uc3QgcmV3cml0ZVF1YW50aXR5ID0gKHNlcnYsIGluZ3JlZGllbnRzKSA9PiB7XHJcbiAgLy8gcmV3cml0ZSBzZXJ2aW5nXHJcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnJlY2lwZV9faW5mby1kYXRhLS1wZW9wbGUnKS5pbm5lckhUTUwgPSBzZXJ2O1xyXG5cclxuICAvLyByZXdyaXRlIGluZ3JlZGllbnQgcXVhbnRpdHlcclxuICBjb25zdCBjb3VudHMgPSBBcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5yZWNpcGVfX2NvdW50JykpO1xyXG4gIGNvdW50cy5mb3JFYWNoKChlbGVtLCBpKSA9PiB7XHJcbiAgICAvL2NvbnN0IGNvdW50ID0gKGluZ3JlZGllbnRzW2ldKVxyXG4gICAgZWxlbS5pbm5lckhUTUwgPSBjYWxjdWxDb3VudChpbmdyZWRpZW50c1tpXS5jb3VudCk7XHJcbiAgfSk7XHJcbn1cclxuXHJcblxyXG5jb25zdCBjYWxjdWxDb3VudCA9IChjb3VudCkgPT4ge1xyXG5cclxuICBpZihjb3VudCA9PSAwKSB7XHJcbiAgICByZXR1cm4gJyc7XHJcbiAgfVxyXG4gIGxldCBuZXdDb3VudCA9ICsoY291bnQudG9GaXhlZCgyKSk7XHJcbiAgbGV0IHZhbHVlID0gKG5ldyBGcmFjdGlvbihuZXdDb3VudCkpLnRvU3RyaW5nKCk7XHJcbiAgcmV0dXJuIHZhbHVlO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgcmVjaXBlUmVuZGVyID0gKHJlY2lwZSwgaXNMaWtlZCkgPT4ge1xyXG5cclxuICAvLyBjcmVhdGUgc3RyIFxyXG4gIC8vIHRoZW4gcmVuZGVyIHRvIGh0bWxcclxuICBjb25zdCBjcmVhdGVMaXN0ID0gKGVsZW0pID0+IHtcclxuICAgIGNvbnN0IGlubmVyU3RyaW5nID0gYFxyXG4gICAgICA8bGkgY2xhc3M9XCJyZWNpcGVfX2l0ZW1cIj5cclxuICAgICAgICAgIDxzdmcgY2xhc3M9XCJyZWNpcGVfX2ljb25cIj5cclxuICAgICAgICAgICAgICA8dXNlIGhyZWY9XCJpbWcvaWNvbnMuc3ZnI2ljb24tY2hlY2tcIj48L3VzZT5cclxuICAgICAgICAgIDwvc3ZnPlxyXG4gICAgICAgICAgPGRpdiBjbGFzcz1cInJlY2lwZV9fY291bnRcIj4ke2NhbGN1bENvdW50KGVsZW0uY291bnQpfTwvZGl2PlxyXG4gICAgICAgICAgPGRpdiBjbGFzcz1cInJlY2lwZV9faW5ncmVkaWVudFwiPlxyXG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwicmVjaXBlX191bml0XCI+JHtlbGVtLnVuaXR9PC9zcGFuPlxyXG4gICAgICAgICAgICAgICR7ZWxlbS5kZXNjcmlwdGlvbn1cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICA8L2xpPlxyXG4gICAgYDtcclxuICAgIHJldHVybiBpbm5lclN0cmluZztcclxuICB9O1xyXG5cclxuICBjb25zdCBodG1sU3RyaW5nID0gYFxyXG4gICAgPGZpZ3VyZSBjbGFzcz1cInJlY2lwZV9fZmlnXCI+XHJcbiAgICAgICAgPGltZyBzcmM9XCIke3JlY2lwZS5pbWFnZX1cIiBhbHQ9XCIke3JlY2lwZS50aXRsZX1cIiBjbGFzcz1cInJlY2lwZV9faW1nXCI+XHJcbiAgICAgICAgPGgxIGNsYXNzPVwicmVjaXBlX190aXRsZVwiPlxyXG4gICAgICAgICAgICA8c3Bhbj4ke3JlY2lwZS50aXRsZX08L3NwYW4+XHJcbiAgICAgICAgPC9oMT5cclxuICAgIDwvZmlndXJlPlxyXG4gICAgPGRpdiBjbGFzcz1cInJlY2lwZV9fZGV0YWlsc1wiPlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJyZWNpcGVfX2luZm9cIj5cclxuICAgICAgICAgICAgPHN2ZyBjbGFzcz1cInJlY2lwZV9faW5mby1pY29uXCI+XHJcbiAgICAgICAgICAgICAgICA8dXNlIGhyZWY9XCJpbWcvaWNvbnMuc3ZnI2ljb24tc3RvcHdhdGNoXCI+PC91c2U+XHJcbiAgICAgICAgICAgIDwvc3ZnPlxyXG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cInJlY2lwZV9faW5mby1kYXRhIHJlY2lwZV9faW5mby1kYXRhLS1taW51dGVzXCI+JHtyZWNpcGUudGltZX08L3NwYW4+XHJcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwicmVjaXBlX19pbmZvLXRleHRcIj4gbWludXRlczwvc3Bhbj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwicmVjaXBlX19pbmZvXCI+XHJcbiAgICAgICAgICAgIDxzdmcgY2xhc3M9XCJyZWNpcGVfX2luZm8taWNvblwiPlxyXG4gICAgICAgICAgICAgICAgPHVzZSBocmVmPVwiaW1nL2ljb25zLnN2ZyNpY29uLW1hblwiPjwvdXNlPlxyXG4gICAgICAgICAgICA8L3N2Zz5cclxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJyZWNpcGVfX2luZm8tZGF0YSByZWNpcGVfX2luZm8tZGF0YS0tcGVvcGxlXCI+JHtyZWNpcGUuc2VydmluZ308L3NwYW4+XHJcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwicmVjaXBlX19pbmZvLXRleHRcIj4gc2VydmluZ3M8L3NwYW4+XHJcblxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwicmVjaXBlX19pbmZvLWJ1dHRvbnNcIj5cclxuICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4tdGlueSBidG4tZGVjcmVhc2VcIj5cclxuICAgICAgICAgICAgICAgICAgICA8c3ZnPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dXNlIGhyZWY9XCJpbWcvaWNvbnMuc3ZnI2ljb24tY2lyY2xlLXdpdGgtbWludXNcIj48L3VzZT5cclxuICAgICAgICAgICAgICAgICAgICA8L3N2Zz5cclxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0bi10aW55IGJ0bi1pbmNyZWFzZVwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzdmc+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx1c2UgaHJlZj1cImltZy9pY29ucy5zdmcjaWNvbi1jaXJjbGUtd2l0aC1wbHVzXCI+PC91c2U+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9zdmc+XHJcbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDxidXR0b24gY2xhc3M9XCJyZWNpcGVfX2xvdmVcIj5cclxuICAgICAgICAgICAgPHN2ZyBjbGFzcz1cImhlYWRlcl9fbGlrZXNcIj5cclxuICAgICAgICAgICAgICAgIDx1c2UgaHJlZj1cImltZy9pY29ucy5zdmcjaWNvbi1oZWFydCR7aXNMaWtlZD8gJyc6Jy1vdXRsaW5lZCcgfVwiPjwvdXNlPlxyXG4gICAgICAgICAgICA8L3N2Zz5cclxuICAgICAgICA8L2J1dHRvbj5cclxuICAgIDwvZGl2PlxyXG4gICAgPGRpdiBjbGFzcz1cInJlY2lwZV9faW5ncmVkaWVudHNcIj5cclxuICAgICAgICA8dWwgY2xhc3M9XCJyZWNpcGVfX2luZ3JlZGllbnQtbGlzdFwiPlxyXG5cclxuICAgICAgICAgICAgJHsgcmVjaXBlLmluZ3JlZGllbnRzLm1hcCgoZWxlbSkgPT4gY3JlYXRlTGlzdChlbGVtKSkuam9pbignICcpfVxyXG4gICAgICAgICAgIFxyXG4gICAgICAgIDwvdWw+XHJcblxyXG4gICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4tc21hbGwgcmVjaXBlX19idG4gcmVjaXBlX19idG4tLWFkZFwiPlxyXG4gICAgICAgICAgICA8c3ZnIGNsYXNzPVwic2VhcmNoX19pY29uXCI+XHJcbiAgICAgICAgICAgICAgICA8dXNlIGhyZWY9XCJpbWcvaWNvbnMuc3ZnI2ljb24tc2hvcHBpbmctY2FydFwiPjwvdXNlPlxyXG4gICAgICAgICAgICA8L3N2Zz5cclxuICAgICAgICAgICAgPHNwYW4+QWRkIHRvIHNob3BwaW5nIGxpc3Q8L3NwYW4+XHJcbiAgICAgICAgPC9idXR0b24+XHJcbiAgICA8L2Rpdj5cclxuXHJcbiAgICA8ZGl2IGNsYXNzPVwicmVjaXBlX19kaXJlY3Rpb25zXCI+XHJcbiAgICAgICAgPGgyIGNsYXNzPVwiaGVhZGluZy0yXCI+SG93IHRvIGNvb2sgaXQ8L2gyPlxyXG4gICAgICAgIDxwIGNsYXNzPVwicmVjaXBlX19kaXJlY3Rpb25zLXRleHRcIj5cclxuICAgICAgICAgICAgVGhpcyByZWNpcGUgd2FzIGNhcmVmdWxseSBkZXNpZ25lZCBhbmQgdGVzdGVkIGJ5XHJcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwicmVjaXBlX19ieVwiPiR7cmVjaXBlLnB1Ymxpc2hlcn08L3NwYW4+LiBQbGVhc2UgY2hlY2sgb3V0IGRpcmVjdGlvbnMgYXQgdGhlaXIgd2Vic2l0ZS5cclxuICAgICAgICA8L3A+XHJcbiAgICAgICAgPGEgY2xhc3M9XCJidG4tc21hbGwgcmVjaXBlX19idG5cIiBocmVmPVwiJHtyZWNpcGUudXJsfVwiIHRhcmdldD1cIl9ibGFua1wiPlxyXG4gICAgICAgICAgICA8c3Bhbj5EaXJlY3Rpb25zPC9zcGFuPlxyXG4gICAgICAgICAgICA8c3ZnIGNsYXNzPVwic2VhcmNoX19pY29uXCI+XHJcbiAgICAgICAgICAgICAgICA8dXNlIGhyZWY9XCJpbWcvaWNvbnMuc3ZnI2ljb24tdHJpYW5nbGUtcmlnaHRcIj48L3VzZT5cclxuICAgICAgICAgICAgPC9zdmc+XHJcblxyXG4gICAgICAgIDwvYT5cclxuICAgIDwvZGl2PlxyXG4gIGA7XHJcbiAgIGVsZW1lbnRzLnJlY2lwZS5pbnNlcnRBZGphY2VudEhUTUwoICdiZWZvcmVlbmQnLCBodG1sU3RyaW5nICk7XHJcbn0iLCIvKlxuZnJhY3Rpb24uanNcbkEgSmF2YXNjcmlwdCBmcmFjdGlvbiBsaWJyYXJ5LlxuXG5Db3B5cmlnaHQgKGMpIDIwMDkgIEVyaWsgR2Fycmlzb24gPGVyaWtAaHlwZXJ2b2x1Lm1lPlxuXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5vZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5pbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG50byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5jb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbmZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG5hbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5GSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5PVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG5USEUgU09GVFdBUkUuXG5cbiovXG5cblxuLyogRnJhY3Rpb25zICovXG4vKiBcbiAqXG4gKiBGcmFjdGlvbiBvYmplY3RzIGFyZSBjb21wcmlzZWQgb2YgYSBudW1lcmF0b3IgYW5kIGEgZGVub21lbmF0b3IuICBUaGVzZVxuICogdmFsdWVzIGNhbiBiZSBhY2Nlc3NlZCBhdCBmcmFjdGlvbi5udW1lcmF0b3IgYW5kIGZyYWN0aW9uLmRlbm9tZW5hdG9yLlxuICpcbiAqIEZyYWN0aW9ucyBhcmUgYWx3YXlzIHJldHVybmVkIGFuZCBzdG9yZWQgaW4gbG93ZXN0LWZvcm0gbm9ybWFsaXplZCBmb3JtYXQuXG4gKiBUaGlzIGlzIGFjY29tcGxpc2hlZCB2aWEgRnJhY3Rpb24ubm9ybWFsaXplLlxuICpcbiAqIFRoZSBmb2xsb3dpbmcgbWF0aGVtYXRpY2FsIG9wZXJhdGlvbnMgb24gZnJhY3Rpb25zIGFyZSBzdXBwb3J0ZWQ6XG4gKlxuICogRnJhY3Rpb24uZXF1YWxzXG4gKiBGcmFjdGlvbi5hZGRcbiAqIEZyYWN0aW9uLnN1YnRyYWN0XG4gKiBGcmFjdGlvbi5tdWx0aXBseVxuICogRnJhY3Rpb24uZGl2aWRlXG4gKlxuICogVGhlc2Ugb3BlcmF0aW9ucyBhY2NlcHQgYm90aCBudW1iZXJzIGFuZCBmcmFjdGlvbiBvYmplY3RzLiAgKEJlc3QgcmVzdWx0c1xuICogYXJlIGd1YXJhbnRlZWQgd2hlbiB0aGUgaW5wdXQgaXMgYSBmcmFjdGlvbiBvYmplY3QuKSAgVGhleSBhbGwgcmV0dXJuIGEgbmV3XG4gKiBGcmFjdGlvbiBvYmplY3QuXG4gKlxuICogVXNhZ2U6XG4gKlxuICogVE9ET1xuICpcbiAqL1xuXG4vKlxuICogVGhlIEZyYWN0aW9uIGNvbnN0cnVjdG9yIHRha2VzIG9uZSBvZjpcbiAqICAgYW4gZXhwbGljaXQgbnVtZXJhdG9yIChpbnRlZ2VyKSBhbmQgZGVub21pbmF0b3IgKGludGVnZXIpLFxuICogICBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgZnJhY3Rpb24gKHN0cmluZyksXG4gKiAgIG9yIGEgZmxvYXRpbmctcG9pbnQgbnVtYmVyIChmbG9hdClcbiAqXG4gKiBUaGVzZSBpbml0aWFsaXphdGlvbiBtZXRob2RzIGFyZSBwcm92aWRlZCBmb3IgY29udmVuaWVuY2UuICBCZWNhdXNlIG9mXG4gKiByb3VuZGluZyBpc3N1ZXMgdGhlIGJlc3QgcmVzdWx0cyB3aWxsIGJlIGdpdmVuIHdoZW4gdGhlIGZyYWN0aW9uIGlzXG4gKiBjb25zdHJ1Y3RlZCBmcm9tIGFuIGV4cGxpY2l0IGludGVnZXIgbnVtZXJhdG9yIGFuZCBkZW5vbWVuYXRvciwgYW5kIG5vdCBhXG4gKiBkZWNpbWFsIG51bWJlci5cbiAqXG4gKlxuICogZS5nLiBuZXcgRnJhY3Rpb24oMSwgMikgLS0+IDEvMlxuICogICAgICBuZXcgRnJhY3Rpb24oJzEvMicpIC0tPiAxLzJcbiAqICAgICAgbmV3IEZyYWN0aW9uKCcyIDMvNCcpIC0tPiAxMS80ICAocHJpbnRzIGFzIDIgMy80KVxuICpcbiAqL1xuRnJhY3Rpb24gPSBmdW5jdGlvbihudW1lcmF0b3IsIGRlbm9taW5hdG9yKVxue1xuICAgIC8qIGRvdWJsZSBhcmd1bWVudCBpbnZvY2F0aW9uICovXG4gICAgaWYgKHR5cGVvZiBudW1lcmF0b3IgIT09ICd1bmRlZmluZWQnICYmIGRlbm9taW5hdG9yKSB7XG4gICAgICAgIGlmICh0eXBlb2YobnVtZXJhdG9yKSA9PT0gJ251bWJlcicgJiYgdHlwZW9mKGRlbm9taW5hdG9yKSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHRoaXMubnVtZXJhdG9yID0gbnVtZXJhdG9yO1xuICAgICAgICAgICAgdGhpcy5kZW5vbWluYXRvciA9IGRlbm9taW5hdG9yO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZihudW1lcmF0b3IpID09PSAnc3RyaW5nJyAmJiB0eXBlb2YoZGVub21pbmF0b3IpID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgLy8gd2hhdCBhcmUgdGhleT9cbiAgICAgICAgICAgIC8vIGhtbS4uLi5cbiAgICAgICAgICAgIC8vIGFzc3VtZSB0aGV5IGFyZSBpbnRzP1xuICAgICAgICAgICAgdGhpcy5udW1lcmF0b3IgPSBwYXJzZUludChudW1lcmF0b3IpO1xuICAgICAgICAgICAgdGhpcy5kZW5vbWluYXRvciA9IHBhcnNlSW50KGRlbm9taW5hdG9yKTtcbiAgICAgICAgfVxuICAgIC8qIHNpbmdsZS1hcmd1bWVudCBpbnZvY2F0aW9uICovXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZGVub21pbmF0b3IgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIG51bSA9IG51bWVyYXRvcjsgLy8gc3dhcCB2YXJpYWJsZSBuYW1lcyBmb3IgbGVnaWJpbGl0eVxuICAgICAgICBpZiAodHlwZW9mKG51bSkgPT09ICdudW1iZXInKSB7ICAvLyBqdXN0IGEgc3RyYWlnaHQgbnVtYmVyIGluaXRcbiAgICAgICAgICAgIHRoaXMubnVtZXJhdG9yID0gbnVtO1xuICAgICAgICAgICAgdGhpcy5kZW5vbWluYXRvciA9IDE7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mKG51bSkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB2YXIgYSwgYjsgIC8vIGhvbGQgdGhlIGZpcnN0IGFuZCBzZWNvbmQgcGFydCBvZiB0aGUgZnJhY3Rpb24sIGUuZy4gYSA9ICcxJyBhbmQgYiA9ICcyLzMnIGluIDEgMi8zXG4gICAgICAgICAgICAgICAgICAgICAgIC8vIG9yIGEgPSAnMi8zJyBhbmQgYiA9IHVuZGVmaW5lZCBpZiB3ZSBhcmUganVzdCBwYXNzZWQgYSBzaW5nbGUtcGFydCBudW1iZXJcbiAgICAgICAgICAgIHZhciBhcnIgPSBudW0uc3BsaXQoJyAnKVxuICAgICAgICAgICAgaWYgKGFyclswXSkgYSA9IGFyclswXVxuICAgICAgICAgICAgaWYgKGFyclsxXSkgYiA9IGFyclsxXVxuICAgICAgICAgICAgLyogY29tcG91bmQgZnJhY3Rpb24gZS5nLiAnQSBCL0MnICovXG4gICAgICAgICAgICAvLyAgaWYgYSBpcyBhbiBpbnRlZ2VyIC4uLlxuICAgICAgICAgICAgaWYgKGEgJSAxID09PSAwICYmIGIgJiYgYi5tYXRjaCgnLycpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChuZXcgRnJhY3Rpb24oYSkpLmFkZChuZXcgRnJhY3Rpb24oYikpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChhICYmICFiKSB7XG4gICAgICAgICAgICAgICAgLyogc2ltcGxlIGZyYWN0aW9uIGUuZy4gJ0EvQicgKi9cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mKGEpID09PSAnc3RyaW5nJyAmJiBhLm1hdGNoKCcvJykpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gaXQncyBub3QgYSB3aG9sZSBudW1iZXIuLi4gaXQncyBhY3R1YWxseSBhIGZyYWN0aW9uIHdpdGhvdXQgYSB3aG9sZSBwYXJ0IHdyaXR0ZW5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGYgPSBhLnNwbGl0KCcvJyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubnVtZXJhdG9yID0gZlswXTsgdGhpcy5kZW5vbWluYXRvciA9IGZbMV07XG4gICAgICAgICAgICAgICAgLyogc3RyaW5nIGZsb2F0aW5nIHBvaW50ICovXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YoYSkgPT09ICdzdHJpbmcnICYmIGEubWF0Y2goJ1xcLicpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRnJhY3Rpb24ocGFyc2VGbG9hdChhKSk7XG4gICAgICAgICAgICAgICAgLyogd2hvbGUgbnVtYmVyIGUuZy4gJ0EnICovXG4gICAgICAgICAgICAgICAgfSBlbHNlIHsgLy8ganVzdCBwYXNzZWQgYSB3aG9sZSBudW1iZXIgYXMgYSBzdHJpbmdcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5udW1lcmF0b3IgPSBwYXJzZUludChhKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kZW5vbWluYXRvciA9IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkOyAvLyBjb3VsZCBub3QgcGFyc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICB0aGlzLm5vcm1hbGl6ZSgpO1xufVxuXG5cbkZyYWN0aW9uLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKClcbntcbiAgICByZXR1cm4gbmV3IEZyYWN0aW9uKHRoaXMubnVtZXJhdG9yLCB0aGlzLmRlbm9taW5hdG9yKTtcbn1cblxuXG4vKiBwcmV0dHktcHJpbnRlciwgY29udmVydHMgZnJhY3Rpb25zIGludG8gd2hvbGUgbnVtYmVycyBhbmQgZnJhY3Rpb25zICovXG5GcmFjdGlvbi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpXG57XG4gICAgaWYgKHRoaXMuZGVub21pbmF0b3I9PT0nTmFOJykgcmV0dXJuICdOYU4nXG4gICAgdmFyIHdob2xlcGFydCA9ICh0aGlzLm51bWVyYXRvci90aGlzLmRlbm9taW5hdG9yPjApID9cbiAgICAgIE1hdGguZmxvb3IodGhpcy5udW1lcmF0b3IgLyB0aGlzLmRlbm9taW5hdG9yKSA6XG4gICAgICBNYXRoLmNlaWwodGhpcy5udW1lcmF0b3IgLyB0aGlzLmRlbm9taW5hdG9yKVxuICAgIHZhciBudW1lcmF0b3IgPSB0aGlzLm51bWVyYXRvciAlIHRoaXMuZGVub21pbmF0b3IgXG4gICAgdmFyIGRlbm9taW5hdG9yID0gdGhpcy5kZW5vbWluYXRvcjtcbiAgICB2YXIgcmVzdWx0ID0gW107IFxuICAgIGlmICh3aG9sZXBhcnQgIT0gMCkgIFxuICAgICAgICByZXN1bHQucHVzaCh3aG9sZXBhcnQpO1xuICAgIGlmIChudW1lcmF0b3IgIT0gMCkgIFxuICAgICAgICByZXN1bHQucHVzaCgoKHdob2xlcGFydD09PTApID8gbnVtZXJhdG9yIDogTWF0aC5hYnMobnVtZXJhdG9yKSkgKyAnLycgKyBkZW5vbWluYXRvcik7XG4gICAgcmV0dXJuIHJlc3VsdC5sZW5ndGggPiAwID8gcmVzdWx0LmpvaW4oJyAnKSA6IDA7XG59XG5cblxuLyogZGVzdHJ1Y3RpdmVseSByZXNjYWxlIHRoZSBmcmFjdGlvbiBieSBzb21lIGludGVncmFsIGZhY3RvciAqL1xuRnJhY3Rpb24ucHJvdG90eXBlLnJlc2NhbGUgPSBmdW5jdGlvbihmYWN0b3IpXG57XG4gICAgdGhpcy5udW1lcmF0b3IgKj0gZmFjdG9yO1xuICAgIHRoaXMuZGVub21pbmF0b3IgKj0gZmFjdG9yO1xuICAgIHJldHVybiB0aGlzO1xufVxuXG5cbkZyYWN0aW9uLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbihiKVxue1xuICAgIHZhciBhID0gdGhpcy5jbG9uZSgpO1xuICAgIGlmIChiIGluc3RhbmNlb2YgRnJhY3Rpb24pIHtcbiAgICAgICAgYiA9IGIuY2xvbmUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBiID0gbmV3IEZyYWN0aW9uKGIpO1xuICAgIH1cbiAgICB0ZCA9IGEuZGVub21pbmF0b3I7XG4gICAgYS5yZXNjYWxlKGIuZGVub21pbmF0b3IpO1xuICAgIGIucmVzY2FsZSh0ZCk7XG5cbiAgICBhLm51bWVyYXRvciArPSBiLm51bWVyYXRvcjtcblxuICAgIHJldHVybiBhLm5vcm1hbGl6ZSgpO1xufVxuXG5cbkZyYWN0aW9uLnByb3RvdHlwZS5zdWJ0cmFjdCA9IGZ1bmN0aW9uKGIpXG57XG4gICAgdmFyIGEgPSB0aGlzLmNsb25lKCk7XG4gICAgaWYgKGIgaW5zdGFuY2VvZiBGcmFjdGlvbikge1xuICAgICAgICBiID0gYi5jbG9uZSgpOyAgLy8gd2Ugc2NhbGUgb3VyIGFyZ3VtZW50IGRlc3RydWN0aXZlbHksIHNvIGNsb25lXG4gICAgfSBlbHNlIHtcbiAgICAgICAgYiA9IG5ldyBGcmFjdGlvbihiKTtcbiAgICB9XG4gICAgdGQgPSBhLmRlbm9taW5hdG9yO1xuICAgIGEucmVzY2FsZShiLmRlbm9taW5hdG9yKTtcbiAgICBiLnJlc2NhbGUodGQpO1xuXG4gICAgYS5udW1lcmF0b3IgLT0gYi5udW1lcmF0b3I7XG5cbiAgICByZXR1cm4gYS5ub3JtYWxpemUoKTtcbn1cblxuXG5GcmFjdGlvbi5wcm90b3R5cGUubXVsdGlwbHkgPSBmdW5jdGlvbihiKVxue1xuICAgIHZhciBhID0gdGhpcy5jbG9uZSgpO1xuICAgIGlmIChiIGluc3RhbmNlb2YgRnJhY3Rpb24pXG4gICAge1xuICAgICAgICBhLm51bWVyYXRvciAqPSBiLm51bWVyYXRvcjtcbiAgICAgICAgYS5kZW5vbWluYXRvciAqPSBiLmRlbm9taW5hdG9yO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGIgPT09ICdudW1iZXInKSB7XG4gICAgICAgIGEubnVtZXJhdG9yICo9IGI7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGEubXVsdGlwbHkobmV3IEZyYWN0aW9uKGIpKTtcbiAgICB9XG4gICAgcmV0dXJuIGEubm9ybWFsaXplKCk7XG59XG5cbkZyYWN0aW9uLnByb3RvdHlwZS5kaXZpZGUgPSBmdW5jdGlvbihiKVxue1xuICAgIHZhciBhID0gdGhpcy5jbG9uZSgpO1xuICAgIGlmIChiIGluc3RhbmNlb2YgRnJhY3Rpb24pXG4gICAge1xuICAgICAgICBhLm51bWVyYXRvciAqPSBiLmRlbm9taW5hdG9yO1xuICAgICAgICBhLmRlbm9taW5hdG9yICo9IGIubnVtZXJhdG9yO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGIgPT09ICdudW1iZXInKSB7XG4gICAgICAgIGEuZGVub21pbmF0b3IgKj0gYjtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gYS5kaXZpZGUobmV3IEZyYWN0aW9uKGIpKTtcbiAgICB9XG4gICAgcmV0dXJuIGEubm9ybWFsaXplKCk7XG59XG5cbkZyYWN0aW9uLnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbihiKVxue1xuICAgIGlmICghKGIgaW5zdGFuY2VvZiBGcmFjdGlvbikpIHtcbiAgICAgICAgYiA9IG5ldyBGcmFjdGlvbihiKTtcbiAgICB9XG4gICAgLy8gZnJhY3Rpb25zIHRoYXQgYXJlIGVxdWFsIHNob3VsZCBoYXZlIGVxdWFsIG5vcm1hbGl6ZWQgZm9ybXNcbiAgICB2YXIgYSA9IHRoaXMuY2xvbmUoKS5ub3JtYWxpemUoKTtcbiAgICB2YXIgYiA9IGIuY2xvbmUoKS5ub3JtYWxpemUoKTtcbiAgICByZXR1cm4gKGEubnVtZXJhdG9yID09PSBiLm51bWVyYXRvciAmJiBhLmRlbm9taW5hdG9yID09PSBiLmRlbm9taW5hdG9yKTtcbn1cblxuXG4vKiBVdGlsaXR5IGZ1bmN0aW9ucyAqL1xuXG4vKiBEZXN0cnVjdGl2ZWx5IG5vcm1hbGl6ZSB0aGUgZnJhY3Rpb24gdG8gaXRzIHNtYWxsZXN0IHJlcHJlc2VudGF0aW9uLiBcbiAqIGUuZy4gNC8xNiAtPiAxLzQsIDE0LzI4IC0+IDEvMiwgZXRjLlxuICogVGhpcyBpcyBjYWxsZWQgYWZ0ZXIgYWxsIG1hdGggb3BzLlxuICovXG5GcmFjdGlvbi5wcm90b3R5cGUubm9ybWFsaXplID0gKGZ1bmN0aW9uKClcbntcblxuICAgIHZhciBpc0Zsb2F0ID0gZnVuY3Rpb24obilcbiAgICB7XG4gICAgICAgIHJldHVybiAodHlwZW9mKG4pID09PSAnbnVtYmVyJyAmJiBcbiAgICAgICAgICAgICAgICAoKG4gPiAwICYmIG4gJSAxID4gMCAmJiBuICUgMSA8IDEpIHx8IFxuICAgICAgICAgICAgICAgICAobiA8IDAgJiYgbiAlIC0xIDwgMCAmJiBuICUgLTEgPiAtMSkpXG4gICAgICAgICAgICAgICApO1xuICAgIH1cblxuICAgIHZhciByb3VuZFRvUGxhY2VzID0gZnVuY3Rpb24obiwgcGxhY2VzKSBcbiAgICB7XG4gICAgICAgIGlmICghcGxhY2VzKSB7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5yb3VuZChuKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBzY2FsYXIgPSBNYXRoLnBvdygxMCwgcGxhY2VzKTtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKG4qc2NhbGFyKS9zY2FsYXI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgICAgIFxuICAgIHJldHVybiAoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgLy8gWFhYIGhhY2tpc2guICBJcyB0aGVyZSBhIGJldHRlciB3YXkgdG8gYWRkcmVzcyB0aGlzIGlzc3VlP1xuICAgICAgICAvL1xuICAgICAgICAvKiBmaXJzdCBjaGVjayBpZiB3ZSBoYXZlIGRlY2ltYWxzLCBhbmQgaWYgd2UgZG8gZWxpbWluYXRlIHRoZW1cbiAgICAgICAgICogbXVsdGlwbHkgYnkgdGhlIDEwIF4gbnVtYmVyIG9mIGRlY2ltYWwgcGxhY2VzIGluIHRoZSBudW1iZXJcbiAgICAgICAgICogcm91bmQgdGhlIG51bWJlciB0byBuaW5lIGRlY2ltYWwgcGxhY2VzXG4gICAgICAgICAqIHRvIGF2b2lkIGpzIGZsb2F0aW5nIHBvaW50IGZ1bm5pZXNcbiAgICAgICAgICovXG4gICAgICAgIGlmIChpc0Zsb2F0KHRoaXMuZGVub21pbmF0b3IpKSB7XG4gICAgICAgICAgICB2YXIgcm91bmRlZCA9IHJvdW5kVG9QbGFjZXModGhpcy5kZW5vbWluYXRvciwgOSk7XG4gICAgICAgICAgICB2YXIgc2NhbGV1cCA9IE1hdGgucG93KDEwLCByb3VuZGVkLnRvU3RyaW5nKCkuc3BsaXQoJy4nKVsxXS5sZW5ndGgpO1xuICAgICAgICAgICAgdGhpcy5kZW5vbWluYXRvciA9IE1hdGgucm91bmQodGhpcy5kZW5vbWluYXRvciAqIHNjYWxldXApOyAvLyB0aGlzICEhISBzaG91bGQgYmUgYSB3aG9sZSBudW1iZXJcbiAgICAgICAgICAgIC8vdGhpcy5udW1lcmF0b3IgKj0gc2NhbGV1cDtcbiAgICAgICAgICAgIHRoaXMubnVtZXJhdG9yICo9IHNjYWxldXA7XG4gICAgICAgIH0gXG4gICAgICAgIGlmIChpc0Zsb2F0KHRoaXMubnVtZXJhdG9yKSkge1xuICAgICAgICAgICAgdmFyIHJvdW5kZWQgPSByb3VuZFRvUGxhY2VzKHRoaXMubnVtZXJhdG9yLCA5KTtcbiAgICAgICAgICAgIHZhciBzY2FsZXVwID0gTWF0aC5wb3coMTAsIHJvdW5kZWQudG9TdHJpbmcoKS5zcGxpdCgnLicpWzFdLmxlbmd0aCk7XG4gICAgICAgICAgICB0aGlzLm51bWVyYXRvciA9IE1hdGgucm91bmQodGhpcy5udW1lcmF0b3IgKiBzY2FsZXVwKTsgLy8gdGhpcyAhISEgc2hvdWxkIGJlIGEgd2hvbGUgbnVtYmVyXG4gICAgICAgICAgICAvL3RoaXMubnVtZXJhdG9yICo9IHNjYWxldXA7XG4gICAgICAgICAgICB0aGlzLmRlbm9taW5hdG9yICo9IHNjYWxldXA7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGdjZiA9IEZyYWN0aW9uLmdjZih0aGlzLm51bWVyYXRvciwgdGhpcy5kZW5vbWluYXRvcik7XG4gICAgICAgIHRoaXMubnVtZXJhdG9yIC89IGdjZjtcbiAgICAgICAgdGhpcy5kZW5vbWluYXRvciAvPSBnY2Y7XG4gICAgICAgIGlmICgodGhpcy5udW1lcmF0b3IgPCAwICYmIHRoaXMuZGVub21pbmF0b3IgPCAwKSB8fCAodGhpcy5udW1lcmF0b3IgPiAwICYmIHRoaXMuZGVub21pbmF0b3IgPCAwKSkge1xuICAgICAgICAgICAgdGhpcy5udW1lcmF0b3IgKj0gLTE7XG4gICAgICAgICAgICB0aGlzLmRlbm9taW5hdG9yICo9IC0xO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0pO1xuXG59KSgpO1xuXG5cbi8qIFRha2VzIHR3byBudW1iZXJzIGFuZCByZXR1cm5zIHRoZWlyIGdyZWF0ZXN0IGNvbW1vbiBmYWN0b3IuXG4gKi9cbkZyYWN0aW9uLmdjZiA9IGZ1bmN0aW9uKGEsIGIpXG57XG5cbiAgICB2YXIgY29tbW9uX2ZhY3RvcnMgPSBbXTtcbiAgICB2YXIgZmEgPSBGcmFjdGlvbi5wcmltZUZhY3RvcnMoYSk7XG4gICAgdmFyIGZiID0gRnJhY3Rpb24ucHJpbWVGYWN0b3JzKGIpO1xuICAgIC8vIGZvciBlYWNoIGZhY3RvciBpbiBmYVxuICAgIC8vIGlmIGl0J3MgYWxzbyBpbiBmYlxuICAgIC8vIHB1dCBpdCBpbnRvIHRoZSBjb21tb24gZmFjdG9yc1xuICAgIGZhLmZvckVhY2goZnVuY3Rpb24gKGZhY3RvcikgXG4gICAgeyBcbiAgICAgICAgdmFyIGkgPSBmYi5pbmRleE9mKGZhY3Rvcik7XG4gICAgICAgIGlmIChpID49IDApIHtcbiAgICAgICAgICAgIGNvbW1vbl9mYWN0b3JzLnB1c2goZmFjdG9yKTtcbiAgICAgICAgICAgIGZiLnNwbGljZShpLDEpOyAvLyByZW1vdmUgZnJvbSBmYlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAoY29tbW9uX2ZhY3RvcnMubGVuZ3RoID09PSAwKVxuICAgICAgICByZXR1cm4gMTtcblxuICAgIHZhciBnY2YgPSAoZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciByID0gY29tbW9uX2ZhY3RvcnNbMF07XG4gICAgICAgIHZhciBpO1xuICAgICAgICBmb3IgKGk9MTtpPGNvbW1vbl9mYWN0b3JzLmxlbmd0aDtpKyspXG4gICAgICAgIHtcbiAgICAgICAgICAgIHIgPSByICogY29tbW9uX2ZhY3RvcnNbaV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHI7XG4gICAgfSkoKTtcblxuICAgIHJldHVybiBnY2Y7XG5cbn07XG5cblxuLy8gQWRhcHRlZCBmcm9tOiBcbi8vIGh0dHA6Ly93d3cuYnRpbnRlcm5ldC5jb20vfnNlMTYvanMvZmFjdG9yLmh0bVxuRnJhY3Rpb24ucHJpbWVGYWN0b3JzID0gZnVuY3Rpb24obikgXG57XG5cbiAgICB2YXIgbnVtID0gTWF0aC5hYnMobik7XG4gICAgdmFyIGZhY3RvcnMgPSBbXTtcbiAgICB2YXIgX2ZhY3RvciA9IDI7ICAvLyBmaXJzdCBwb3RlbnRpYWwgcHJpbWUgZmFjdG9yXG5cbiAgICB3aGlsZSAoX2ZhY3RvciAqIF9mYWN0b3IgPD0gbnVtKSAgLy8gc2hvdWxkIHdlIGtlZXAgbG9va2luZyBmb3IgZmFjdG9ycz9cbiAgICB7ICAgICAgXG4gICAgICBpZiAobnVtICUgX2ZhY3RvciA9PT0gMCkgIC8vIHRoaXMgaXMgYSBmYWN0b3JcbiAgICAgICAgeyBcbiAgICAgICAgICAgIGZhY3RvcnMucHVzaChfZmFjdG9yKTsgIC8vIHNvIGtlZXAgaXRcbiAgICAgICAgICAgIG51bSA9IG51bS9fZmFjdG9yOyAgLy8gYW5kIGRpdmlkZSBvdXIgc2VhcmNoIHBvaW50IGJ5IGl0XG4gICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICB7XG4gICAgICAgICAgICBfZmFjdG9yKys7ICAvLyBhbmQgaW5jcmVtZW50XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobnVtICE9IDEpICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGVyZSBpcyBhbnl0aGluZyBsZWZ0IGF0IHRoZSBlbmQuLi5cbiAgICB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAuLi50aGlzIG11c3QgYmUgdGhlIGxhc3QgcHJpbWUgZmFjdG9yXG4gICAgICAgIGZhY3RvcnMucHVzaChudW0pOyAgICAgICAgICAgLy8gICAgc28gaXQgdG9vIHNob3VsZCBiZSByZWNvcmRlZFxuICAgIH1cblxuICAgIHJldHVybiBmYWN0b3JzOyAgICAgICAgICAgICAgICAgIC8vIFJldHVybiB0aGUgcHJpbWUgZmFjdG9yc1xufVxuXG5tb2R1bGUuZXhwb3J0cy5GcmFjdGlvbiA9IEZyYWN0aW9uXG4iLCJpbXBvcnQge2VsZW1lbnRzfSBmcm9tICcuL2Jhc2UnO1xyXG5cclxuZXhwb3J0IGNvbnN0IHJlbmRlckl0ZW0gPSAoaXRlbSkgPT4ge1xyXG4gIGxldCBtYXJrdXAgPSBgPGxpIGNsYXNzPVwic2hvcHBpbmdfX2l0ZW1cIiBkYXRhLWl0ZW1pZD1cIiR7aXRlbS5pZH1cIj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwic2hvcHBpbmdfX2NvdW50XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgdmFsdWU9XCIke2l0ZW0uY291bnR9XCIgc3RlcD1cIiR7aXRlbS5jb3VudH1cIiBjbGFzcz1cImNoYW5nZS1zaG9wcGluZy1jb3VudFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8cD4ke2l0ZW0udW5pdH08L3A+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9XCJzaG9wcGluZ19fZGVzY3JpcHRpb25cIj4ke2l0ZW0uZGVzY3JpcHRpb259PC9wPlxyXG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJzaG9wcGluZ19fZGVsZXRlIGJ0bi10aW55XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzdmc+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dXNlIGhyZWY9XCJpbWcvaWNvbnMuc3ZnI2ljb24tY2lyY2xlLXdpdGgtY3Jvc3NcIj48L3VzZT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zdmc+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICA8L2xpPmA7XHJcbiAgZWxlbWVudHMuc2hvcHBpbmdMaXN0Lmluc2VydEFkamFjZW50SFRNTCggJ2JlZm9yZWVuZCcsIG1hcmt1cCApO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGRlbGV0ZUl0ZW0gPSAoZWxlbSkgPT4ge1xyXG4gIGVsZW1lbnRzLnNob3BwaW5nTGlzdC5yZW1vdmVDaGlsZChlbGVtKTtcclxufTsiLCJpbXBvcnQge2VsZW1lbnRzfSBmcm9tICcuL2Jhc2UnO1xyXG5pbXBvcnQge2N1dFRpdGxlfSBmcm9tICcuL3NlYXJjaFZpZXcnO1xyXG5cclxuZXhwb3J0IGNvbnN0IHRvb2dsZUxpa2VCdXR0b24gPSAoaXNMaWtlZCkgPT4ge1xyXG5cclxuICBjb25zdCBwYXRoID0gaXNMaWtlZCA/ICdpY29uLWhlYXJ0JyA6ICdpY29uLWhlYXJ0LW91dGxpbmVkJztcclxuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucmVjaXBlX19sb3ZlIHVzZScpLnNldEF0dHJpYnV0ZSgnaHJlZicsIGBpbWcvaWNvbnMuc3ZnIyR7cGF0aH1gKTtcclxuICBcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IHRvb2dsZUxpa2VzTGlzdEJ1dHRvbiA9IChsZW5ndGgpID0+IHtcclxuXHJcbiAgY29uc3QgdmlzaW9uID0gbGVuZ3RoPjAgPyAndmlzaWJsZScgOiAnaGlkZGVuJztcclxuICBlbGVtZW50cy5idXR0b25MaWtlcy5zdHlsZS52aXNpYmlsaXR5ID0gdmlzaW9uO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgcmVuZGVyTGlrZSA9IChpZCwgdGl0bGUsIGF1dGhvciwgaW1hZ2UpID0+IHtcclxuICBjb25zdCBtYXJrdXAgPSBgPGxpPlxyXG4gICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPVwibGlrZXNfX2xpbmtcIiBocmVmPVwiIyR7aWR9XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8ZmlndXJlIGNsYXNzPVwibGlrZXNfX2ZpZ1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPVwiJHtpbWFnZX1cIiBhbHQ9XCIke2N1dFRpdGxlKHRpdGxlLCAxMyl9XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8L2ZpZ3VyZT5cclxuICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJsaWtlc19fZGF0YVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxoNCBjbGFzcz1cImxpa2VzX19uYW1lXCI+JHt0aXRsZX08L2g0PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPVwibGlrZXNfX2F1dGhvclwiPiR7YXV0aG9yfTwvcD5cclxuICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvYT5cclxuICAgICAgICAgICAgICAgICAgPC9saT5gO1xyXG4gIGVsZW1lbnRzLmxpa2VzTGlzdC5pbnNlcnRBZGphY2VudEhUTUwoICdiZWZvcmVlbmQnLCBtYXJrdXAgKTtcclxufVxyXG5leHBvcnQgY29uc3QgZGVsZXRlTGlrZSA9IChpZCkgPT4ge1xyXG4gIFxyXG4gIGxldCBET01saSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYC5saWtlc19fbGlua1tocmVmPVwiIyR7aWR9XCJdYCkucGFyZW50Tm9kZTtcclxuICBpZihET01saS5wYXJlbnROb2RlKSB7XHJcbiAgICBET01saS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKERPTWxpKTtcclxuICB9XHJcbn0iLCJpbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVjaXBlIHtcclxuICBjb25zdHJ1Y3RvcihpZCkge1xyXG4gICAgdGhpcy5pZCA9IGlkXHJcbiAgfVxyXG4gIGFzeW5jIGh0dHBSZXF1ZXN0KCkge1xyXG4gICAgdHJ5IHtcclxuXHJcbiAgICAgIGNvbnN0IGtleSA9ICdlMjdiZGVmZTVmMDExNGZkMjU3YzU2ZGVkYTI5MmM2Myc7XHJcbiAgICAgIGNvbnN0IHByb3h5ID0gJ2h0dHBzOi8vY29ycy1hbnl3aGVyZS5oZXJva3VhcHAuY29tLyc7XHJcbiAgICAgIC8vY29uc3QgcHJveHkgPSAnJztcclxuICAgICAgY29uc3QgdXJsID0gJ2h0dHBzOi8vd3d3LmZvb2QyZm9yay5jb20vYXBpL2dldCc7XHJcbiAgICAgIFxyXG4gICAgICBsZXQgcmVzID0gYXdhaXQgYXhpb3MoYCR7cHJveHl9JHt1cmx9P2tleT0ke2tleX0mcklkPSR7dGhpcy5pZH1gKTtcclxuICAgICAgdGhpcy50aXRsZSA9IHJlcy5kYXRhLnJlY2lwZS50aXRsZTtcclxuICAgICAgdGhpcy5pbWFnZSA9IHJlcy5kYXRhLnJlY2lwZS5pbWFnZV91cmw7XHJcbiAgICAgIHRoaXMucHVibGlzaGVyID0gcmVzLmRhdGEucmVjaXBlLnB1Ymxpc2hlcjtcclxuICAgICAgdGhpcy5pbmdyZWRpZW50cyA9IHJlcy5kYXRhLnJlY2lwZS5pbmdyZWRpZW50cztcclxuICAgICAgdGhpcy51cmwgPSByZXMuZGF0YS5yZWNpcGUuc291cmNlX3VybDtcclxuXHJcbiAgICB9IGNhdGNoKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcclxuICAgICAgYWxlcnQoXCJTb21ldGhpbmcgd2VudCB3cm9uZyA6KFwiKTtcclxuICAgIH1cclxuICB9XHJcbiAgY2FsY1RpbWUoKSB7XHJcbiAgICAvLyBsZXQgYXNzdW1lIHRoYXQgd2UgbmVlZCAxNSBtaW4gdG8gY29vayAzIGVsZW1lbnRzXHJcbiAgICBjb25zdCBwYXJ0cyA9IE1hdGguY2VpbCh0aGlzLmluZ3JlZGllbnRzLmxlbmd0aCAvIDMpO1xyXG4gICAgY29uc3QgdGltZSA9IHBhcnRzKjE1O1xyXG4gICAgdGhpcy50aW1lID0gdGltZTtcclxuICB9XHJcblxyXG4gIGNhbGNTZXJ2aW5nKCkge1xyXG4gICAgdGhpcy5zZXJ2aW5nID0gNDtcclxuICB9XHJcblxyXG4gIHJld3JpdGVJbmdyZWRpZW50cygpIHtcclxuICAgIGNvbnN0IHVuaXRMb25nID0gWyd0YWJsZXNwb29ucycsICd0YWJsZXNwb29uJywgJ291bmNlcycsICdvdW5jZScsICd0ZWFzcG9vbnMnLCAndGVhc3Bvb24nLCAnY3VwcycsICdwb3VuZHMnXTtcclxuICAgIGNvbnN0IHVuaXRTaG9ydCA9IFsndGJzcCcsJ3Ric3AnLCdveicsJ296JywndHNwJywnY3VwJywncG91bmQnXTtcclxuXHJcbiAgICBsZXQgbmV3SW5ncmVkaWVudHMgPSB0aGlzLmluZ3JlZGllbnRzLm1hcChlbGVtID0+IHtcclxuXHJcbiAgICAgIGxldCBpbmdyZWRpZW50ID0gZWxlbS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICB1bml0TG9uZy5mb3JFYWNoKChzdHIsaSkgPT4gaW5ncmVkaWVudCA9IGluZ3JlZGllbnQucmVwbGFjZShzdHIsIHVuaXRTaG9ydFtpXSkpO1xyXG4gICAgICAvLyByZW1vdmUgdGV4dCBpbiAoKSBicmFja2V0c1xyXG4gICAgICBpbmdyZWRpZW50ID0gaW5ncmVkaWVudC5yZXBsYWNlKC8gKlxcKFteKV0qXFwpICovZywgJyAnKTtcclxuICAgICAgLy9wYXJzZSBpbmdyIHRvIG9ialxyXG4gICAgICBsZXQgSW5nT2JqO1xyXG4gICAgICBsZXQgc3BsaXRJbmcgPSBpbmdyZWRpZW50LnNwbGl0KCcgJyk7XHJcbiAgICAgIGxldCB1bml0SW5kZXggPSBzcGxpdEluZy5maW5kSW5kZXgoZWxlbWVudCA9PiB1bml0U2hvcnQuc29tZShzdHIgPT4gZWxlbWVudC5pbmNsdWRlcyhzdHIpKSk7XHJcblxyXG4gICAgICBpZih1bml0SW5kZXggPiAtMSkge1xyXG4gICAgICAgIC8vIGNvbnRhaW4gdW5pdCwgYW5kIDEgZWxlbWVudCBpcyBudW1iZXJcclxuICAgICAgICBsZXQgaW5kZXggPSB1bml0U2hvcnQuZmluZEluZGV4KGVsZW0gPT4gc3BsaXRJbmdbdW5pdEluZGV4XS5pbmNsdWRlcyhlbGVtKSk7XHJcbiAgICAgICAgc3BsaXRJbmdbdW5pdEluZGV4XSA9IHVuaXRTaG9ydFtpbmRleF07XHJcbiAgICAgICAgaWYodW5pdEluZGV4ID09PSAxKSB7XHJcbiAgICAgICAgICBJbmdPYmogPSB7XHJcbiAgICAgICAgICAgIGNvdW50OiBldmFsKHNwbGl0SW5nWzBdLnJlcGxhY2UoJy0nLCcrJykpLFxyXG4gICAgICAgICAgICB1bml0OiBzcGxpdEluZ1t1bml0SW5kZXhdLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogc3BsaXRJbmcuc2xpY2UodW5pdEluZGV4ICsgMSkuam9pbignICcpXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIC8vIGNvbnRhaW4gdW5pdCwgYW5kIHNlY29uZCBlbGVtZW50IGlzIG51bWJlclxyXG4gICAgICAgICAgbGV0IHZhbHVlcyA9IHNwbGl0SW5nLnNsaWNlKDAsIHVuaXRJbmRleCk7XHJcbiAgICAgICAgICB2YWx1ZXMgPSB2YWx1ZXMuZmlsdGVyKGVsZW0gPT4gcGFyc2VJbnQoZWxlbSwgMTApKTtcclxuICAgICAgICAgIGxldCBzdHIgPSB2YWx1ZXMucmVkdWNlKChwcmV2ICwgY3VycikgPT4gcHJldiArICcrJyArIGN1cnIpO1xyXG4gICAgICAgICAgbGV0IHZhbHVlID0gZXZhbChzdHIucmVwbGFjZSgnLScsJysnKSk7XHJcbiAgXHJcbiAgICAgICAgICBJbmdPYmogPSB7XHJcbiAgICAgICAgICAgIGNvdW50OiB2YWx1ZSxcclxuICAgICAgICAgICAgdW5pdDogc3BsaXRJbmdbdW5pdEluZGV4XSxcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246IHNwbGl0SW5nLnNsaWNlKHVuaXRJbmRleCArIDEpLmpvaW4oJyAnKVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIGlmKHBhcnNlSW50KHNwbGl0SW5nWzBdKSkge1xyXG4gICAgICAgIC8vIG5vIHVuaXQsIGJ1dCAxIGVsZW1lbnQgaXMgbnVtYmVyXHJcbiAgICAgICAgSW5nT2JqID0ge1xyXG4gICAgICAgICAgY291bnQ6IGV2YWwoc3BsaXRJbmdbMF0ucmVwbGFjZSgnLScsJysnKSksXHJcbiAgICAgICAgICB1bml0OiAnJyxcclxuICAgICAgICAgIGRlc2NyaXB0aW9uOiBzcGxpdEluZy5zbGljZSgxKS5qb2luKCcgJylcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gbm8gdW5pdCwgYW5kIG5vIG51bWJlclxyXG4gICAgICAgIEluZ09iaiA9IHtcclxuICAgICAgICAgIGNvdW50OiAwLFxyXG4gICAgICAgICAgdW5pdDogJycsXHJcbiAgICAgICAgICBkZXNjcmlwdGlvbjogc3BsaXRJbmcuam9pbignICcpXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBJbmdPYmo7XHJcbiAgICB9KTtcclxuICAgIHRoaXMuaW5ncmVkaWVudHMgPSBuZXdJbmdyZWRpZW50cztcclxuICB9XHJcbiAgcmVjb3VudEluZ3JlZGllbnRzKHR5cGUpIHtcclxuICAgIC8vIGNvdW50IHNlcnZpbmdzXHJcbiAgICBjb25zdCBuZXdTZXJ2aW5nID0gKHR5cGUgPT09ICdpbmMnID8gdGhpcy5zZXJ2aW5nICsgMSA6IHRoaXMuc2VydmluZyAtIDEpO1xyXG5cclxuICAgIC8vIGNvdW50IG11bHRpcGxpZXIgZm9yIGVhY2ggZWxlbVxyXG4gICAgdGhpcy5pbmdyZWRpZW50cy5mb3JFYWNoKGluZyA9PiB7XHJcbiAgICAgIGNvbnN0IG5ld0NvdW50ID0gaW5nLmNvdW50Km5ld1NlcnZpbmcvdGhpcy5zZXJ2aW5nO1xyXG4gICAgICBpbmcuY291bnQgPSBuZXdDb3VudDtcclxuICAgIH0pXHJcblxyXG4gICAgdGhpcy5zZXJ2aW5nID0gbmV3U2VydmluZztcclxuICB9XHJcblxyXG59Il0sInNvdXJjZVJvb3QiOiIifQ==